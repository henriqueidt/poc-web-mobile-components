{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAccountUsername = getAccountUsername;\nexports.getFullName = getFullName;\nfunction _getUserState() {\n  var data = require(\"./getUserState\");\n  _getUserState = function _getUserState() {\n    return data;\n  };\n  return data;\n}\nvar ANONYMOUS_USERNAME = 'anonymous';\nfunction getFullName(manifest) {\n  var username = getAccountUsername(manifest);\n  return \"@\" + username + \"/\" + manifest.slug;\n}\nfunction getAccountUsername() {\n  var manifest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _getUserState$read$au;\n  var username = manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n  if (username) {\n    return username;\n  }\n  return ((_getUserState$read$au = (0, _getUserState().getUserState)().read().auth) === null || _getUserState$read$au === void 0 ? void 0 : _getUserState$read$au.username) || ANONYMOUS_USERNAME;\n}","map":{"version":3,"names":["_getUserState","data","require","ANONYMOUS_USERNAME","getFullName","manifest","username","getAccountUsername","slug","arguments","length","undefined","_getUserState$read$au","owner","process","env","EXPO_CLI_USERNAME","EAS_BUILD_USERNAME","getUserState","read","auth"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config/src/getFullName.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { getUserState } from './getUserState';\n\nconst ANONYMOUS_USERNAME = 'anonymous';\n\n/**\n * Used in expo-constants to generate the `id` property statically for an app in custom managed workflow.\n * This `id` is used for legacy Expo services AuthSession proxy and Expo notifications device ID.\n *\n * @param manifest\n * @returns\n */\nexport function getFullName(manifest: Pick<ExpoConfig, 'owner' | 'slug'>): string {\n  const username = getAccountUsername(manifest);\n  return `@${username}/${manifest.slug}`;\n}\n\nexport function getAccountUsername(manifest: Pick<ExpoConfig, 'owner'> = {}): string {\n  // TODO: Must match what's generated in Expo Go.\n  const username =\n    manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n  if (username) {\n    return username;\n  }\n  // Statically get the username from the global user state.\n  return getUserState().read().auth?.username || ANONYMOUS_USERNAME;\n}\n"],"mappings":";;;;;;;AAEA,SAAAA,cAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,aAAA,YAAAA,cAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,IAAME,kBAAkB,GAAG,WAA3B;AASO,SAASC,WAATA,CAAqBC,QAArB,EAA2E;EAChF,IAAMC,QAAQ,GAAGC,kBAAkB,CAACF,QAAD,CAAnC;EACA,aAAWC,QAAS,SAAGD,QAAQ,CAACG,IAAK;AACtC;AAEM,SAASD,kBAATA,CAAA,EAA8E;EAAA,IAAlDF,QAAmC,GAAAI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAlE;EAA8E,IAAAG,qBAAA;EAEnF,IAAMN,QAAQ,GACZD,QAAQ,CAACQ,KAAT,IAAkBC,OAAO,CAACC,GAAR,CAAYC,iBAA9B,IAAmDF,OAAO,CAACC,GAAR,CAAYE,kBADjE;EAEA,IAAIX,QAAJ,EAAc;IACZ,OAAOA,QAAP;EACD;EAED,OAAO,EAAAM,qBAAA,OAAAZ,aAAA,GAAAkB,YAAA,IAAeC,IAAf,GAAsBC,IAAtB,cAAAR,qBAAA,uBAAAA,qBAAA,CAA4BN,QAA5B,KAAwCH,kBAA/C;AACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}