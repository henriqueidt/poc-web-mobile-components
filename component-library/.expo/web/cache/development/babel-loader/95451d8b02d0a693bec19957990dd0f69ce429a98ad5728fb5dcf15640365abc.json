{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBareExtensions = getBareExtensions;\nexports.getExtensions = getExtensions;\nexports.getLanguageExtensionsInOrder = getLanguageExtensionsInOrder;\nexports.getManagedExtensions = getManagedExtensions;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getExtensions(platforms, extensions, workflows) {\n  (0, _assert().default)(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  (0, _assert().default)(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  (0, _assert().default)(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n  var fileExtensions = [];\n  for (var workflow of [].concat(_toConsumableArray(workflows), [''])) {\n    for (var platform of [].concat(_toConsumableArray(platforms), [''])) {\n      for (var extension of extensions) {\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n  return fileExtensions;\n}\nfunction getLanguageExtensionsInOrder(_ref) {\n  var isTS = _ref.isTS,\n    isModern = _ref.isModern,\n    isReact = _ref.isReact;\n  var addLanguage = function addLanguage(lang) {\n    return [lang, isReact && lang + \"x\"].filter(Boolean);\n  };\n  var extensions = addLanguage('js');\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [].concat(_toConsumableArray(addLanguage('ts')), _toConsumableArray(extensions));\n  }\n  return extensions;\n}\nfunction getManagedExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), ['expo']);\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\nfunction getBareExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), []);\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\nfunction _addMiscellaneousExtensions(platforms, fileExtensions) {\n  fileExtensions.push('json');\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","getExtensions","platforms","extensions","workflows","default","Array","isArray","fileExtensions","workflow","concat","_toConsumableArray","platform","extension","push","filter","Boolean","join","getLanguageExtensionsInOrder","_ref","isTS","isModern","isReact","addLanguage","lang","unshift","getManagedExtensions","languageOptions","arguments","length","undefined","_addMiscellaneousExtensions","getBareExtensions","includes"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config/src/paths/extensions.ts"],"sourcesContent":["import assert from 'assert';\n\nexport type LanguageOptions = {\n  isTS: boolean;\n  isModern: boolean;\n  isReact: boolean;\n};\n\nexport function getExtensions(\n  platforms: string[],\n  extensions: string[],\n  workflows: string[]\n): string[] {\n  // In the past we used spread operators to collect the values so now we enforce type safety on them.\n  assert(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  assert(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  assert(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n\n  const fileExtensions = [];\n  // support .expo files\n  for (const workflow of [...workflows, '']) {\n    // Ensure order is correct: [platformA.js, platformB.js, js]\n    for (const platform of [...platforms, '']) {\n      // Support both TypeScript and JavaScript\n      for (const extension of extensions) {\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n  return fileExtensions;\n}\n\nexport function getLanguageExtensionsInOrder({\n  isTS,\n  isModern,\n  isReact,\n}: LanguageOptions): string[] {\n  // @ts-ignore: filter removes false type\n  const addLanguage = (lang: string): string[] => [lang, isReact && `${lang}x`].filter(Boolean);\n\n  // Support JavaScript\n  let extensions = addLanguage('js');\n\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [...addLanguage('ts'), ...extensions];\n  }\n\n  return extensions;\n}\n\nexport function getManagedExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), [\n    'expo',\n  ]);\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nexport function getBareExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(\n    platforms,\n    getLanguageExtensionsInOrder(languageOptions),\n    []\n  );\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nfunction _addMiscellaneousExtensions(platforms: string[], fileExtensions: string[]): string[] {\n  // Always add these with no platform extension\n  // In the future we may want to add platform and workspace extensions to json.\n  fileExtensions.push('json');\n  // Native doesn't currently support web assembly.\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}