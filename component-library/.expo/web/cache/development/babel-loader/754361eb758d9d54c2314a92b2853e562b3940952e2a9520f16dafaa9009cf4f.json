{"ast":null,"code":"var Range = require(\"../classes/range.js\");\nvar Comparator = require(\"../classes/comparator.js\");\nvar ANY = Comparator.ANY;\nvar satisfies = require(\"../functions/satisfies.js\");\nvar compare = require(\"../functions/compare.js\");\nvar subset = function subset(sub, dom) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (sub === dom) {\n    return true;\n  }\n  sub = new Range(sub, options);\n  dom = new Range(dom, options);\n  var sawNonNull = false;\n  OUTER: for (var simpleSub of sub.set) {\n    for (var simpleDom of dom.set) {\n      var isSub = simpleSubset(simpleSub, simpleDom, options);\n      sawNonNull = sawNonNull || isSub !== null;\n      if (isSub) {\n        continue OUTER;\n      }\n    }\n    if (sawNonNull) {\n      return false;\n    }\n  }\n  return true;\n};\nvar minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')];\nvar minimumVersion = [new Comparator('>=0.0.0')];\nvar simpleSubset = function simpleSubset(sub, dom, options) {\n  if (sub === dom) {\n    return true;\n  }\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true;\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease;\n    } else {\n      sub = minimumVersion;\n    }\n  }\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true;\n    } else {\n      dom = minimumVersion;\n    }\n  }\n  var eqSet = new Set();\n  var gt, lt;\n  for (var c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options);\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options);\n    } else {\n      eqSet.add(c.semver);\n    }\n  }\n  if (eqSet.size > 1) {\n    return null;\n  }\n  var gtltComp;\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options);\n    if (gtltComp > 0) {\n      return null;\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null;\n    }\n  }\n  for (var eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null;\n    }\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null;\n    }\n    for (var _c of dom) {\n      if (!satisfies(eq, String(_c), options)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  var higher, lower;\n  var hasDomLT, hasDomGT;\n  var needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;\n  var needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false;\n  }\n  for (var _c2 of dom) {\n    hasDomGT = hasDomGT || _c2.operator === '>' || _c2.operator === '>=';\n    hasDomLT = hasDomLT || _c2.operator === '<' || _c2.operator === '<=';\n    if (gt) {\n      if (needDomGTPre) {\n        if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomGTPre.major && _c2.semver.minor === needDomGTPre.minor && _c2.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false;\n        }\n      }\n      if (_c2.operator === '>' || _c2.operator === '>=') {\n        higher = higherGT(gt, _c2, options);\n        if (higher === _c2 && higher !== gt) {\n          return false;\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(_c2), options)) {\n        return false;\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (_c2.semver.prerelease && _c2.semver.prerelease.length && _c2.semver.major === needDomLTPre.major && _c2.semver.minor === needDomLTPre.minor && _c2.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false;\n        }\n      }\n      if (_c2.operator === '<' || _c2.operator === '<=') {\n        lower = lowerLT(lt, _c2, options);\n        if (lower === _c2 && lower !== lt) {\n          return false;\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(_c2), options)) {\n        return false;\n      }\n    }\n    if (!_c2.operator && (lt || gt) && gtltComp !== 0) {\n      return false;\n    }\n  }\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false;\n  }\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false;\n  }\n  if (needDomGTPre || needDomLTPre) {\n    return false;\n  }\n  return true;\n};\nvar higherGT = function higherGT(a, b, options) {\n  if (!a) {\n    return b;\n  }\n  var comp = compare(a.semver, b.semver, options);\n  return comp > 0 ? a : comp < 0 ? b : b.operator === '>' && a.operator === '>=' ? b : a;\n};\nvar lowerLT = function lowerLT(a, b, options) {\n  if (!a) {\n    return b;\n  }\n  var comp = compare(a.semver, b.semver, options);\n  return comp < 0 ? a : comp > 0 ? b : b.operator === '<' && a.operator === '<=' ? b : a;\n};\nmodule.exports = subset;","map":{"version":3,"names":["Range","require","Comparator","ANY","satisfies","compare","subset","sub","dom","options","arguments","length","undefined","sawNonNull","OUTER","simpleSub","set","simpleDom","isSub","simpleSubset","minimumVersionWithPreRelease","minimumVersion","semver","includePrerelease","eqSet","Set","gt","lt","c","operator","higherGT","lowerLT","add","size","gtltComp","eq","String","higher","lower","hasDomLT","hasDomGT","needDomLTPre","prerelease","needDomGTPre","major","minor","patch","a","b","comp","module","exports"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/node_modules/semver/ranges/subset.js"],"sourcesContent":["const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]\nconst minimumVersion = [new Comparator('>=0.0.0')]\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease\n    } else {\n      sub = minimumVersion\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = minimumVersion\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}