{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGoogleServicesFile = getGoogleServicesFile;\nexports.getGoogleSignInReservedClientId = getGoogleSignInReservedClientId;\nexports.setGoogleConfig = setGoogleConfig;\nexports.setGoogleServicesFile = setGoogleServicesFile;\nexports.setGoogleSignInReservedClientId = setGoogleSignInReservedClientId;\nexports.withGoogleServicesFile = exports.withGoogle = void 0;\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n  _plist = function _plist() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _Scheme() {\n  var data = require(\"./Scheme\");\n  _Scheme = function _Scheme() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withGoogle = function withGoogle(config) {\n  return (0, _iosPlugins().withInfoPlist)(config, function (config) {\n    config.modResults = setGoogleConfig(config, config.modResults, config.modRequest);\n    return config;\n  });\n};\nexports.withGoogle = withGoogle;\nvar withGoogleServicesFile = function withGoogleServicesFile(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults\n    });\n    return config;\n  });\n};\nexports.withGoogleServicesFile = withGoogleServicesFile;\nfunction readGoogleServicesInfoPlist(relativePath, _ref) {\n  var projectRoot = _ref.projectRoot;\n  var googleServiceFilePath = _path().default.resolve(projectRoot, relativePath);\n  var contents = _fs().default.readFileSync(googleServiceFilePath, 'utf8');\n  (0, _assert().default)(contents, 'GoogleService-Info.plist is empty');\n  return _plist().default.parse(contents);\n}\nfunction getGoogleSignInReservedClientId(config, modRequest) {\n  var _config$ios$config$go, _config$ios, _config$ios$config, _config$ios$config$go2, _infoPlist$REVERSED_C;\n  var reservedClientId = (_config$ios$config$go = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : (_config$ios$config$go2 = _config$ios$config.googleSignIn) === null || _config$ios$config$go2 === void 0 ? void 0 : _config$ios$config$go2.reservedClientId) !== null && _config$ios$config$go !== void 0 ? _config$ios$config$go : null;\n  if (reservedClientId) {\n    return reservedClientId;\n  }\n  var googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return null;\n  }\n  var infoPlist = readGoogleServicesInfoPlist(googleServicesFileRelativePath, modRequest);\n  return (_infoPlist$REVERSED_C = infoPlist.REVERSED_CLIENT_ID) !== null && _infoPlist$REVERSED_C !== void 0 ? _infoPlist$REVERSED_C : null;\n}\nfunction getGoogleServicesFile(config) {\n  var _config$ios$googleSer, _config$ios2;\n  return (_config$ios$googleSer = (_config$ios2 = config.ios) === null || _config$ios2 === void 0 ? void 0 : _config$ios2.googleServicesFile) !== null && _config$ios$googleSer !== void 0 ? _config$ios$googleSer : null;\n}\nfunction setGoogleSignInReservedClientId(config, infoPlist, modRequest) {\n  var reservedClientId = getGoogleSignInReservedClientId(config, modRequest);\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n  return (0, _Scheme().appendScheme)(reservedClientId, infoPlist);\n}\nfunction setGoogleConfig(config, infoPlist, modRequest) {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist, modRequest);\n  return infoPlist;\n}\nfunction setGoogleServicesFile(config, _ref2) {\n  var projectRoot = _ref2.projectRoot,\n    project = _ref2.project;\n  var googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n  var googleServiceFilePath = _path().default.resolve(projectRoot, googleServicesFileRelativePath);\n  _fs().default.copyFileSync(googleServiceFilePath, _path().default.join((0, _Paths().getSourceRoot)(projectRoot), 'GoogleService-Info.plist'));\n  var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n  var plistFilePath = projectName + \"/GoogleService-Info.plist\";\n  if (!project.hasFile(plistFilePath)) {\n    project = (0, _Xcodeproj().addResourceFileToGroup)({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project: project,\n      isBuildFile: true,\n      verbose: true\n    });\n  }\n  return project;\n}","map":{"version":3,"names":["_plist","data","_interopRequireDefault","require","_assert","_fs","_path","_iosPlugins","_Paths","_Scheme","_Xcodeproj","withGoogle","config","withInfoPlist","modResults","setGoogleConfig","modRequest","withGoogleServicesFile","withXcodeProject","setGoogleServicesFile","projectRoot","project","readGoogleServicesInfoPlist","relativePath","_ref","googleServiceFilePath","default","resolve","contents","readFileSync","parse","getGoogleSignInReservedClientId","_config$ios$config$go","_config$ios","_config$ios$config","_config$ios$config$go2","_infoPlist$REVERSED_C","reservedClientId","ios","googleSignIn","googleServicesFileRelativePath","getGoogleServicesFile","infoPlist","REVERSED_CLIENT_ID","_config$ios$googleSer","_config$ios2","googleServicesFile","setGoogleSignInReservedClientId","appendScheme","_ref2","copyFileSync","join","getSourceRoot","projectName","getProjectName","plistFilePath","hasFile","addResourceFileToGroup","filepath","groupName","isBuildFile","verbose"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/ios/Google.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin, ModProps } from '../Plugin.types';\nimport { withInfoPlist, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { getSourceRoot } from './Paths';\nimport { appendScheme } from './Scheme';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nexport const withGoogle: ConfigPlugin = config => {\n  return withInfoPlist(config, config => {\n    config.modResults = setGoogleConfig(config, config.modResults, config.modRequest);\n    return config;\n  });\n};\n\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nfunction readGoogleServicesInfoPlist(\n  relativePath: string,\n  { projectRoot }: { projectRoot: string }\n) {\n  const googleServiceFilePath = path.resolve(projectRoot, relativePath);\n  const contents = fs.readFileSync(googleServiceFilePath, 'utf8');\n  assert(contents, 'GoogleService-Info.plist is empty');\n  return plist.parse(contents);\n}\n\nexport function getGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): string | null {\n  const reservedClientId = config.ios?.config?.googleSignIn?.reservedClientId ?? null;\n  if (reservedClientId) {\n    return reservedClientId;\n  }\n\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return null;\n  }\n\n  const infoPlist = readGoogleServicesInfoPlist(googleServicesFileRelativePath, modRequest);\n\n  return infoPlist.REVERSED_CLIENT_ID ?? null;\n}\n\nexport function getGoogleServicesFile(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.googleServicesFile ?? null;\n}\n\nexport function setGoogleSignInReservedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): InfoPlist {\n  const reservedClientId = getGoogleSignInReservedClientId(config, modRequest);\n\n  if (reservedClientId === null) {\n    return infoPlist;\n  }\n\n  return appendScheme(reservedClientId, infoPlist);\n}\n\nexport function setGoogleConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: ModProps<InfoPlist>\n): InfoPlist {\n  infoPlist = setGoogleSignInReservedClientId(config, infoPlist, modRequest);\n  return infoPlist;\n}\n\nexport function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'ios'>,\n  { projectRoot, project }: { project: XcodeProject; projectRoot: string }\n): XcodeProject {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  const googleServiceFilePath = path.resolve(projectRoot, googleServicesFileRelativePath);\n  fs.copyFileSync(\n    googleServiceFilePath,\n    path.join(getSourceRoot(projectRoot), 'GoogleService-Info.plist')\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = addResourceFileToGroup({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project,\n      isBuildFile: true,\n      verbose: true,\n    });\n  }\n  return project;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}