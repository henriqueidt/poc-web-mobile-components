{"ast":null,"code":"'use strict';\n\nvar fs = require('graceful-fs');\nvar path = require('path');\nvar mkdirsSync = require(\"../mkdirs\").mkdirsSync;\nvar utimesMillisSync = require(\"../util/utimes\").utimesMillisSync;\nvar stat = require(\"../util/stat\");\nfunction copySync(src, dest, opts) {\n  if (typeof opts === 'function') {\n    opts = {\n      filter: opts\n    };\n  }\n  opts = opts || {};\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true;\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber;\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(\"fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n    see https://github.com/jprichardson/node-fs-extra/issues/269\");\n  }\n  var _stat$checkPathsSync = stat.checkPathsSync(src, dest, 'copy'),\n    srcStat = _stat$checkPathsSync.srcStat,\n    destStat = _stat$checkPathsSync.destStat;\n  stat.checkParentPathsSync(src, srcStat, dest, 'copy');\n  return handleFilterAndCopy(destStat, src, dest, opts);\n}\nfunction handleFilterAndCopy(destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return;\n  var destParent = path.dirname(dest);\n  if (!fs.existsSync(destParent)) mkdirsSync(destParent);\n  return startCopy(destStat, src, dest, opts);\n}\nfunction startCopy(destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return;\n  return getStats(destStat, src, dest, opts);\n}\nfunction getStats(destStat, src, dest, opts) {\n  var statSync = opts.dereference ? fs.statSync : fs.lstatSync;\n  var srcStat = statSync(src);\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts);else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts);else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts);\n}\nfunction onFile(srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts);\n  return mayCopyFile(srcStat, src, dest, opts);\n}\nfunction mayCopyFile(srcStat, src, dest, opts) {\n  if (opts.overwrite) {\n    fs.unlinkSync(dest);\n    return copyFile(srcStat, src, dest, opts);\n  } else if (opts.errorOnExist) {\n    throw new Error(\"'\" + dest + \"' already exists\");\n  }\n}\nfunction copyFile(srcStat, src, dest, opts) {\n  fs.copyFileSync(src, dest);\n  if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest);\n  return setDestMode(dest, srcStat.mode);\n}\nfunction handleTimestamps(srcMode, src, dest) {\n  if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode);\n  return setDestTimestamps(src, dest);\n}\nfunction fileIsNotWritable(srcMode) {\n  return (srcMode & 128) === 0;\n}\nfunction makeFileWritable(dest, srcMode) {\n  return setDestMode(dest, srcMode | 128);\n}\nfunction setDestMode(dest, srcMode) {\n  return fs.chmodSync(dest, srcMode);\n}\nfunction setDestTimestamps(src, dest) {\n  var updatedSrcStat = fs.statSync(src);\n  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);\n}\nfunction onDir(srcStat, destStat, src, dest, opts) {\n  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts);\n  if (destStat && !destStat.isDirectory()) {\n    throw new Error(\"Cannot overwrite non-directory '\" + dest + \"' with directory '\" + src + \"'.\");\n  }\n  return copyDir(src, dest, opts);\n}\nfunction mkDirAndCopy(srcMode, src, dest, opts) {\n  fs.mkdirSync(dest);\n  copyDir(src, dest, opts);\n  return setDestMode(dest, srcMode);\n}\nfunction copyDir(src, dest, opts) {\n  fs.readdirSync(src).forEach(function (item) {\n    return copyDirItem(item, src, dest, opts);\n  });\n}\nfunction copyDirItem(item, src, dest, opts) {\n  var srcItem = path.join(src, item);\n  var destItem = path.join(dest, item);\n  var _stat$checkPathsSync2 = stat.checkPathsSync(srcItem, destItem, 'copy'),\n    destStat = _stat$checkPathsSync2.destStat;\n  return startCopy(destStat, srcItem, destItem, opts);\n}\nfunction onLink(destStat, src, dest, opts) {\n  var resolvedSrc = fs.readlinkSync(src);\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc);\n  }\n  if (!destStat) {\n    return fs.symlinkSync(resolvedSrc, dest);\n  } else {\n    var resolvedDest;\n    try {\n      resolvedDest = fs.readlinkSync(dest);\n    } catch (err) {\n      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest);\n      throw err;\n    }\n    if (opts.dereference) {\n      resolvedDest = path.resolve(process.cwd(), resolvedDest);\n    }\n    if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n      throw new Error(\"Cannot copy '\" + resolvedSrc + \"' to a subdirectory of itself, '\" + resolvedDest + \"'.\");\n    }\n    if (fs.statSync(dest).isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n      throw new Error(\"Cannot overwrite '\" + resolvedDest + \"' with '\" + resolvedSrc + \"'.\");\n    }\n    return copyLink(resolvedSrc, dest);\n  }\n}\nfunction copyLink(resolvedSrc, dest) {\n  fs.unlinkSync(dest);\n  return fs.symlinkSync(resolvedSrc, dest);\n}\nmodule.exports = copySync;","map":{"version":3,"names":["fs","require","path","mkdirsSync","utimesMillisSync","stat","copySync","src","dest","opts","filter","clobber","overwrite","preserveTimestamps","process","arch","console","warn","_stat$checkPathsSync","checkPathsSync","srcStat","destStat","checkParentPathsSync","handleFilterAndCopy","destParent","dirname","existsSync","startCopy","getStats","statSync","dereference","lstatSync","isDirectory","onDir","isFile","isCharacterDevice","isBlockDevice","onFile","isSymbolicLink","onLink","copyFile","mayCopyFile","unlinkSync","errorOnExist","Error","copyFileSync","handleTimestamps","mode","setDestMode","srcMode","fileIsNotWritable","makeFileWritable","setDestTimestamps","chmodSync","updatedSrcStat","atime","mtime","mkDirAndCopy","copyDir","mkdirSync","readdirSync","forEach","item","copyDirItem","srcItem","join","destItem","_stat$checkPathsSync2","resolvedSrc","readlinkSync","resolve","cwd","symlinkSync","resolvedDest","err","code","isSrcSubdir","copyLink","module","exports"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/expo-pwa/node_modules/fs-extra/lib/copy-sync/copy-sync.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst mkdirsSync = require('../mkdirs').mkdirsSync\nconst utimesMillisSync = require('../util/utimes').utimesMillisSync\nconst stat = require('../util/stat')\n\nfunction copySync (src, dest, opts) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts = opts || {}\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269`)\n  }\n\n  const { srcStat, destStat } = stat.checkPathsSync(src, dest, 'copy')\n  stat.checkParentPathsSync(src, srcStat, dest, 'copy')\n  return handleFilterAndCopy(destStat, src, dest, opts)\n}\n\nfunction handleFilterAndCopy (destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return\n  const destParent = path.dirname(dest)\n  if (!fs.existsSync(destParent)) mkdirsSync(destParent)\n  return startCopy(destStat, src, dest, opts)\n}\n\nfunction startCopy (destStat, src, dest, opts) {\n  if (opts.filter && !opts.filter(src, dest)) return\n  return getStats(destStat, src, dest, opts)\n}\n\nfunction getStats (destStat, src, dest, opts) {\n  const statSync = opts.dereference ? fs.statSync : fs.lstatSync\n  const srcStat = statSync(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isFile() ||\n           srcStat.isCharacterDevice() ||\n           srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n}\n\nfunction onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n  return mayCopyFile(srcStat, src, dest, opts)\n}\n\nfunction mayCopyFile (srcStat, src, dest, opts) {\n  if (opts.overwrite) {\n    fs.unlinkSync(dest)\n    return copyFile(srcStat, src, dest, opts)\n  } else if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nfunction copyFile (srcStat, src, dest, opts) {\n  fs.copyFileSync(src, dest)\n  if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest)\n  return setDestMode(dest, srcStat.mode)\n}\n\nfunction handleTimestamps (srcMode, src, dest) {\n  // Make sure the file is writable before setting the timestamp\n  // otherwise open fails with EPERM when invoked with 'r+'\n  // (through utimes call)\n  if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode)\n  return setDestTimestamps(src, dest)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return setDestMode(dest, srcMode | 0o200)\n}\n\nfunction setDestMode (dest, srcMode) {\n  return fs.chmodSync(dest, srcMode)\n}\n\nfunction setDestTimestamps (src, dest) {\n  // The initial srcStat.atime cannot be trusted\n  // because it is modified by the read(2) system call\n  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n  const updatedSrcStat = fs.statSync(src)\n  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n}\n\nfunction onDir (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts)\n  if (destStat && !destStat.isDirectory()) {\n    throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n  }\n  return copyDir(src, dest, opts)\n}\n\nfunction mkDirAndCopy (srcMode, src, dest, opts) {\n  fs.mkdirSync(dest)\n  copyDir(src, dest, opts)\n  return setDestMode(dest, srcMode)\n}\n\nfunction copyDir (src, dest, opts) {\n  fs.readdirSync(src).forEach(item => copyDirItem(item, src, dest, opts))\n}\n\nfunction copyDirItem (item, src, dest, opts) {\n  const srcItem = path.join(src, item)\n  const destItem = path.join(dest, item)\n  const { destStat } = stat.checkPathsSync(srcItem, destItem, 'copy')\n  return startCopy(destStat, srcItem, destItem, opts)\n}\n\nfunction onLink (destStat, src, dest, opts) {\n  let resolvedSrc = fs.readlinkSync(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n\n  if (!destStat) {\n    return fs.symlinkSync(resolvedSrc, dest)\n  } else {\n    let resolvedDest\n    try {\n      resolvedDest = fs.readlinkSync(dest)\n    } catch (err) {\n      // dest exists and is a regular file or directory,\n      // Windows may throw UNKNOWN error. If dest already exists,\n      // fs throws error anyway, so no need to guard against it here.\n      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest)\n      throw err\n    }\n    if (opts.dereference) {\n      resolvedDest = path.resolve(process.cwd(), resolvedDest)\n    }\n    if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n      throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n    }\n\n    // prevent copy if src is a subdir of dest since unlinking\n    // dest in this case would result in removing src contents\n    // and therefore a broken symlink would be created.\n    if (fs.statSync(dest).isDirectory() && stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n      throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n    }\n    return copyLink(resolvedSrc, dest)\n  }\n}\n\nfunction copyLink (resolvedSrc, dest) {\n  fs.unlinkSync(dest)\n  return fs.symlinkSync(resolvedSrc, dest)\n}\n\nmodule.exports = copySync\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}