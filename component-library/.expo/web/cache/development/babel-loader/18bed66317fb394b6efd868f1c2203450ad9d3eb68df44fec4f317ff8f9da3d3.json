{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"providers\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidModFileProviders = getAndroidModFileProviders;\nexports.sortAndroidManifest = sortAndroidManifest;\nexports.withAndroidBaseMods = withAndroidBaseMods;\nfunction _fs() {\n  var data = require(\"fs\");\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _android() {\n  var data = require(\"../android\");\n  _android = function _android() {\n    return data;\n  };\n  return data;\n}\nfunction _XML() {\n  var data = require(\"../utils/XML\");\n  _XML = function _XML() {\n    return data;\n  };\n  return data;\n}\nfunction _sortObject() {\n  var data = require(\"../utils/sortObject\");\n  _sortObject = function _sortObject() {\n    return data;\n  };\n  return data;\n}\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _fs$promises = _fs().promises,\n  readFile = _fs$promises.readFile,\n  writeFile = _fs$promises.writeFile;\nfunction getAndroidManifestTemplate(config) {\n  var _config$android$packa, _config$android;\n  return (0, _XML().parseXMLAsync)(\"\\n  <manifest xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\" package=\\\"\" + ((_config$android$packa = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.package) !== null && _config$android$packa !== void 0 ? _config$android$packa : 'com.placeholder.appid') + \"\\\">\\n\\n    <uses-permission android:name=\\\"android.permission.INTERNET\\\"/>\\n    <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\\n    <uses-permission android:name=\\\"android.permission.SYSTEM_ALERT_WINDOW\\\"/>\\n    <!-- These require runtime permissions on M -->\\n    <uses-permission android:name=\\\"android.permission.READ_EXTERNAL_STORAGE\\\"/>\\n    <uses-permission android:name=\\\"android.permission.WRITE_EXTERNAL_STORAGE\\\"/>\\n    <!-- END OPTIONAL PERMISSIONS -->\\n\\n    <queries>\\n      <!-- Support checking for http(s) links via the Linking API -->\\n      <intent>\\n        <action android:name=\\\"android.intent.action.VIEW\\\" />\\n        <category android:name=\\\"android.intent.category.BROWSABLE\\\" />\\n        <data android:scheme=\\\"https\\\" />\\n      </intent>\\n    </queries>\\n\\n    <application\\n      android:name=\\\".MainApplication\\\"\\n      android:label=\\\"@string/app_name\\\"\\n      android:icon=\\\"@mipmap/ic_launcher\\\"\\n      android:roundIcon=\\\"@mipmap/ic_launcher_round\\\"\\n      android:allowBackup=\\\"false\\\"\\n      android:theme=\\\"@style/AppTheme\\\"\\n      android:usesCleartextTraffic=\\\"true\\\"\\n    >\\n      <meta-data android:name=\\\"expo.modules.updates.EXPO_UPDATE_URL\\\" android:value=\\\"YOUR-APP-URL-HERE\\\"/>\\n      <meta-data android:name=\\\"expo.modules.updates.EXPO_SDK_VERSION\\\" android:value=\\\"YOUR-APP-SDK-VERSION-HERE\\\"/>\\n      <activity\\n        android:name=\\\".MainActivity\\\"\\n        android:label=\\\"@string/app_name\\\"\\n        android:configChanges=\\\"keyboard|keyboardHidden|orientation|screenSize|uiMode\\\"\\n        android:launchMode=\\\"singleTask\\\"\\n        android:windowSoftInputMode=\\\"adjustResize\\\"\\n        android:theme=\\\"@style/Theme.App.SplashScreen\\\"\\n      >\\n        <intent-filter>\\n          <action android:name=\\\"android.intent.action.MAIN\\\"/>\\n          <category android:name=\\\"android.intent.category.LAUNCHER\\\"/>\\n        </intent-filter>\\n      </activity>\\n      <activity android:name=\\\"com.facebook.react.devsupport.DevSettingsActivity\\\"/>\\n    </application>\\n  </manifest>\\n  \");\n}\nfunction sortAndroidManifest(obj) {\n  if (obj.manifest) {\n    obj.manifest = (0, _sortObject().sortObject)(obj.manifest, _sortObject().reverseSortString);\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      obj.manifest['uses-permission'].sort(function (a, b) {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n    if (Array.isArray(obj.manifest.application)) {\n      obj.manifest.application = obj.manifest.application.map(function (application) {\n        application = (0, _sortObject().sortObjWithOrder)(application, ['meta-data', 'service', 'activity']);\n        if (Array.isArray(application['meta-data'])) {\n          application['meta-data'].sort(function (a, b) {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n        return application;\n      });\n    }\n  }\n  return obj;\n}\nvar defaultProviders = {\n  dangerous: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath() {\n      return '';\n    },\n    read: function () {\n      var _read = _asyncToGenerator(function* () {\n        return {\n          filePath: '',\n          modResults: {}\n        };\n      });\n      function read() {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write = _asyncToGenerator(function* () {});\n      function write() {\n        return _write.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  manifest: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref) {\n      var platformProjectRoot = _ref.modRequest.platformProjectRoot;\n      return _path().default.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    read: function () {\n      var _read2 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Manifest.readAndroidManifestAsync(filePath);\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return yield getAndroidManifestTemplate(config);\n      });\n      function read(_x, _x2) {\n        return _read2.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write2 = _asyncToGenerator(function* (filePath, _ref2) {\n        var modResults = _ref2.modResults,\n          introspect = _ref2.modRequest.introspect;\n        if (introspect) return;\n        yield _android().Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults));\n      });\n      function write(_x3, _x4) {\n        return _write2.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  gradleProperties: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref3) {\n      var platformProjectRoot = _ref3.modRequest.platformProjectRoot;\n      return _path().default.join(platformProjectRoot, 'gradle.properties');\n    },\n    read: function () {\n      var _read3 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Properties.parsePropertiesFile(yield readFile(filePath, 'utf8'));\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return [];\n      });\n      function read(_x5, _x6) {\n        return _read3.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write3 = _asyncToGenerator(function* (filePath, _ref4) {\n        var modResults = _ref4.modResults,\n          introspect = _ref4.modRequest.introspect;\n        if (introspect) return;\n        yield writeFile(filePath, _android().Properties.propertiesListToString(modResults));\n      });\n      function write(_x7, _x8) {\n        return _write3.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  strings: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath = _asyncToGenerator(function* (_ref5) {\n        var _ref5$modRequest = _ref5.modRequest,\n          projectRoot = _ref5$modRequest.projectRoot,\n          introspect = _ref5$modRequest.introspect;\n        try {\n          return yield _android().Strings.getProjectStringsXMLPathAsync(projectRoot);\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x9) {\n        return _getFilePath.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read4 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Resources.readResourcesXMLAsync({\n            path: filePath\n          });\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return {\n          resources: {}\n        };\n      });\n      function read(_x10, _x11) {\n        return _read4.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write4 = _asyncToGenerator(function* (filePath, _ref6) {\n        var modResults = _ref6.modResults,\n          introspect = _ref6.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x12, _x13) {\n        return _write4.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  colors: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath2 = _asyncToGenerator(function* (_ref7) {\n        var _ref7$modRequest = _ref7.modRequest,\n          projectRoot = _ref7$modRequest.projectRoot,\n          introspect = _ref7$modRequest.introspect;\n        try {\n          return yield _android().Colors.getProjectColorsXMLPathAsync(projectRoot);\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x14) {\n        return _getFilePath2.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read5 = _asyncToGenerator(function* (filePath, _ref8) {\n        var introspect = _ref8.modRequest.introspect;\n        try {\n          return yield _android().Resources.readResourcesXMLAsync({\n            path: filePath\n          });\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return {\n          resources: {}\n        };\n      });\n      function read(_x15, _x16) {\n        return _read5.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write5 = _asyncToGenerator(function* (filePath, _ref9) {\n        var modResults = _ref9.modResults,\n          introspect = _ref9.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x17, _x18) {\n        return _write5.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  colorsNight: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath3 = _asyncToGenerator(function* (_ref10) {\n        var _ref10$modRequest = _ref10.modRequest,\n          projectRoot = _ref10$modRequest.projectRoot,\n          introspect = _ref10$modRequest.introspect;\n        try {\n          return yield _android().Colors.getProjectColorsXMLPathAsync(projectRoot, {\n            kind: 'values-night'\n          });\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x19) {\n        return _getFilePath3.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read6 = _asyncToGenerator(function* (filePath, config) {\n        try {\n          return yield _android().Resources.readResourcesXMLAsync({\n            path: filePath\n          });\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        return {\n          resources: {}\n        };\n      });\n      function read(_x20, _x21) {\n        return _read6.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write6 = _asyncToGenerator(function* (filePath, _ref11) {\n        var modResults = _ref11.modResults,\n          introspect = _ref11.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x22, _x23) {\n        return _write6.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  styles: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath4 = _asyncToGenerator(function* (_ref12) {\n        var _ref12$modRequest = _ref12.modRequest,\n          projectRoot = _ref12$modRequest.projectRoot,\n          introspect = _ref12$modRequest.introspect;\n        try {\n          return yield _android().Styles.getProjectStylesXMLPathAsync(projectRoot);\n        } catch (error) {\n          if (!introspect) {\n            throw error;\n          }\n        }\n        return '';\n      });\n      function getFilePath(_x24) {\n        return _getFilePath4.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read7 = _asyncToGenerator(function* (filePath, config) {\n        var _styles$resources$$;\n        var styles = {\n          resources: {}\n        };\n        try {\n          styles = yield _android().Resources.readResourcesXMLAsync({\n            path: filePath,\n            fallback: \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><resources xmlns:tools=\\\"http://schemas.android.com/tools\\\"></resources>\"\n          });\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n        }\n        if (!styles.resources.$) {\n          styles.resources.$ = {};\n        }\n        if (!((_styles$resources$$ = styles.resources.$) !== null && _styles$resources$$ !== void 0 && _styles$resources$$['xmlns:tools'])) {\n          styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n        }\n        return styles;\n      });\n      function read(_x25, _x26) {\n        return _read7.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write7 = _asyncToGenerator(function* (filePath, _ref13) {\n        var modResults = _ref13.modResults,\n          introspect = _ref13.modRequest.introspect;\n        if (introspect) return;\n        yield (0, _XML().writeXMLAsync)({\n          path: filePath,\n          xml: modResults\n        });\n      });\n      function write(_x27, _x28) {\n        return _write7.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  projectBuildGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref14) {\n      var projectRoot = _ref14.modRequest.projectRoot;\n      return _android().Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    read: function () {\n      var _read8 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x29) {\n        return _read8.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write8 = _asyncToGenerator(function* (filePath, _ref15) {\n        var contents = _ref15.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x30, _x31) {\n        return _write8.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  settingsGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref16) {\n      var projectRoot = _ref16.modRequest.projectRoot;\n      return _android().Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    read: function () {\n      var _read9 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x32) {\n        return _read9.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write9 = _asyncToGenerator(function* (filePath, _ref17) {\n        var contents = _ref17.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x33, _x34) {\n        return _write9.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  appBuildGradle: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref18) {\n      var projectRoot = _ref18.modRequest.projectRoot;\n      return _android().Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    read: function () {\n      var _read10 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x35) {\n        return _read10.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write10 = _asyncToGenerator(function* (filePath, _ref19) {\n        var contents = _ref19.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x36, _x37) {\n        return _write10.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  mainActivity: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref20) {\n      var projectRoot = _ref20.modRequest.projectRoot;\n      return _android().Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    read: function () {\n      var _read11 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x38) {\n        return _read11.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write11 = _asyncToGenerator(function* (filePath, _ref21) {\n        var contents = _ref21.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x39, _x40) {\n        return _write11.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  mainApplication: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref22) {\n      var projectRoot = _ref22.modRequest.projectRoot;\n      return _android().Paths.getProjectFilePath(projectRoot, 'MainApplication');\n    },\n    read: function () {\n      var _read12 = _asyncToGenerator(function* (filePath) {\n        return _android().Paths.getFileInfo(filePath);\n      });\n      function read(_x41) {\n        return _read12.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write12 = _asyncToGenerator(function* (filePath, _ref23) {\n        var contents = _ref23.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x42, _x43) {\n        return _write12.apply(this, arguments);\n      }\n      return write;\n    }()\n  })\n};\nfunction withAndroidBaseMods(config) {\n  var _ref24 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var providers = _ref24.providers,\n    props = _objectWithoutProperties(_ref24, _excluded);\n  return (0, _createBaseMod().withGeneratedBaseMods)(config, _objectSpread(_objectSpread({}, props), {}, {\n    platform: 'android',\n    providers: providers !== null && providers !== void 0 ? providers : getAndroidModFileProviders()\n  }));\n}\nfunction getAndroidModFileProviders() {\n  return defaultProviders;\n}","map":{"version":3,"names":["_fs","data","require","_path","_interopRequireDefault","_android","_XML","_sortObject","_createBaseMod","_fs$promises","promises","readFile","writeFile","getAndroidManifestTemplate","config","_config$android$packa","_config$android","parseXMLAsync","android","package","sortAndroidManifest","obj","manifest","sortObject","reverseSortString","Array","isArray","sort","a","b","$","application","map","sortObjWithOrder","defaultProviders","dangerous","provider","getFilePath","read","_read","_asyncToGenerator","filePath","modResults","apply","arguments","write","_write","isIntrospective","_ref","platformProjectRoot","modRequest","default","join","_read2","Manifest","readAndroidManifestAsync","error","introspect","_x","_x2","_write2","_ref2","writeAndroidManifestAsync","_x3","_x4","gradleProperties","_ref3","_read3","Properties","parsePropertiesFile","_x5","_x6","_write3","_ref4","propertiesListToString","_x7","_x8","strings","_getFilePath","_ref5","_ref5$modRequest","projectRoot","Strings","getProjectStringsXMLPathAsync","_x9","_read4","Resources","readResourcesXMLAsync","path","resources","_x10","_x11","_write4","_ref6","writeXMLAsync","xml","_x12","_x13","colors","_getFilePath2","_ref7","_ref7$modRequest","Colors","getProjectColorsXMLPathAsync","_x14","_read5","_ref8","_x15","_x16","_write5","_ref9","_x17","_x18","colorsNight","_getFilePath3","_ref10","_ref10$modRequest","kind","_x19","_read6","_x20","_x21","_write6","_ref11","_x22","_x23","styles","_getFilePath4","_ref12","_ref12$modRequest","Styles","getProjectStylesXMLPathAsync","_x24","_read7","_styles$resources$$","fallback","_x25","_x26","_write7","_ref13","_x27","_x28","projectBuildGradle","_ref14","Paths","getProjectBuildGradleFilePath","_read8","getFileInfo","_x29","_write8","_ref15","contents","_x30","_x31","settingsGradle","_ref16","getSettingsGradleFilePath","_read9","_x32","_write9","_ref17","_x33","_x34","appBuildGradle","_ref18","getAppBuildGradleFilePath","_read10","_x35","_write10","_ref19","_x36","_x37","mainActivity","_ref20","getProjectFilePath","_read11","_x38","_write11","_ref21","_x39","_x40","mainApplication","_ref22","_read12","_x41","_write12","_ref23","_x42","_x43","withAndroidBaseMods","_ref24","length","undefined","providers","props","_objectWithoutProperties","_excluded","withGeneratedBaseMods","_objectSpread","platform","getAndroidModFileProviders"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/plugins/withAndroidBaseMods.ts"],"sourcesContent":["import { promises } from 'fs';\nimport path from 'path';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Colors, Manifest, Paths, Properties, Resources, Strings, Styles } from '../android';\nimport { AndroidManifest } from '../android/Manifest';\nimport { parseXMLAsync, writeXMLAsync } from '../utils/XML';\nimport { reverseSortString, sortObject, sortObjWithOrder } from '../utils/sortObject';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype AndroidModName = keyof Required<ModConfig>['android'];\n\nfunction getAndroidManifestTemplate(config: ExportedConfig) {\n  // Keep in sync with https://github.com/expo/expo/blob/master/templates/expo-template-bare-minimum/android/app/src/main/AndroidManifest.xml\n  // TODO: Read from remote template when possible\n  return parseXMLAsync(`\n  <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" package=\"${\n    config.android?.package ?? 'com.placeholder.appid'\n  }\">\n\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <!-- OPTIONAL PERMISSIONS, REMOVE WHATEVER YOU DO NOT NEED -->\n    <uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"/>\n    <!-- These require runtime permissions on M -->\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <!-- END OPTIONAL PERMISSIONS -->\n\n    <queries>\n      <!-- Support checking for http(s) links via the Linking API -->\n      <intent>\n        <action android:name=\"android.intent.action.VIEW\" />\n        <category android:name=\"android.intent.category.BROWSABLE\" />\n        <data android:scheme=\"https\" />\n      </intent>\n    </queries>\n\n    <application\n      android:name=\".MainApplication\"\n      android:label=\"@string/app_name\"\n      android:icon=\"@mipmap/ic_launcher\"\n      android:roundIcon=\"@mipmap/ic_launcher_round\"\n      android:allowBackup=\"false\"\n      android:theme=\"@style/AppTheme\"\n      android:usesCleartextTraffic=\"true\"\n    >\n      <meta-data android:name=\"expo.modules.updates.EXPO_UPDATE_URL\" android:value=\"YOUR-APP-URL-HERE\"/>\n      <meta-data android:name=\"expo.modules.updates.EXPO_SDK_VERSION\" android:value=\"YOUR-APP-SDK-VERSION-HERE\"/>\n      <activity\n        android:name=\".MainActivity\"\n        android:label=\"@string/app_name\"\n        android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|uiMode\"\n        android:launchMode=\"singleTask\"\n        android:windowSoftInputMode=\"adjustResize\"\n        android:theme=\"@style/Theme.App.SplashScreen\"\n      >\n        <intent-filter>\n          <action android:name=\"android.intent.action.MAIN\"/>\n          <category android:name=\"android.intent.category.LAUNCHER\"/>\n        </intent-filter>\n      </activity>\n      <activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\"/>\n    </application>\n  </manifest>\n  `) as Promise<AndroidManifest>;\n}\n\nexport function sortAndroidManifest(obj: AndroidManifest) {\n  if (obj.manifest) {\n    // Reverse sort so application is last and permissions are first\n    obj.manifest = sortObject(obj.manifest, reverseSortString);\n\n    if (Array.isArray(obj.manifest['uses-permission'])) {\n      // Sort permissions alphabetically\n      obj.manifest['uses-permission'].sort((a, b) => {\n        if (a.$['android:name'] < b.$['android:name']) return -1;\n        if (a.$['android:name'] > b.$['android:name']) return 1;\n        return 0;\n      });\n    }\n\n    if (Array.isArray(obj.manifest.application)) {\n      // reverse sort applications so activity is towards the end and meta-data is towards the front.\n      obj.manifest.application = obj.manifest.application.map(application => {\n        application = sortObjWithOrder(application, ['meta-data', 'service', 'activity']);\n\n        if (Array.isArray(application['meta-data'])) {\n          // Sort metadata alphabetically\n          application['meta-data'].sort((a, b) => {\n            if (a.$['android:name'] < b.$['android:name']) return -1;\n            if (a.$['android:name'] > b.$['android:name']) return 1;\n            return 0;\n          });\n        }\n        return application;\n      });\n    }\n  }\n  return obj;\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return { filePath: '', modResults: {} };\n    },\n    async write() {},\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  manifest: provider<Manifest.AndroidManifest>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'app/src/main/AndroidManifest.xml');\n    },\n    async read(filePath, config) {\n      try {\n        return await Manifest.readAndroidManifestAsync(filePath);\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return await getAndroidManifestTemplate(config);\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await Manifest.writeAndroidManifestAsync(filePath, sortAndroidManifest(modResults));\n    },\n  }),\n\n  // Append a rule to supply gradle.properties data to mods on `mods.android.gradleProperties`\n  gradleProperties: provider<Properties.PropertiesItem[]>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.join(platformProjectRoot, 'gradle.properties');\n    },\n    async read(filePath, config) {\n      try {\n        return await Properties.parsePropertiesFile(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return [];\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeFile(filePath, Properties.propertiesListToString(modResults));\n    },\n  }),\n\n  // Append a rule to supply strings.xml data to mods on `mods.android.strings`\n  strings: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Strings.getProjectStringsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colors: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  colorsNight: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Colors.getProjectColorsXMLPathAsync(projectRoot, { kind: 'values-night' });\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      try {\n        return await Resources.readResourcesXMLAsync({ path: filePath });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n      return { resources: {} };\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  styles: provider<Resources.ResourceXML>({\n    isIntrospective: true,\n\n    async getFilePath({ modRequest: { projectRoot, introspect } }) {\n      try {\n        return await Styles.getProjectStylesXMLPathAsync(projectRoot);\n      } catch (error: any) {\n        if (!introspect) {\n          throw error;\n        }\n      }\n      return '';\n    },\n    async read(filePath, config) {\n      let styles: Resources.ResourceXML = { resources: {} };\n\n      try {\n        // Adds support for `tools:x`\n        styles = await Resources.readResourcesXMLAsync({\n          path: filePath,\n          fallback: `<?xml version=\"1.0\" encoding=\"utf-8\"?><resources xmlns:tools=\"http://schemas.android.com/tools\"></resources>`,\n        });\n      } catch (error: any) {\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n      }\n\n      // Ensure support for tools is added...\n      if (!styles.resources.$) {\n        styles.resources.$ = {};\n      }\n      if (!styles.resources.$?.['xmlns:tools']) {\n        styles.resources.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n      }\n      return styles;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) return;\n      await writeXMLAsync({ path: filePath, xml: modResults });\n    },\n  }),\n\n  projectBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  settingsGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getSettingsGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  appBuildGradle: provider<Paths.GradleProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppBuildGradleFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainActivity: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainActivity');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n\n  mainApplication: provider<Paths.ApplicationProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getProjectFilePath(projectRoot, 'MainApplication');\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n};\n\ntype AndroidDefaultProviders = typeof defaultProviders;\n\nexport function withAndroidBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<AndroidDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<AndroidModName>(config, {\n    ...props,\n    platform: 'android',\n    providers: providers ?? getAndroidModFileProviders(),\n  });\n}\n\nexport function getAndroidModFileProviders() {\n  return defaultProviders;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}