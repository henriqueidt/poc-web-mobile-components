{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuildSourceFile = createBuildSourceFile;\nexports.withBuildSourceFile = void 0;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withBuildSourceFile = function withBuildSourceFile(config, _ref) {\n  var filePath = _ref.filePath,\n    contents = _ref.contents,\n    overwrite = _ref.overwrite;\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    var projectName = (0, _Xcodeproj().getProjectName)(config.modRequest.projectRoot);\n    config.modResults = createBuildSourceFile({\n      project: config.modResults,\n      nativeProjectRoot: config.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: _path().default.join(projectName, filePath),\n      overwrite: overwrite\n    });\n    return config;\n  });\n};\nexports.withBuildSourceFile = withBuildSourceFile;\nfunction createBuildSourceFile(_ref2) {\n  var project = _ref2.project,\n    nativeProjectRoot = _ref2.nativeProjectRoot,\n    filePath = _ref2.filePath,\n    fileContents = _ref2.fileContents,\n    overwrite = _ref2.overwrite;\n  var absoluteFilePath = _path().default.join(nativeProjectRoot, filePath);\n  if (overwrite || !_fs().default.existsSync(absoluteFilePath)) {\n    _fs().default.writeFileSync(absoluteFilePath, fileContents, 'utf8');\n  }\n  var groupName = _path().default.dirname(filePath);\n  if (!project.hasFile(filePath)) {\n    project = (0, _Xcodeproj().addBuildSourceFileToGroup)({\n      filepath: filePath,\n      groupName: groupName,\n      project: project\n    });\n  }\n  return project;\n}","map":{"version":3,"names":["_fs","data","_interopRequireDefault","require","_path","_iosPlugins","_Xcodeproj","withBuildSourceFile","config","_ref","filePath","contents","overwrite","withXcodeProject","projectName","getProjectName","modRequest","projectRoot","modResults","createBuildSourceFile","project","nativeProjectRoot","platformProjectRoot","fileContents","default","join","_ref2","absoluteFilePath","existsSync","writeFileSync","groupName","dirname","hasFile","addBuildSourceFileToGroup","filepath"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/ios/XcodeProjectFile.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addBuildSourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\n/**\n * Create a build source file and link it to Xcode.\n *\n * @param config\n * @param props.filePath relative to the build source folder. ex: `ViewController.swift` would be created in `ios/myapp/ViewController.swift`.\n * @param props.contents file contents to write.\n * @param props.overwrite should the contents overwrite any existing file in the same location on disk.\n * @returns\n */\nexport const withBuildSourceFile: ConfigPlugin<{\n  filePath: string;\n  contents: string;\n  overwrite?: boolean;\n}> = (config, { filePath, contents, overwrite }) => {\n  return withXcodeProject(config, config => {\n    const projectName = getProjectName(config.modRequest.projectRoot);\n\n    config.modResults = createBuildSourceFile({\n      project: config.modResults,\n      nativeProjectRoot: config.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: path.join(projectName, filePath),\n      overwrite,\n    });\n    return config;\n  });\n};\n\n/**\n * Add a source file to the Xcode project and write it to the file system.\n *\n * @param nativeProjectRoot absolute path to the native app root `user/app/ios`\n * @param filePath path relative to the `nativeProjectRoot` for the file to create `user/app/ios/myapp/foobar.swift`\n * @param fileContents string file contents to write to the `filePath`\n * @param overwrite should write file even if one already exists\n */\nexport function createBuildSourceFile({\n  project,\n  nativeProjectRoot,\n  filePath,\n  fileContents,\n  overwrite,\n}: {\n  project: XcodeProject;\n  nativeProjectRoot: string;\n  filePath: string;\n  fileContents: string;\n  overwrite?: boolean;\n}): XcodeProject {\n  const absoluteFilePath = path.join(nativeProjectRoot, filePath);\n  if (overwrite || !fs.existsSync(absoluteFilePath)) {\n    // Create the file\n    fs.writeFileSync(absoluteFilePath, fileContents, 'utf8');\n  }\n\n  // `myapp`\n  const groupName = path.dirname(filePath);\n\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addBuildSourceFileToGroup({\n      filepath: filePath,\n      groupName,\n      project,\n    });\n  }\n  return project;\n}\n"],"mappings":";;;;;;;AAAA,SAAAA,IAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,GAAA,YAAAA,IAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,MAAA;EAAA,IAAAH,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAC,KAAA,YAAAA,MAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGA,SAAAI,YAAA;EAAA,IAAAJ,IAAA,GAAAE,OAAA;EAAAE,WAAA,YAAAA,YAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,WAAA;EAAA,IAAAL,IAAA,GAAAE,OAAA;EAAAG,UAAA,YAAAA,WAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;;;;;;AAWO,IAAMM,mBAIX,GAAG,SAJQA,mBAIXA,CAAIC,MAAD,EAAAC,IAAA,EAA+C;EAAA,IAApCC,QAAF,GAAAD,IAAA,CAAEC,QAAF;IAAYC,QAAZ,GAAAF,IAAA,CAAYE,QAAZ;IAAsBC,SAAA,GAAAH,IAAA,CAAAG,SAAA;EAClC,OAAO,IAAAP,WAAA,GAAAQ,gBAAA,EAAiBL,MAAjB,EAAyB,UAAAA,MAAM,EAAI;IACxC,IAAMM,WAAW,GAAG,IAAAR,UAAA,GAAAS,cAAA,EAAeP,MAAM,CAACQ,UAAP,CAAkBC,WAAjC,CAApB;IAEAT,MAAM,CAACU,UAAP,GAAoBC,qBAAqB,CAAC;MACxCC,OAAO,EAAEZ,MAAM,CAACU,UADwB;MAExCG,iBAAiB,EAAEb,MAAM,CAACQ,UAAP,CAAkBM,mBAFG;MAGxCC,YAAY,EAAEZ,QAH0B;MAIxCD,QAAQ,EAAEN,KAAA,GAAAoB,OAAA,CAAKC,IAAL,CAAUX,WAAV,EAAuBJ,QAAvB,CAJ8B;MAKxCE,SAAA,EAAAA;IALwC,CAAD,CAAzC;IAOA,OAAOJ,MAAP;EACD,CAXM,CAAP;AAYD,CAjBM;;AA2BA,SAASW,qBAATA,CAAAO,KAAA,EAYU;EAAA,IAXfN,OADoC,GAAAM,KAAA,CACpCN,OADoC;IAEpCC,iBAFoC,GAAAK,KAAA,CAEpCL,iBAFoC;IAGpCX,QAHoC,GAAAgB,KAAA,CAGpChB,QAHoC;IAIpCa,YAJoC,GAAAG,KAAA,CAIpCH,YAJoC;IAKpCX,SAAA,GAAAc,KAAA,CAAAd,SAAA;EAQA,IAAMe,gBAAgB,GAAGvB,KAAA,GAAAoB,OAAA,CAAKC,IAAL,CAAUJ,iBAAV,EAA6BX,QAA7B,CAAzB;EACA,IAAIE,SAAS,IAAI,CAACZ,GAAA,GAAAwB,OAAA,CAAGI,UAAH,CAAcD,gBAAd,CAAlB,EAAmD;IAEjD3B,GAAA,GAAAwB,OAAA,CAAGK,aAAH,CAAiBF,gBAAjB,EAAmCJ,YAAnC,EAAiD,MAAjD;EACD;EAGD,IAAMO,SAAS,GAAG1B,KAAA,GAAAoB,OAAA,CAAKO,OAAL,CAAarB,QAAb,CAAlB;EAGA,IAAI,CAACU,OAAO,CAACY,OAAR,CAAgBtB,QAAhB,CAAL,EAAgC;IAC9BU,OAAO,GAAG,IAAAd,UAAA,GAAA2B,yBAAA,EAA0B;MAClCC,QAAQ,EAAExB,QADwB;MAElCoB,SAFkC,EAElCA,SAFkC;MAGlCV,OAAA,EAAAA;IAHkC,CAA1B,CAAV;EAKD;EACD,OAAOA,OAAP;AACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}