{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBridgingHeaderFile = createBridgingHeaderFile;\nexports.ensureSwiftBridgingHeaderSetup = ensureSwiftBridgingHeaderSetup;\nexports.getDesignatedSwiftBridgingHeaderFileReference = getDesignatedSwiftBridgingHeaderFileReference;\nexports.linkBridgingHeaderFile = linkBridgingHeaderFile;\nexports.withSwiftBridgingHeader = exports.withNoopSwiftFile = void 0;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _XcodeProjectFile() {\n  var data = require(\"./XcodeProjectFile\");\n  _XcodeProjectFile = function _XcodeProjectFile() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar templateBridgingHeader = \"//\\n//  Use this file to import your target's public headers that you would like to expose to Swift.\\n//\\n\";\nvar withSwiftBridgingHeader = function withSwiftBridgingHeader(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    config.modResults = ensureSwiftBridgingHeaderSetup({\n      project: config.modResults,\n      projectRoot: config.modRequest.projectRoot\n    });\n    return config;\n  });\n};\nexports.withSwiftBridgingHeader = withSwiftBridgingHeader;\nfunction ensureSwiftBridgingHeaderSetup(_ref) {\n  var projectRoot = _ref.projectRoot,\n    project = _ref.project;\n  if (shouldCreateSwiftBridgingHeader({\n    projectRoot: projectRoot,\n    project: project\n  })) {\n    var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n    var bridgingHeader = createBridgingHeaderFileName(projectName);\n    project = createBridgingHeaderFile({\n      project: project,\n      projectName: projectName,\n      projectRoot: projectRoot,\n      bridgingHeader: bridgingHeader\n    });\n    project = linkBridgingHeaderFile({\n      project: project,\n      bridgingHeader: _path().default.join(projectName, bridgingHeader)\n    });\n  }\n  return project;\n}\nfunction shouldCreateSwiftBridgingHeader(_ref2) {\n  var projectRoot = _ref2.projectRoot,\n    project = _ref2.project;\n  var isObjc = (0, _Paths().getAppDelegate)(projectRoot).language === 'objc';\n  return isObjc && !getDesignatedSwiftBridgingHeaderFileReference({\n    project: project\n  });\n}\nfunction createBridgingHeaderFileName(projectName) {\n  return projectName + \"-Bridging-Header.h\";\n}\nfunction getDesignatedSwiftBridgingHeaderFileReference(_ref3) {\n  var project = _ref3.project;\n  var configurations = project.pbxXCBuildConfigurationSection();\n  for (var _ref4 of Object.values(configurations || {})) {\n    var buildSettings = _ref4.buildSettings;\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      if (typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER === 'string' && buildSettings.SWIFT_OBJC_BRIDGING_HEADER) {\n        return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;\n      }\n    }\n  }\n  return null;\n}\nfunction linkBridgingHeaderFile(_ref5) {\n  var project = _ref5.project,\n    bridgingHeader = _ref5.bridgingHeader;\n  var configurations = project.pbxXCBuildConfigurationSection();\n  for (var _ref6 of Object.values(configurations || {})) {\n    var buildSettings = _ref6.buildSettings;\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      buildSettings.SWIFT_OBJC_BRIDGING_HEADER = bridgingHeader;\n    }\n  }\n  return project;\n}\nfunction createBridgingHeaderFile(_ref7) {\n  var projectRoot = _ref7.projectRoot,\n    projectName = _ref7.projectName,\n    project = _ref7.project,\n    bridgingHeader = _ref7.bridgingHeader;\n  var bridgingHeaderProjectPath = _path().default.join((0, _Paths().getSourceRoot)(projectRoot), bridgingHeader);\n  if (!_fs().default.existsSync(bridgingHeaderProjectPath)) {\n    _fs().default.writeFileSync(bridgingHeaderProjectPath, templateBridgingHeader, 'utf8');\n  }\n  var filePath = projectName + \"/\" + bridgingHeader;\n  if (!project.hasFile(filePath)) {\n    project = (0, _Xcodeproj().addResourceFileToGroup)({\n      filepath: filePath,\n      groupName: projectName,\n      project: project,\n      isBuildFile: false,\n      verbose: false\n    });\n  }\n  return project;\n}\nvar withNoopSwiftFile = function withNoopSwiftFile(config) {\n  return (0, _XcodeProjectFile().withBuildSourceFile)(config, {\n    filePath: 'noop-file.swift',\n    contents: ['//', '// @generated', '// A blank Swift file must be created for native modules with Swift files to work correctly.', '//', ''].join('\\n')\n  });\n};\nexports.withNoopSwiftFile = withNoopSwiftFile;","map":{"version":3,"names":["_fs","data","_interopRequireDefault","require","_path","_iosPlugins","_Paths","_XcodeProjectFile","_Xcodeproj","templateBridgingHeader","withSwiftBridgingHeader","config","withXcodeProject","modResults","ensureSwiftBridgingHeaderSetup","project","projectRoot","modRequest","_ref","shouldCreateSwiftBridgingHeader","projectName","getProjectName","bridgingHeader","createBridgingHeaderFileName","createBridgingHeaderFile","linkBridgingHeaderFile","default","join","_ref2","isObjc","getAppDelegate","language","getDesignatedSwiftBridgingHeaderFileReference","_ref3","configurations","pbxXCBuildConfigurationSection","_ref4","Object","values","buildSettings","PRODUCT_NAME","SWIFT_OBJC_BRIDGING_HEADER","_ref5","_ref6","_ref7","bridgingHeaderProjectPath","getSourceRoot","existsSync","writeFileSync","filePath","hasFile","addResourceFileToGroup","filepath","groupName","isBuildFile","verbose","withNoopSwiftFile","withBuildSourceFile","contents"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/ios/Swift.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { getAppDelegate, getSourceRoot } from './Paths';\nimport { withBuildSourceFile } from './XcodeProjectFile';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nconst templateBridgingHeader = `//\n//  Use this file to import your target's public headers that you would like to expose to Swift.\n//\n`;\n\n/**\n * Ensure a Swift bridging header is created for the project.\n * This helps fix problems related to using modules that are written in Swift (lottie, FBSDK).\n *\n * 1. Ensures the file exists given the project path.\n * 2. Writes the file and links to Xcode as a resource file.\n * 3. Sets the build configuration `SWIFT_OBJC_BRIDGING_HEADER = [PROJECT_NAME]-Bridging-Header.h`\n */\nexport const withSwiftBridgingHeader: ConfigPlugin = config => {\n  return withXcodeProject(config, config => {\n    config.modResults = ensureSwiftBridgingHeaderSetup({\n      project: config.modResults,\n      projectRoot: config.modRequest.projectRoot,\n    });\n    return config;\n  });\n};\n\nexport function ensureSwiftBridgingHeaderSetup({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}) {\n  // Only create a bridging header if using objective-c\n  if (shouldCreateSwiftBridgingHeader({ projectRoot, project })) {\n    const projectName = getProjectName(projectRoot);\n    const bridgingHeader = createBridgingHeaderFileName(projectName);\n    // Ensure a bridging header is created in the Xcode project.\n    project = createBridgingHeaderFile({\n      project,\n      projectName,\n      projectRoot,\n      bridgingHeader,\n    });\n    // Designate the newly created file as the Swift bridging header in the Xcode project.\n    project = linkBridgingHeaderFile({\n      project,\n      bridgingHeader: path.join(projectName, bridgingHeader),\n    });\n  }\n  return project;\n}\n\nfunction shouldCreateSwiftBridgingHeader({\n  projectRoot,\n  project,\n}: {\n  projectRoot: string;\n  project: XcodeProject;\n}): boolean {\n  // Only create a bridging header if the project is using in Objective C (AppDelegate is written in Objc).\n  const isObjc = getAppDelegate(projectRoot).language === 'objc';\n  return isObjc && !getDesignatedSwiftBridgingHeaderFileReference({ project });\n}\n\n/**\n * @returns String matching the default name used when Xcode automatically creates a bridging header file.\n */\nfunction createBridgingHeaderFileName(projectName: string): string {\n  return `${projectName}-Bridging-Header.h`;\n}\n\nexport function getDesignatedSwiftBridgingHeaderFileReference({\n  project,\n}: {\n  project: XcodeProject;\n}): string | null {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      if (\n        typeof buildSettings.SWIFT_OBJC_BRIDGING_HEADER === 'string' &&\n        buildSettings.SWIFT_OBJC_BRIDGING_HEADER\n      ) {\n        return buildSettings.SWIFT_OBJC_BRIDGING_HEADER;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n *\n * @param bridgingHeader The bridging header filename ex: `ExpoAPIs-Bridging-Header.h`\n * @returns\n */\nexport function linkBridgingHeaderFile({\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  bridgingHeader: string;\n}): XcodeProject {\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.SWIFT_OBJC_BRIDGING_HEADER = bridgingHeader;\n    }\n  }\n\n  return project;\n}\n\nexport function createBridgingHeaderFile({\n  projectRoot,\n  projectName,\n  project,\n  bridgingHeader,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  projectRoot: string;\n  bridgingHeader: string;\n}): XcodeProject {\n  const bridgingHeaderProjectPath = path.join(getSourceRoot(projectRoot), bridgingHeader);\n  if (!fs.existsSync(bridgingHeaderProjectPath)) {\n    // Create the file\n    fs.writeFileSync(bridgingHeaderProjectPath, templateBridgingHeader, 'utf8');\n  }\n\n  // This is non-standard, Xcode generates the bridging header in `/ios` which is kinda annoying.\n  // Instead, this'll generate the default header in the application code folder `/ios/myproject/`.\n  const filePath = `${projectName}/${bridgingHeader}`;\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addResourceFileToGroup({\n      filepath: filePath,\n      groupName: projectName,\n      project,\n      // Not sure why, but this is how Xcode generates it.\n      isBuildFile: false,\n      verbose: false,\n    });\n  }\n  return project;\n}\n\nexport const withNoopSwiftFile: ConfigPlugin = config => {\n  return withBuildSourceFile(config, {\n    filePath: 'noop-file.swift',\n    contents: [\n      '//',\n      '// @generated',\n      '// A blank Swift file must be created for native modules with Swift files to work correctly.',\n      '//',\n      '',\n    ].join('\\n'),\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}