{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.copyFilePathToPathAsync = copyFilePathToPathAsync;\nexports.removeFile = removeFile;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction copyFilePathToPathAsync(_x, _x2) {\n  return _copyFilePathToPathAsync.apply(this, arguments);\n}\nfunction _copyFilePathToPathAsync() {\n  _copyFilePathToPathAsync = _asyncToGenerator(function* (src, dest) {\n    var srcFile = yield _fs().default.promises.readFile(src);\n    yield _fs().default.promises.mkdir(_path().default.dirname(dest), {\n      recursive: true\n    });\n    yield _fs().default.promises.writeFile(dest, srcFile);\n  });\n  return _copyFilePathToPathAsync.apply(this, arguments);\n}\nfunction removeFile(filePath) {\n  try {\n    _fs().default.unlinkSync(filePath);\n    return true;\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      return false;\n    }\n    throw error;\n  }\n}","map":{"version":3,"names":["_fs","data","_interopRequireDefault","require","_path","copyFilePathToPathAsync","_x","_x2","_copyFilePathToPathAsync","apply","arguments","_asyncToGenerator","src","dest","srcFile","default","promises","readFile","mkdir","dirname","recursive","writeFile","removeFile","filePath","unlinkSync","error","code"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/utils/fs.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\n/** A basic function that copies a single file to another file location. */\nexport async function copyFilePathToPathAsync(src: string, dest: string): Promise<void> {\n  const srcFile = await fs.promises.readFile(src);\n  await fs.promises.mkdir(path.dirname(dest), { recursive: true });\n  await fs.promises.writeFile(dest, srcFile);\n}\n\n/** Remove a single file (not directory). Returns `true` if a file was actually deleted. */\nexport function removeFile(filePath: string): boolean {\n  try {\n    fs.unlinkSync(filePath);\n    return true;\n  } catch (error: any) {\n    // Skip if the remove did nothing.\n    if (error.code === 'ENOENT') {\n      return false;\n    }\n    throw error;\n  }\n}\n"],"mappings":";;;;;;;;AAAA,SAAAA,IAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,GAAA,YAAAA,IAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,MAAA;EAAA,IAAAH,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAC,KAAA,YAAAA,MAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;;;;;;SAGsBI,uBAAfA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,yBAAA;EAAAA,wBAAA,GAAAG,iBAAA,YAAuCC,GAAvC,EAAoDC,IAApD,EAAiF;IACtF,IAAMC,OAAO,SAASd,GAAA,GAAAe,OAAA,CAAGC,QAAH,CAAYC,QAAZ,CAAqBL,GAArB,CAAtB;IACA,MAAMZ,GAAA,GAAAe,OAAA,CAAGC,QAAH,CAAYE,KAAZ,CAAkBd,KAAA,GAAAW,OAAA,CAAKI,OAAL,CAAaN,IAAb,CAAlB,EAAsC;MAAEO,SAAS,EAAE;IAAb,CAAtC,CAAN;IACA,MAAMpB,GAAA,GAAAe,OAAA,CAAGC,QAAH,CAAYK,SAAZ,CAAsBR,IAAtB,EAA4BC,OAA5B,CAAN;EACD;EAAA,OAAAN,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGM,SAASY,UAATA,CAAoBC,QAApB,EAA+C;EACpD,IAAI;IACFvB,GAAA,GAAAe,OAAA,CAAGS,UAAH,CAAcD,QAAd;IACA,OAAO,IAAP;EACD,CAHD,CAGE,OAAOE,KAAP,EAAmB;IAEnB,IAAIA,KAAK,CAACC,IAAN,KAAe,QAAnB,EAA6B;MAC3B,OAAO,KAAP;IACD;IACD,MAAMD,KAAN;EACD;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}