{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyNameSettingsGradle = applyNameSettingsGradle;\nexports.getName = getName;\nexports.sanitizeNameForGradle = sanitizeNameForGradle;\nexports.withNameSettingsGradle = exports.withName = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _Resources() {\n  var data = require(\"./Resources\");\n  _Resources = function _Resources() {\n    return data;\n  };\n  return data;\n}\nfunction _Strings() {\n  var data = require(\"./Strings\");\n  _Strings = function _Strings() {\n    return data;\n  };\n  return data;\n}\nfunction sanitizeNameForGradle(name) {\n  name = name.replace(/[\\n\\r\\t]/g, '');\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\nvar withName = (0, _androidPlugins().createStringsXmlPlugin)(applyNameFromConfig, 'withName');\nexports.withName = withName;\nvar withNameSettingsGradle = function withNameSettingsGradle(config) {\n  return (0, _androidPlugins().withSettingsGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('name', \"Cannot automatically configure settings.gradle if it's not groovy\");\n    }\n    return config;\n  });\n};\nexports.withNameSettingsGradle = withNameSettingsGradle;\nfunction getName(config) {\n  return typeof config.name === 'string' ? config.name : null;\n}\nfunction applyNameFromConfig(config, stringsJSON) {\n  var name = getName(config);\n  if (name) {\n    return (0, _Strings().setStringItem)([(0, _Resources().buildResourceItem)({\n      name: 'app_name',\n      value: name\n    })], stringsJSON);\n  }\n  return (0, _Strings().removeStringItem)('app_name', stringsJSON);\n}\nfunction applyNameSettingsGradle(config, settingsGradle) {\n  var _getName;\n  var name = sanitizeNameForGradle((_getName = getName(config)) !== null && _getName !== void 0 ? _getName : '');\n  return settingsGradle.replace(/rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g, \"rootProject.name = '\" + name.replace(/'/g, \"\\\\'\") + \"'\");\n}","map":{"version":3,"names":["_androidPlugins","data","require","_warnings","_Resources","_Strings","sanitizeNameForGradle","name","replace","withName","createStringsXmlPlugin","applyNameFromConfig","withNameSettingsGradle","config","withSettingsGradle","modResults","language","contents","applyNameSettingsGradle","addWarningAndroid","getName","stringsJSON","setStringItem","buildResourceItem","value","removeStringItem","settingsGradle","_getName"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/android/Name.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createStringsXmlPlugin, withSettingsGradle } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { buildResourceItem, ResourceXML } from './Resources';\nimport { removeStringItem, setStringItem } from './Strings';\n\n/**\n * Sanitize a name, this should be used for files and gradle names.\n * - `[/, \\, :, <, >, \", ?, *, |]` are not allowed\n * https://docs.gradle.org/4.2/release-notes.html#path-separator-characters-in-names-are-deprecated\n *\n * @param name\n */\nexport function sanitizeNameForGradle(name: string): string {\n  // Remove escape characters which are valid in XML names but not in gradle.\n  name = name.replace(/[\\n\\r\\t]/g, '');\n\n  // Gradle disallows these:\n  // The project name 'My-Special ðŸ˜ƒ Co/ol_Project' must not contain any of the following characters: [/, \\, :, <, >, \", ?, *, |]. Set the 'rootProject.name' or adjust the 'include' statement (see https://docs.gradle.org/6.2/dsl/org.gradle.api.initialization.Settings.html#org.gradle.api.initialization.Settings:include(java.lang.String[]) for more details).\n  return name.replace(/(\\/|\\\\|:|<|>|\"|\\?|\\*|\\|)/g, '');\n}\n\nexport const withName = createStringsXmlPlugin(applyNameFromConfig, 'withName');\n\nexport const withNameSettingsGradle: ConfigPlugin = config => {\n  return withSettingsGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyNameSettingsGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'name',\n        `Cannot automatically configure settings.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\nfunction applyNameFromConfig(\n  config: Pick<ExpoConfig, 'name'>,\n  stringsJSON: ResourceXML\n): ResourceXML {\n  const name = getName(config);\n  if (name) {\n    return setStringItem([buildResourceItem({ name: 'app_name', value: name })], stringsJSON);\n  }\n  return removeStringItem('app_name', stringsJSON);\n}\n\n/**\n * Regex a name change -- fragile.\n *\n * @param config\n * @param settingsGradle\n */\nexport function applyNameSettingsGradle(config: Pick<ExpoConfig, 'name'>, settingsGradle: string) {\n  const name = sanitizeNameForGradle(getName(config) ?? '');\n\n  // Select rootProject.name = '***' and replace the contents between the quotes.\n  return settingsGradle.replace(\n    /rootProject.name\\s?=\\s?([\"'])(?:(?=(\\\\?))\\2.)*?\\1/g,\n    `rootProject.name = '${name.replace(/'/g, \"\\\\'\")}'`\n  );\n}\n"],"mappings":";;;;;;;;;AAGA,SAAAA,gBAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,eAAA,YAAAA,gBAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,UAAA;EAAA,IAAAF,IAAA,GAAAC,OAAA;EAAAC,SAAA,YAAAA,UAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,WAAA;EAAA,IAAAH,IAAA,GAAAC,OAAA;EAAAE,UAAA,YAAAA,WAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAI,SAAA;EAAA,IAAAJ,IAAA,GAAAC,OAAA;EAAAG,QAAA,YAAAA,SAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AASO,SAASK,qBAATA,CAA+BC,IAA/B,EAAqD;EAE1DA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,WAAb,EAA0B,EAA1B,CAAP;EAIA,OAAOD,IAAI,CAACC,OAAL,CAAa,2BAAb,EAA0C,EAA1C,CAAP;AACD;AAEM,IAAMC,QAAQ,GAAG,IAAAT,eAAA,GAAAU,sBAAA,EAAuBC,mBAAvB,EAA4C,UAA5C,CAAjB;;AAEA,IAAMC,sBAAoC,GAAG,SAAvCA,sBAAoCA,CAAGC,MAAM,EAAI;EAC5D,OAAO,IAAAb,eAAA,GAAAc,kBAAA,EAAmBD,MAAnB,EAA2B,UAAAA,MAAM,EAAI;IAC1C,IAAIA,MAAM,CAACE,UAAP,CAAkBC,QAAlB,KAA+B,QAAnC,EAA6C;MAC3CH,MAAM,CAACE,UAAP,CAAkBE,QAAlB,GAA6BC,uBAAuB,CAACL,MAAD,EAASA,MAAM,CAACE,UAAP,CAAkBE,QAA3B,CAApD;IACD,CAFD,MAEO;MACL,IAAAd,SAAA,GAAAgB,iBAAA,EACE,MADF;IAID;IACD,OAAON,MAAP;EACD,CAVM,CAAP;AAWD,CAZM;;AAcA,SAASO,OAATA,CAAiBP,MAAjB,EAAmD;EACxD,OAAO,OAAOA,MAAM,CAACN,IAAd,KAAuB,QAAvB,GAAkCM,MAAM,CAACN,IAAzC,GAAgD,IAAvD;AACD;AAED,SAASI,mBAATA,CACEE,MADF,EAEEQ,WAFF,EAGe;EACb,IAAMd,IAAI,GAAGa,OAAO,CAACP,MAAD,CAApB;EACA,IAAIN,IAAJ,EAAU;IACR,OAAO,IAAAF,QAAA,GAAAiB,aAAA,EAAc,CAAC,IAAAlB,UAAA,GAAAmB,iBAAA,EAAkB;MAAEhB,IAAI,EAAE,UAAR;MAAoBiB,KAAK,EAAEjB;IAA3B,CAAlB,CAAD,CAAd,EAAsEc,WAAtE,CAAP;EACD;EACD,OAAO,IAAAhB,QAAA,GAAAoB,gBAAA,EAAiB,UAAjB,EAA6BJ,WAA7B,CAAP;AACD;AAQM,SAASH,uBAATA,CAAiCL,MAAjC,EAAmEa,cAAnE,EAA2F;EAAA,IAAAC,QAAA;EAChG,IAAMpB,IAAI,GAAGD,qBAAqB,EAAAqB,QAAA,GAACP,OAAO,CAACP,MAAD,CAAR,cAAAc,QAAA,cAAAA,QAAA,GAAoB,EAApB,CAAlC;EAGA,OAAOD,cAAc,CAAClB,OAAf,CACL,oDADK,2BAEkBD,IAAI,CAACC,OAAL,CAAa,IAAb,EAAmB,KAAnB,CAA0B,OAFnD;AAID"},"metadata":{},"sourceType":"script","externalDependencies":[]}