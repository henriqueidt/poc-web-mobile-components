{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"modRequest\"],\n  _excluded2 = [\"nextMod\"],\n  _excluded3 = [\"modRequest\", \"modResults\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withBaseMod = withBaseMod;\nexports.withMod = withMod;\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar EXPO_DEBUG = (0, _getenv().boolish)('EXPO_DEBUG', false);\nfunction withBaseMod(config, _ref2) {\n  var platform = _ref2.platform,\n    mod = _ref2.mod,\n    action = _ref2.action,\n    skipEmptyMod = _ref2.skipEmptyMod,\n    isProvider = _ref2.isProvider,\n    isIntrospective = _ref2.isIntrospective,\n    saveToInternal = _ref2.saveToInternal;\n  var _config$_internal$isD, _config$_internal;\n  if (!config.mods) {\n    config.mods = {};\n  }\n  if (!config.mods[platform]) {\n    config.mods[platform] = {};\n  }\n  var interceptedMod = config.mods[platform][mod];\n  if (!interceptedMod) {\n    if (skipEmptyMod) {\n      return config;\n    }\n    var noopMod = function noopMod(config) {\n      return config;\n    };\n    interceptedMod = noopMod;\n  }\n  var debugTrace = '';\n  var isDebug = (_config$_internal$isD = (_config$_internal = config._internal) === null || _config$_internal === void 0 ? void 0 : _config$_internal.isDebug) !== null && _config$_internal$isD !== void 0 ? _config$_internal$isD : EXPO_DEBUG;\n  if (isDebug) {\n    var stack = new Error().stack;\n    debugTrace = getDebugPluginStackFromStackTrace(stack);\n    var modStack = _chalk().default.bold(platform + \".\" + mod);\n    debugTrace = modStack + \": \" + debugTrace;\n  }\n  if (interceptedMod.isProvider) {\n    if (isProvider) {\n      throw new (_errors().PluginError)(\"Cannot set provider mod for \\\"\" + platform + \".\" + mod + \"\\\" because another is already being used.\", 'CONFLICTING_PROVIDER');\n    } else {\n      throw new (_errors().PluginError)(\"Cannot add mod to \\\"\" + platform + \".\" + mod + \"\\\" because the provider has already been added. Provider must be the last mod added.\", 'INVALID_MOD_ORDER');\n    }\n  }\n  function interceptingMod(_x) {\n    return _interceptingMod.apply(this, arguments);\n  }\n  function _interceptingMod() {\n    _interceptingMod = _asyncToGenerator(function* (_ref3) {\n      var modRequest = _ref3.modRequest,\n        config = _objectWithoutProperties(_ref3, _excluded);\n      if (isDebug) {\n        console.log(debugTrace);\n      }\n      var results = yield action(_objectSpread(_objectSpread({}, config), {}, {\n        modRequest: _objectSpread(_objectSpread({}, modRequest), {}, {\n          nextMod: interceptedMod\n        })\n      }));\n      if (saveToInternal) {\n        saveToInternalObject(results, platform, mod, results.modResults);\n      }\n      return results;\n    });\n    return _interceptingMod.apply(this, arguments);\n  }\n  interceptingMod.isProvider = isProvider;\n  if (isIntrospective) {\n    interceptingMod.isIntrospective = isIntrospective;\n  }\n  config.mods[platform][mod] = interceptingMod;\n  return config;\n}\nfunction saveToInternalObject(config, platformName, modName, results) {\n  if (!config._internal) config._internal = {};\n  if (!config._internal.modResults) config._internal.modResults = {};\n  if (!config._internal.modResults[platformName]) config._internal.modResults[platformName] = {};\n  config._internal.modResults[platformName][modName] = results;\n}\nfunction getDebugPluginStackFromStackTrace(stacktrace) {\n  if (!stacktrace) {\n    return '';\n  }\n  var treeStackLines = [];\n  for (var line of stacktrace.split('\\n')) {\n    var _line$trim$split = line.trim().split(' '),\n      _line$trim$split2 = _slicedToArray(_line$trim$split, 2),\n      first = _line$trim$split2[0],\n      second = _line$trim$split2[1];\n    if (first === 'at') {\n      treeStackLines.push(second);\n    }\n  }\n  var plugins = treeStackLines.map(function (first) {\n    var _ref, _first$match$1$trim, _first$match, _first$match$, _first$match2, _first$match2$;\n    return (_ref = (_first$match$1$trim = first === null || first === void 0 ? void 0 : (_first$match = first.match(/^(\\bwith[A-Z].*?\\b)/)) === null || _first$match === void 0 ? void 0 : (_first$match$ = _first$match[1]) === null || _first$match$ === void 0 ? void 0 : _first$match$.trim()) !== null && _first$match$1$trim !== void 0 ? _first$match$1$trim : first === null || first === void 0 ? void 0 : (_first$match2 = first.match(/\\.(\\bwith[A-Z].*?\\b)/)) === null || _first$match2 === void 0 ? void 0 : (_first$match2$ = _first$match2[1]) === null || _first$match2$ === void 0 ? void 0 : _first$match2$.trim()) !== null && _ref !== void 0 ? _ref : null;\n  }).filter(Boolean).filter(function (plugin) {\n    return !['withMod', 'withBaseMod', 'withExtendedMod'].includes(plugin);\n  });\n  var commonPlugins = ['withPlugins', 'withRunOnce', 'withStaticPlugin'];\n  return plugins.reverse().map(function (pluginName, index) {\n    if (pluginName.includes('BaseMod')) {\n      pluginName = _chalk().default.bold(pluginName);\n    }\n    if (pluginName.toLowerCase().includes('dangerous')) {\n      pluginName = _chalk().default.red(pluginName);\n    }\n    if (index === 0) {\n      return _chalk().default.blue(pluginName);\n    } else if (commonPlugins.includes(pluginName)) {\n      return _chalk().default.dim(pluginName);\n    }\n    return pluginName;\n  }).join(' âžœ ');\n}\nfunction withMod(config, _ref4) {\n  var platform = _ref4.platform,\n    mod = _ref4.mod,\n    _action = _ref4.action;\n  return withBaseMod(config, {\n    platform: platform,\n    mod: mod,\n    isProvider: false,\n    action: function () {\n      var _action2 = _asyncToGenerator(function* (_ref5) {\n        var _ref5$modRequest = _ref5.modRequest,\n          nextMod = _ref5$modRequest.nextMod,\n          modRequest = _objectWithoutProperties(_ref5$modRequest, _excluded2),\n          modResults = _ref5.modResults,\n          config = _objectWithoutProperties(_ref5, _excluded3);\n        var results = yield _action(_objectSpread({\n          modRequest: modRequest,\n          modResults: modResults\n        }, config));\n        return nextMod(results);\n      });\n      function action(_x2) {\n        return _action2.apply(this, arguments);\n      }\n      return action;\n    }()\n  });\n}","map":{"version":3,"names":["_chalk","data","_interopRequireDefault","require","_getenv","_errors","EXPO_DEBUG","boolish","withBaseMod","config","_ref2","platform","mod","action","skipEmptyMod","isProvider","isIntrospective","saveToInternal","_config$_internal$isD","_config$_internal","mods","interceptedMod","noopMod","debugTrace","isDebug","_internal","stack","Error","getDebugPluginStackFromStackTrace","modStack","default","bold","PluginError","interceptingMod","_x","_interceptingMod","apply","arguments","_asyncToGenerator","_ref3","modRequest","_objectWithoutProperties","_excluded","console","log","results","_objectSpread","nextMod","saveToInternalObject","modResults","platformName","modName","stacktrace","treeStackLines","line","split","_line$trim$split","trim","_line$trim$split2","_slicedToArray","first","second","push","plugins","map","_ref","_first$match$1$trim","_first$match","_first$match$","_first$match2","_first$match2$","match","filter","Boolean","plugin","includes","commonPlugins","reverse","pluginName","index","toLowerCase","red","blue","dim","join","withMod","_ref4","_action2","_ref5","_ref5$modRequest","_excluded2","_excluded3","_x2"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/plugins/withMod.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { JSONObject } from '@expo/json-file';\nimport chalk from 'chalk';\nimport { boolish } from 'getenv';\n\nimport { ExportedConfig, ExportedConfigWithProps, Mod, ModPlatform } from '../Plugin.types';\nimport { PluginError } from '../utils/errors';\n\nconst EXPO_DEBUG = boolish('EXPO_DEBUG', false);\n\nexport type BaseModOptions = {\n  platform: ModPlatform;\n  mod: string;\n  isProvider?: boolean;\n  skipEmptyMod?: boolean;\n  saveToInternal?: boolean;\n  /**\n   * If the mod supports introspection, and avoids making any filesystem modifications during compilation.\n   * By enabling, this mod, and all of its descendants will be run in introspection mode.\n   * This should only be used for static files like JSON or XML, and not for application files that require regexes,\n   * or complex static files that require other files to be generated like Xcode `.pbxproj`.\n   */\n  isIntrospective?: boolean;\n};\n\n/**\n * Plugin to intercept execution of a given `mod` with the given `action`.\n * If an action was already set on the given `config` config for `mod`, then it\n * will be provided to the `action` as `nextMod` when it's evaluated, otherwise\n * `nextMod` will be an identity function.\n *\n * @param config exported config\n * @param platform platform to target (ios or android)\n * @param mod name of the platform function to intercept\n * @param skipEmptyMod should skip running the action if there is no existing mod to intercept\n * @param saveToInternal should save the results to `_internal.modResults`, only enable this when the results are pure JSON.\n * @param isProvider should provide data up to the other mods.\n * @param action method to run on the mod when the config is compiled\n */\nexport function withBaseMod<T>(\n  config: ExportedConfig,\n  {\n    platform,\n    mod,\n    action,\n    skipEmptyMod,\n    isProvider,\n    isIntrospective,\n    saveToInternal,\n  }: BaseModOptions & { action: Mod<T> }\n): ExportedConfig {\n  if (!config.mods) {\n    config.mods = {};\n  }\n  if (!config.mods[platform]) {\n    config.mods[platform] = {};\n  }\n\n  let interceptedMod: Mod<T> = (config.mods[platform] as Record<string, any>)[mod];\n\n  // No existing mod to intercept\n  if (!interceptedMod) {\n    if (skipEmptyMod) {\n      // Skip running the action\n      return config;\n    }\n    // Use a noop mod and continue\n    const noopMod: Mod<T> = config => config;\n    interceptedMod = noopMod;\n  }\n\n  // Create a stack trace for debugging ahead of time\n  let debugTrace: string = '';\n  // Use the possibly user defined value. Otherwise fallback to the env variable.\n  // We support the env variable because user mods won't have _internal defined in time.\n  const isDebug = config._internal?.isDebug ?? EXPO_DEBUG;\n  if (isDebug) {\n    // Get a stack trace via the Error API\n    const stack = new Error().stack;\n    // Format the stack trace to create the debug log\n    debugTrace = getDebugPluginStackFromStackTrace(stack);\n    const modStack = chalk.bold(`${platform}.${mod}`);\n\n    debugTrace = `${modStack}: ${debugTrace}`;\n  }\n\n  // Prevent adding multiple providers to a mod.\n  // Base mods that provide files ignore any incoming modResults and therefore shouldn't have provider mods as parents.\n  if (interceptedMod.isProvider) {\n    if (isProvider) {\n      throw new PluginError(\n        `Cannot set provider mod for \"${platform}.${mod}\" because another is already being used.`,\n        'CONFLICTING_PROVIDER'\n      );\n    } else {\n      throw new PluginError(\n        `Cannot add mod to \"${platform}.${mod}\" because the provider has already been added. Provider must be the last mod added.`,\n        'INVALID_MOD_ORDER'\n      );\n    }\n  }\n\n  async function interceptingMod({ modRequest, ...config }: ExportedConfigWithProps<T>) {\n    if (isDebug) {\n      // In debug mod, log the plugin stack in the order which they were invoked\n      console.log(debugTrace);\n    }\n    const results = await action({\n      ...config,\n      modRequest: { ...modRequest, nextMod: interceptedMod },\n    });\n\n    if (saveToInternal) {\n      saveToInternalObject(results, platform, mod, (results.modResults as unknown) as JSONObject);\n    }\n    return results;\n  }\n\n  // Ensure this base mod is registered as the provider.\n  interceptingMod.isProvider = isProvider;\n\n  if (isIntrospective) {\n    // Register the mode as idempotent so introspection doesn't remove it.\n    interceptingMod.isIntrospective = isIntrospective;\n  }\n\n  (config.mods[platform] as any)[mod] = interceptingMod;\n\n  return config;\n}\n\nfunction saveToInternalObject(\n  config: Pick<ExpoConfig, '_internal'>,\n  platformName: ModPlatform,\n  modName: string,\n  results: JSONObject\n) {\n  if (!config._internal) config._internal = {};\n  if (!config._internal.modResults) config._internal.modResults = {};\n  if (!config._internal.modResults[platformName]) config._internal.modResults[platformName] = {};\n  config._internal.modResults[platformName][modName] = results;\n}\n\nfunction getDebugPluginStackFromStackTrace(stacktrace?: string): string {\n  if (!stacktrace) {\n    return '';\n  }\n\n  const treeStackLines: string[] = [];\n  for (const line of stacktrace.split('\\n')) {\n    const [first, second] = line.trim().split(' ');\n    if (first === 'at') {\n      treeStackLines.push(second);\n    }\n  }\n\n  const plugins = treeStackLines\n    .map(first => {\n      // Match the first part of the stack trace against the plugin naming convention\n      // \"with\" followed by a capital letter.\n      return (\n        first?.match(/^(\\bwith[A-Z].*?\\b)/)?.[1]?.trim() ??\n        first?.match(/\\.(\\bwith[A-Z].*?\\b)/)?.[1]?.trim() ??\n        null\n      );\n    })\n    .filter(Boolean)\n    .filter(plugin => {\n      // redundant as all debug logs are captured in withBaseMod\n      return !['withMod', 'withBaseMod', 'withExtendedMod'].includes(plugin!);\n    });\n\n  const commonPlugins = ['withPlugins', 'withRunOnce', 'withStaticPlugin'];\n\n  return (\n    (plugins as string[])\n      .reverse()\n      .map((pluginName, index) => {\n        // Base mods indicate a logical section.\n        if (pluginName.includes('BaseMod')) {\n          pluginName = chalk.bold(pluginName);\n        }\n        // highlight dangerous mods\n        if (pluginName.toLowerCase().includes('dangerous')) {\n          pluginName = chalk.red(pluginName);\n        }\n\n        if (index === 0) {\n          return chalk.blue(pluginName);\n        } else if (commonPlugins.includes(pluginName)) {\n          // Common mod names often clutter up the logs, dim them out\n          return chalk.dim(pluginName);\n        }\n        return pluginName;\n      })\n      // Join the results:\n      // withAndroidExpoPlugins âžœ withPlugins âžœ withIcons âžœ withDangerousMod âžœ withMod\n      .join(' âžœ ')\n  );\n}\n\n/**\n * Plugin to extend a mod function in the plugins config.\n *\n * @param config exported config\n * @param platform platform to target (ios or android)\n * @param mod name of the platform function to extend\n * @param action method to run on the mod when the config is compiled\n */\nexport function withMod<T>(\n  config: ExportedConfig,\n  {\n    platform,\n    mod,\n    action,\n  }: {\n    platform: ModPlatform;\n    mod: string;\n    action: Mod<T>;\n  }\n): ExportedConfig {\n  return withBaseMod(config, {\n    platform,\n    mod,\n    isProvider: false,\n    async action({ modRequest: { nextMod, ...modRequest }, modResults, ...config }) {\n      const results = await action({ modRequest, modResults: modResults as T, ...config });\n      return nextMod!(results as any);\n    },\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}