{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withStaticPlugin = void 0;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction _pluginResolver() {\n  var data = require(\"../utils/plugin-resolver\");\n  _pluginResolver = function _pluginResolver() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar EXPO_DEBUG = (0, _getenv().boolish)('EXPO_DEBUG', false);\nvar EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS = (0, _getenv().boolish)('EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS', false);\nvar EXPO_USE_UNVERSIONED_PLUGINS = (0, _getenv().boolish)('EXPO_USE_UNVERSIONED_PLUGINS', false);\nfunction isModuleMissingError(name, error) {\n  if (['MODULE_NOT_FOUND', 'PLUGIN_NOT_FOUND'].includes(error.code)) {\n    return true;\n  }\n  return error.message.includes(\"Cannot find module '\" + name + \"'\");\n}\nfunction isUnexpectedTokenError(error) {\n  if (error instanceof SyntaxError || error instanceof _errors().PluginError && error.code === 'INVALID_PLUGIN_IMPORT') {\n    return !!error.message.match(/Unexpected token/) || !!error.message.match(/Cannot use import statement/);\n  }\n  return false;\n}\nvar withStaticPlugin = function withStaticPlugin(config, props) {\n  var _pluginProps;\n  var projectRoot = props.projectRoot;\n  if (!projectRoot) {\n    var _config$_internal;\n    projectRoot = (_config$_internal = config._internal) === null || _config$_internal === void 0 ? void 0 : _config$_internal.projectRoot;\n    (0, _pluginResolver().assertInternalProjectRoot)(projectRoot);\n  }\n  var _ref = (0, _pluginResolver().normalizeStaticPlugin)(props.plugin),\n    _ref2 = _slicedToArray(_ref, 2),\n    pluginResolve = _ref2[0],\n    pluginProps = _ref2[1];\n  (0, _assert().default)(!((_pluginProps = pluginProps) !== null && _pluginProps !== void 0 && _pluginProps._resolverError), \"Plugin property '_resolverError' is a reserved property of `withStaticPlugin`\");\n  var withPlugin;\n  if (typeof pluginResolve === 'function') {\n    withPlugin = pluginResolve;\n  } else if (typeof pluginResolve === 'string') {\n    try {\n      withPlugin = (0, _pluginResolver().resolveConfigPluginFunction)(projectRoot, pluginResolve);\n      if (EXPO_USE_UNVERSIONED_PLUGINS && !!withPlugin && !!props._isLegacyPlugin && !!props.fallback) {\n        console.log(\"Force \\\"\" + pluginResolve + \"\\\" to unversioned plugin\");\n        withPlugin = props.fallback;\n      }\n    } catch (error) {\n      if (EXPO_DEBUG) {\n        if (EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS) {\n          console.log(\"Error resolving plugin \\\"\" + pluginResolve + \"\\\"\");\n          console.log(error);\n          console.log();\n        } else {\n          var shouldMuteWarning = props._isLegacyPlugin && (isModuleMissingError(pluginResolve, error) || isUnexpectedTokenError(error));\n          if (!shouldMuteWarning) {\n            if (isModuleMissingError(pluginResolve, error)) {\n              console.log(\"Could not find plugin \\\"\" + pluginResolve + \"\\\"\");\n            } else {\n              console.log(\"Error resolving plugin \\\"\" + pluginResolve + \"\\\"\");\n              console.log(error);\n              console.log();\n            }\n          }\n        }\n      }\n      if (props.fallback) {\n        if (!pluginProps) pluginProps = {};\n        pluginProps._resolverError = error;\n        withPlugin = props.fallback;\n      } else {\n        throw error;\n      }\n    }\n  } else {\n    throw new (_errors().PluginError)(\"Plugin is an unexpected type: \" + typeof pluginResolve, 'INVALID_PLUGIN_TYPE');\n  }\n  config = withPlugin(config, pluginProps);\n  return config;\n};\nexports.withStaticPlugin = withStaticPlugin;","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","_getenv","_errors","_pluginResolver","EXPO_DEBUG","boolish","EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS","EXPO_USE_UNVERSIONED_PLUGINS","isModuleMissingError","name","error","includes","code","message","isUnexpectedTokenError","SyntaxError","PluginError","match","withStaticPlugin","config","props","_pluginProps","projectRoot","_config$_internal","_internal","assertInternalProjectRoot","_ref","normalizeStaticPlugin","plugin","_ref2","_slicedToArray","pluginResolve","pluginProps","default","_resolverError","withPlugin","resolveConfigPluginFunction","_isLegacyPlugin","fallback","console","log","shouldMuteWarning"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/plugins/withStaticPlugin.ts"],"sourcesContent":["import assert from 'assert';\nimport { boolish } from 'getenv';\n\nimport { ConfigPlugin, StaticPlugin } from '../Plugin.types';\nimport { PluginError } from '../utils/errors';\nimport {\n  assertInternalProjectRoot,\n  normalizeStaticPlugin,\n  resolveConfigPluginFunction,\n} from '../utils/plugin-resolver';\n\nconst EXPO_DEBUG = boolish('EXPO_DEBUG', false);\n\n// Show all error info related to plugin resolution.\nconst EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS = boolish('EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS', false);\n// Force using the fallback unversioned plugin instead of a local versioned copy,\n// this should only be used for testing the CLI.\nconst EXPO_USE_UNVERSIONED_PLUGINS = boolish('EXPO_USE_UNVERSIONED_PLUGINS', false);\n\nfunction isModuleMissingError(name: string, error: Error): boolean {\n  // @ts-ignore\n  if (['MODULE_NOT_FOUND', 'PLUGIN_NOT_FOUND'].includes(error.code)) {\n    return true;\n  }\n  return error.message.includes(`Cannot find module '${name}'`);\n}\n\nfunction isUnexpectedTokenError(error: Error): boolean {\n  if (\n    error instanceof SyntaxError ||\n    (error instanceof PluginError && error.code === 'INVALID_PLUGIN_IMPORT')\n  ) {\n    return (\n      // These are the most common errors that'll be thrown when a package isn't transpiled correctly.\n      !!error.message.match(/Unexpected token/) ||\n      !!error.message.match(/Cannot use import statement/)\n    );\n  }\n  return false;\n}\n\n/**\n * Resolves static module plugin and potentially falls back on a provided plugin if the module cannot be resolved\n *\n * @param config\n * @param fallback Plugin with `_resolverError` explaining why the module couldn't be used\n * @param projectRoot optional project root, fallback to _internal.projectRoot. Used for testing.\n * @param _isLegacyPlugin Used to suppress errors thrown by plugins that are applied automatically\n */\nexport const withStaticPlugin: ConfigPlugin<{\n  plugin: StaticPlugin | ConfigPlugin | string;\n  fallback?: ConfigPlugin<{ _resolverError: Error } & any>;\n  projectRoot?: string;\n  _isLegacyPlugin?: boolean;\n}> = (config, props) => {\n  let projectRoot = props.projectRoot;\n  if (!projectRoot) {\n    projectRoot = config._internal?.projectRoot;\n    assertInternalProjectRoot(projectRoot);\n  }\n\n  let [pluginResolve, pluginProps] = normalizeStaticPlugin(props.plugin);\n  // Ensure no one uses this property by accident.\n  assert(\n    !pluginProps?._resolverError,\n    `Plugin property '_resolverError' is a reserved property of \\`withStaticPlugin\\``\n  );\n\n  let withPlugin: ConfigPlugin<unknown>;\n\n  if (\n    // Function was provided, no need to resolve: [withPlugin, {}]\n    typeof pluginResolve === 'function'\n  ) {\n    withPlugin = pluginResolve;\n  } else if (typeof pluginResolve === 'string') {\n    try {\n      // Resolve and evaluate plugins.\n      withPlugin = resolveConfigPluginFunction(projectRoot, pluginResolve);\n\n      // Only force if the project has the versioned plugin, otherwise use default behavior.\n      // This helps see which plugins are being skipped.\n      if (\n        EXPO_USE_UNVERSIONED_PLUGINS &&\n        !!withPlugin &&\n        !!props._isLegacyPlugin &&\n        !!props.fallback\n      ) {\n        console.log(`Force \"${pluginResolve}\" to unversioned plugin`);\n        withPlugin = props.fallback;\n      }\n    } catch (error: any) {\n      if (EXPO_DEBUG) {\n        if (EXPO_CONFIG_PLUGIN_VERBOSE_ERRORS) {\n          // Log the error in debug mode for plugins with fallbacks (like the Expo managed plugins).\n          console.log(`Error resolving plugin \"${pluginResolve}\"`);\n          console.log(error);\n          console.log();\n        } else {\n          const shouldMuteWarning =\n            props._isLegacyPlugin &&\n            (isModuleMissingError(pluginResolve, error) || isUnexpectedTokenError(error));\n          if (!shouldMuteWarning) {\n            if (isModuleMissingError(pluginResolve, error)) {\n              // Prevent causing log spew for basic resolution errors.\n              console.log(`Could not find plugin \"${pluginResolve}\"`);\n            } else {\n              // Log the error in debug mode for plugins with fallbacks (like the Expo managed plugins).\n              console.log(`Error resolving plugin \"${pluginResolve}\"`);\n              console.log(error);\n              console.log();\n            }\n          }\n        }\n      }\n      // TODO: Maybe allow for `PluginError`s to be thrown so external plugins can assert invalid options.\n\n      // If the static module failed to resolve, attempt to use a fallback.\n      // This enables support for built-in plugins with versioned variations living in other packages.\n      if (props.fallback) {\n        if (!pluginProps) pluginProps = {};\n        // Pass this to the fallback plugin for potential warnings about needing to install a versioned package.\n        pluginProps._resolverError = error;\n        withPlugin = props.fallback;\n      } else {\n        // If no fallback, throw the resolution error.\n        throw error;\n      }\n    }\n  } else {\n    throw new PluginError(\n      `Plugin is an unexpected type: ${typeof pluginResolve}`,\n      'INVALID_PLUGIN_TYPE'\n    );\n  }\n\n  // Execute the plugin.\n  config = withPlugin(config, pluginProps);\n  return config;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}