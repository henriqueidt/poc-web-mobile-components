{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compileModsAsync = compileModsAsync;\nexports.evalModsAsync = evalModsAsync;\nexports.withDefaultBaseMods = withDefaultBaseMods;\nexports.withIntrospectionBaseMods = withIntrospectionBaseMods;\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"../ios/utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction Warnings() {\n  var data = _interopRequireWildcard(require(\"../utils/warnings\"));\n  Warnings = function Warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n  return data;\n}\nfunction _withAndroidBaseMods() {\n  var data = require(\"./withAndroidBaseMods\");\n  _withAndroidBaseMods = function _withAndroidBaseMods() {\n    return data;\n  };\n  return data;\n}\nfunction _withIosBaseMods() {\n  var data = require(\"./withIosBaseMods\");\n  _withIosBaseMods = function _withIosBaseMods() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:config-plugins:mod-compiler');\nfunction withDefaultBaseMods(config) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = (0, _withIosBaseMods().withIosBaseMods)(config, props);\n  config = (0, _withAndroidBaseMods().withAndroidBaseMods)(config, props);\n  return config;\n}\nfunction withIntrospectionBaseMods(config) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = (0, _withIosBaseMods().withIosBaseMods)(config, _objectSpread({\n    saveToInternal: true,\n    skipEmptyMod: false\n  }, props));\n  config = (0, _withAndroidBaseMods().withAndroidBaseMods)(config, _objectSpread({\n    saveToInternal: true,\n    skipEmptyMod: false\n  }, props));\n  if (config.mods) {\n    for (var platform of Object.keys(config.mods)) {\n      for (var key of Object.keys(config.mods[platform] || {})) {\n        var _config$mods$platform, _config$mods$platform2;\n        if (!((_config$mods$platform = config.mods[platform]) !== null && _config$mods$platform !== void 0 && (_config$mods$platform2 = _config$mods$platform[key]) !== null && _config$mods$platform2 !== void 0 && _config$mods$platform2.isIntrospective)) {\n          var _config$mods$platform3;\n          debug(\"removing non-idempotent mod: \" + platform + \".\" + key);\n          (_config$mods$platform3 = config.mods[platform]) === null || _config$mods$platform3 === void 0 ? true : delete _config$mods$platform3[key];\n        }\n      }\n    }\n  }\n  return config;\n}\nfunction compileModsAsync(_x, _x2) {\n  return _compileModsAsync.apply(this, arguments);\n}\nfunction _compileModsAsync() {\n  _compileModsAsync = _asyncToGenerator(function* (config, props) {\n    if (props.introspect === true) {\n      config = withIntrospectionBaseMods(config);\n    } else {\n      config = withDefaultBaseMods(config);\n    }\n    return yield evalModsAsync(config, props);\n  });\n  return _compileModsAsync.apply(this, arguments);\n}\nfunction sortMods(commands, order) {\n  var allKeys = commands.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n      key = _ref2[0];\n    return key;\n  });\n  var completeOrder = _toConsumableArray(new Set([].concat(_toConsumableArray(order), _toConsumableArray(allKeys))));\n  var sorted = [];\n  var _loop = function _loop() {\n    var group = completeOrder.shift();\n    var commandSet = commands.find(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n        key = _ref4[0];\n      return key === group;\n    });\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  };\n  while (completeOrder.length) {\n    _loop();\n  }\n  return sorted;\n}\nvar orders = {\n  ios: ['dangerous', 'xcodeproj'],\n  android: ['dangerous']\n};\nfunction evalModsAsync(_x3, _x4) {\n  return _evalModsAsync.apply(this, arguments);\n}\nfunction _evalModsAsync() {\n  _evalModsAsync = _asyncToGenerator(function* (config, _ref5) {\n    var projectRoot = _ref5.projectRoot,\n      introspect = _ref5.introspect,\n      platforms = _ref5.platforms,\n      assertMissingModProviders = _ref5.assertMissingModProviders;\n    for (var _ref6 of Object.entries((_config$mods = config.mods) !== null && _config$mods !== void 0 ? _config$mods : {})) {\n      var _ref7 = _slicedToArray(_ref6, 2);\n      var platformName = _ref7[0];\n      var platform = _ref7[1];\n      var _config$mods;\n      if (platforms && !platforms.includes(platformName)) {\n        debug(\"skip platform: \" + platformName);\n        continue;\n      }\n      var entries = Object.entries(platform);\n      if (entries.length) {\n        entries = sortMods(entries, orders[platformName]);\n        debug(\"run in order: \" + entries.map(function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 1),\n            name = _ref9[0];\n          return name;\n        }).join(', '));\n        var platformProjectRoot = _path().default.join(projectRoot, platformName);\n        var projectName = platformName === 'ios' ? (0, _Xcodeproj().getHackyProjectName)(projectRoot, config) : undefined;\n        for (var _ref10 of entries) {\n          var _ref11 = _slicedToArray(_ref10, 2);\n          var modName = _ref11[0];\n          var mod = _ref11[1];\n          var modRequest = {\n            projectRoot: projectRoot,\n            projectName: projectName,\n            platformProjectRoot: platformProjectRoot,\n            platform: platformName,\n            modName: modName,\n            introspect: !!introspect\n          };\n          if (!mod.isProvider) {\n            var errorMessage = \"Initial base modifier for \\\"\" + platformName + \".\" + modName + \"\\\" is not a provider and therefore will not provide modResults to child mods\";\n            if (assertMissingModProviders !== false) {\n              throw new (_errors().PluginError)(errorMessage, 'MISSING_PROVIDER');\n            } else {\n              Warnings().addWarningForPlatform(platformName, platformName + \".\" + modName, \"Skipping: Initial base modifier for \\\"\" + platformName + \".\" + modName + \"\\\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.\");\n              continue;\n            }\n          }\n          var results = yield mod(_objectSpread(_objectSpread({}, config), {}, {\n            modResults: null,\n            modRequest: modRequest\n          }));\n          config = (0, _createBaseMod().assertModResults)(results, platformName, modName);\n          delete config.modResults;\n          delete config.modRequest;\n        }\n      }\n    }\n    return config;\n  });\n  return _evalModsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_debug","data","_interopRequireDefault","require","_path","_Xcodeproj","_errors","Warnings","_interopRequireWildcard","_createBaseMod","_withAndroidBaseMods","_withIosBaseMods","debug","default","withDefaultBaseMods","config","props","arguments","length","undefined","withIosBaseMods","withAndroidBaseMods","withIntrospectionBaseMods","_objectSpread","saveToInternal","skipEmptyMod","mods","platform","Object","keys","key","_config$mods$platform","_config$mods$platform2","isIntrospective","_config$mods$platform3","compileModsAsync","_x","_x2","_compileModsAsync","apply","_asyncToGenerator","introspect","evalModsAsync","sortMods","commands","order","allKeys","map","_ref","_ref2","_slicedToArray","completeOrder","_toConsumableArray","Set","concat","sorted","_loop","group","shift","commandSet","find","_ref3","_ref4","push","orders","ios","android","_x3","_x4","_evalModsAsync","_ref5","projectRoot","platforms","assertMissingModProviders","_ref6","entries","_config$mods","_ref7","platformName","includes","_ref8","_ref9","name","join","platformProjectRoot","projectName","getHackyProjectName","_ref10","_ref11","modName","mod","modRequest","isProvider","errorMessage","PluginError","addWarningForPlatform","results","modResults","assertModResults"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/plugins/mod-compiler.ts"],"sourcesContent":["import Debug from 'debug';\nimport path from 'path';\n\nimport { ExportedConfig, Mod, ModConfig, ModPlatform } from '../Plugin.types';\nimport { getHackyProjectName } from '../ios/utils/Xcodeproj';\nimport { PluginError } from '../utils/errors';\nimport * as Warnings from '../utils/warnings';\nimport { assertModResults, ForwardedBaseModOptions } from './createBaseMod';\nimport { withAndroidBaseMods } from './withAndroidBaseMods';\nimport { withIosBaseMods } from './withIosBaseMods';\n\nconst debug = Debug('expo:config-plugins:mod-compiler');\n\nexport function withDefaultBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, props);\n  config = withAndroidBaseMods(config, props);\n  return config;\n}\n\n/**\n * Get a prebuild config that safely evaluates mods without persisting any changes to the file system.\n * Currently this only supports infoPlist, entitlements, androidManifest, strings, gradleProperties, and expoPlist mods.\n * This plugin should be evaluated directly:\n */\nexport function withIntrospectionBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, {\n    saveToInternal: true,\n    // This writing optimization can be skipped since we never write in introspection mode.\n    // Including empty mods will ensure that all mods get introspected.\n    skipEmptyMod: false,\n    ...props,\n  });\n  config = withAndroidBaseMods(config, {\n    saveToInternal: true,\n    skipEmptyMod: false,\n    ...props,\n  });\n\n  if (config.mods) {\n    // Remove all mods that don't have an introspection base mod, for instance `dangerous` mods.\n    for (const platform of Object.keys(config.mods) as ModPlatform[]) {\n      // const platformPreserve = preserve[platform];\n      for (const key of Object.keys(config.mods[platform] || {})) {\n        // @ts-ignore\n        if (!config.mods[platform]?.[key]?.isIntrospective) {\n          debug(`removing non-idempotent mod: ${platform}.${key}`);\n          // @ts-ignore\n          delete config.mods[platform]?.[key];\n        }\n      }\n    }\n  }\n\n  return config;\n}\n\n/**\n *\n * @param projectRoot\n * @param config\n */\nexport async function compileModsAsync(\n  config: ExportedConfig,\n  props: {\n    projectRoot: string;\n    platforms?: ModPlatform[];\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n  }\n): Promise<ExportedConfig> {\n  if (props.introspect === true) {\n    config = withIntrospectionBaseMods(config);\n  } else {\n    config = withDefaultBaseMods(config);\n  }\n  return await evalModsAsync(config, props);\n}\n\nfunction sortMods(commands: [string, any][], order: string[]): [string, any][] {\n  const allKeys = commands.map(([key]) => key);\n  const completeOrder = [...new Set([...order, ...allKeys])];\n  const sorted: [string, any][] = [];\n  while (completeOrder.length) {\n    const group = completeOrder.shift()!;\n    const commandSet = commands.find(([key]) => key === group);\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  }\n  return sorted;\n}\n\nconst orders: Record<string, string[]> = {\n  ios: [\n    // dangerous runs first\n    'dangerous',\n    // run the XcodeProject mod second because many plugins attempt to read from it.\n    'xcodeproj',\n  ],\n  android: ['dangerous'],\n};\n/**\n * A generic plugin compiler.\n *\n * @param config\n */\nexport async function evalModsAsync(\n  config: ExportedConfig,\n  {\n    projectRoot,\n    introspect,\n    platforms,\n    /**\n     * Throw errors when mods are missing providers.\n     * @default true\n     */\n    assertMissingModProviders,\n  }: {\n    projectRoot: string;\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n    platforms?: ModPlatform[];\n  }\n): Promise<ExportedConfig> {\n  for (const [platformName, platform] of Object.entries(config.mods ?? ({} as ModConfig))) {\n    if (platforms && !platforms.includes(platformName as any)) {\n      debug(`skip platform: ${platformName}`);\n      continue;\n    }\n\n    let entries = Object.entries(platform);\n    if (entries.length) {\n      // Move dangerous item to the first position if it exists, this ensures that all dangerous code runs first.\n      entries = sortMods(entries, orders[platformName]!);\n      debug(`run in order: ${entries.map(([name]) => name).join(', ')}`);\n      const platformProjectRoot = path.join(projectRoot, platformName);\n      const projectName =\n        platformName === 'ios' ? getHackyProjectName(projectRoot, config) : undefined;\n\n      for (const [modName, mod] of entries) {\n        const modRequest = {\n          projectRoot,\n          projectName,\n          platformProjectRoot,\n          platform: platformName as ModPlatform,\n          modName,\n          introspect: !!introspect,\n        };\n\n        if (!(mod as Mod).isProvider) {\n          // In strict mode, throw an error.\n          const errorMessage = `Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods`;\n          if (assertMissingModProviders !== false) {\n            throw new PluginError(errorMessage, 'MISSING_PROVIDER');\n          } else {\n            Warnings.addWarningForPlatform(\n              platformName as ModPlatform,\n              `${platformName}.${modName}`,\n              `Skipping: Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.`\n            );\n            // In loose mode, just skip the mod entirely.\n            continue;\n          }\n        }\n\n        const results = await (mod as Mod)({\n          ...config,\n          modResults: null,\n          modRequest,\n        });\n\n        // Sanity check to help locate non compliant mods.\n        config = assertModResults(results, platformName, modName);\n        // @ts-ignore: data is added for modifications\n        delete config.modResults;\n        // @ts-ignore: info is added for modifications\n        delete config.modRequest;\n      }\n    }\n  }\n\n  return config;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}