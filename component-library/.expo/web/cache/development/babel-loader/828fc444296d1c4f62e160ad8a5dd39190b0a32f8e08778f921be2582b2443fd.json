{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadImage = exports.downloadOrUseCachedImage = void 0;\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\nvar jimp_compact_1 = __importDefault(require(\"jimp-compact\"));\nvar node_fetch_1 = __importDefault(require(\"node-fetch\"));\nvar path_1 = __importDefault(require(\"path\"));\nvar stream_1 = __importDefault(require(\"stream\"));\nvar tempy_1 = __importDefault(require(\"tempy\"));\nvar util_1 = __importDefault(require(\"util\"));\nvar cacheDownloadedKeys = {};\nfunction stripQueryParams(url) {\n  return url.split('?')[0].split('#')[0];\n}\nfunction downloadOrUseCachedImage(_x) {\n  return _downloadOrUseCachedImage.apply(this, arguments);\n}\nfunction _downloadOrUseCachedImage() {\n  _downloadOrUseCachedImage = _asyncToGenerator(function* (url) {\n    if (url in cacheDownloadedKeys) {\n      return cacheDownloadedKeys[url];\n    }\n    if (url.startsWith('http')) {\n      cacheDownloadedKeys[url] = yield downloadImage(url);\n    } else {\n      cacheDownloadedKeys[url] = url;\n    }\n    return cacheDownloadedKeys[url];\n  });\n  return _downloadOrUseCachedImage.apply(this, arguments);\n}\nexports.downloadOrUseCachedImage = downloadOrUseCachedImage;\nfunction downloadImage(_x2) {\n  return _downloadImage.apply(this, arguments);\n}\nfunction _downloadImage() {\n  _downloadImage = _asyncToGenerator(function* (url) {\n    var outputPath = tempy_1.default.directory();\n    var response = yield (0, node_fetch_1.default)(url);\n    if (!response.ok) {\n      throw new Error(\"It was not possible to download image from '\" + url + \"'\");\n    }\n    var streamPipeline = util_1.default.promisify(stream_1.default.pipeline);\n    var localPath = path_1.default.join(outputPath, path_1.default.basename(stripQueryParams(url)));\n    yield streamPipeline(response.body, fs_extra_1.default.createWriteStream(localPath));\n    var img = yield jimp_compact_1.default.read(localPath);\n    var mime = img.getMIME().split('/').pop();\n    if (!localPath.endsWith(mime)) {\n      var newPath = path_1.default.join(outputPath, \"image.\" + mime);\n      yield fs_extra_1.default.move(localPath, newPath);\n      return newPath;\n    }\n    return localPath;\n  });\n  return _downloadImage.apply(this, arguments);\n}\nexports.downloadImage = downloadImage;","map":{"version":3,"names":["fs_extra_1","__importDefault","require","jimp_compact_1","node_fetch_1","path_1","stream_1","tempy_1","util_1","cacheDownloadedKeys","stripQueryParams","url","split","downloadOrUseCachedImage","_x","_downloadOrUseCachedImage","apply","arguments","_asyncToGenerator","startsWith","downloadImage","exports","_x2","_downloadImage","outputPath","default","directory","response","ok","Error","streamPipeline","promisify","pipeline","localPath","join","basename","body","createWriteStream","img","read","mime","getMIME","pop","endsWith","newPath","move"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/expo-pwa/node_modules/@expo/image-utils/src/Download.ts"],"sourcesContent":["import fs from 'fs-extra';\n// @ts-ignore\nimport Jimp from 'jimp-compact';\nimport fetch from 'node-fetch';\nimport path from 'path';\nimport stream from 'stream';\nimport temporary from 'tempy';\nimport util from 'util';\n\n// cache downloaded images into memory\nconst cacheDownloadedKeys: Record<string, string> = {};\n\nfunction stripQueryParams(url: string): string {\n  return url.split('?')[0].split('#')[0];\n}\n\nexport async function downloadOrUseCachedImage(url: string): Promise<string> {\n  if (url in cacheDownloadedKeys) {\n    return cacheDownloadedKeys[url];\n  }\n  if (url.startsWith('http')) {\n    cacheDownloadedKeys[url] = await downloadImage(url);\n  } else {\n    cacheDownloadedKeys[url] = url;\n  }\n  return cacheDownloadedKeys[url];\n}\n\nexport async function downloadImage(url: string): Promise<string> {\n  const outputPath = temporary.directory();\n\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(`It was not possible to download image from '${url}'`);\n  }\n\n  // Download to local file\n  const streamPipeline = util.promisify(stream.pipeline);\n  const localPath = path.join(outputPath, path.basename(stripQueryParams(url)));\n  await streamPipeline(response.body, fs.createWriteStream(localPath));\n\n  // If an image URL doesn't have a name, get the mime type and move the file.\n  const img = await Jimp.read(localPath);\n  const mime = img.getMIME().split('/').pop()!;\n  if (!localPath.endsWith(mime)) {\n    const newPath = path.join(outputPath, `image.${mime}`);\n    await fs.move(localPath, newPath);\n    return newPath;\n  }\n\n  return localPath;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}