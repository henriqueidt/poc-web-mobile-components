{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PORTRAIT_ORIENTATIONS = exports.LANDSCAPE_ORIENTATIONS = void 0;\nexports.getOrientation = getOrientation;\nexports.setOrientation = setOrientation;\nexports.withOrientation = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nvar withOrientation = (0, _iosPlugins().createInfoPlistPlugin)(setOrientation, 'withOrientation');\nexports.withOrientation = withOrientation;\nfunction getOrientation(config) {\n  var _config$orientation;\n  return (_config$orientation = config.orientation) !== null && _config$orientation !== void 0 ? _config$orientation : null;\n}\nvar PORTRAIT_ORIENTATIONS = ['UIInterfaceOrientationPortrait', 'UIInterfaceOrientationPortraitUpsideDown'];\nexports.PORTRAIT_ORIENTATIONS = PORTRAIT_ORIENTATIONS;\nvar LANDSCAPE_ORIENTATIONS = ['UIInterfaceOrientationLandscapeLeft', 'UIInterfaceOrientationLandscapeRight'];\nexports.LANDSCAPE_ORIENTATIONS = LANDSCAPE_ORIENTATIONS;\nfunction getUISupportedInterfaceOrientations(orientation) {\n  if (orientation === 'portrait') {\n    return PORTRAIT_ORIENTATIONS;\n  } else if (orientation === 'landscape') {\n    return LANDSCAPE_ORIENTATIONS;\n  } else {\n    return [].concat(PORTRAIT_ORIENTATIONS, LANDSCAPE_ORIENTATIONS);\n  }\n}\nfunction setOrientation(config, infoPlist) {\n  var orientation = getOrientation(config);\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    UISupportedInterfaceOrientations: getUISupportedInterfaceOrientations(orientation)\n  });\n}","map":{"version":3,"names":["_iosPlugins","data","require","withOrientation","createInfoPlistPlugin","setOrientation","getOrientation","config","_config$orientation","orientation","PORTRAIT_ORIENTATIONS","LANDSCAPE_ORIENTATIONS","getUISupportedInterfaceOrientations","concat","infoPlist","_objectSpread","UISupportedInterfaceOrientations"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/ios/Orientation.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { InfoPlist, InterfaceOrientation } from './IosConfig.types';\n\nexport const withOrientation = createInfoPlistPlugin(setOrientation, 'withOrientation');\n\nexport function getOrientation(config: Pick<ExpoConfig, 'orientation'>) {\n  return config.orientation ?? null;\n}\n\nexport const PORTRAIT_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n];\n\nexport const LANDSCAPE_ORIENTATIONS: InterfaceOrientation[] = [\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction getUISupportedInterfaceOrientations(orientation: string | null): InterfaceOrientation[] {\n  if (orientation === 'portrait') {\n    return PORTRAIT_ORIENTATIONS;\n  } else if (orientation === 'landscape') {\n    return LANDSCAPE_ORIENTATIONS;\n  } else {\n    return [...PORTRAIT_ORIENTATIONS, ...LANDSCAPE_ORIENTATIONS];\n  }\n}\n\nexport function setOrientation(\n  config: Pick<ExpoConfig, 'orientation'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const orientation = getOrientation(config);\n\n  return {\n    ...infoPlist,\n    UISupportedInterfaceOrientations: getUISupportedInterfaceOrientations(orientation),\n  };\n}\n"],"mappings":";;;;;;;;;;;;AAEA,SAAAA,YAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,WAAA,YAAAA,YAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGO,IAAME,eAAe,GAAG,IAAAH,WAAA,GAAAI,qBAAA,EAAsBC,cAAtB,EAAsC,iBAAtC,CAAxB;;AAEA,SAASC,cAATA,CAAwBC,MAAxB,EAAiE;EAAA,IAAAC,mBAAA;EACtE,QAAAA,mBAAA,GAAOD,MAAM,CAACE,WAAd,cAAAD,mBAAA,cAAAA,mBAAA,GAA6B,IAA7B;AACD;AAEM,IAAME,qBAA6C,GAAG,CAC3D,gCAD2D,EAE3D,0CAF2D,CAAtD;;AAKA,IAAMC,sBAA8C,GAAG,CAC5D,qCAD4D,EAE5D,sCAF4D,CAAvD;;AAKP,SAASC,mCAATA,CAA6CH,WAA7C,EAAiG;EAC/F,IAAIA,WAAW,KAAK,UAApB,EAAgC;IAC9B,OAAOC,qBAAP;EACD,CAFD,MAEO,IAAID,WAAW,KAAK,WAApB,EAAiC;IACtC,OAAOE,sBAAP;EACD,CAFM,MAEA;IACL,UAAAE,MAAA,CAAWH,qBAAJ,EAA8BC,sBAA9B;EACR;AACF;AAEM,SAASN,cAATA,CACLE,MADK,EAELO,SAFK,EAGM;EACX,IAAML,WAAW,GAAGH,cAAc,CAACC,MAAD,CAAlC;EAEA,OAAAQ,aAAA,CAAAA,aAAA,KACKD,SADE;IAELE,gCAAgC,EAAEJ,mCAAmC,CAACH,WAAD;EAAA;AAExE"},"metadata":{},"sourceType":"script","externalDependencies":[]}