{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.escapeAndroidString = escapeAndroidString;\nexports.format = format;\nexports.parseXMLAsync = parseXMLAsync;\nexports.readXMLAsync = readXMLAsync;\nexports.unescapeAndroidString = unescapeAndroidString;\nexports.writeXMLAsync = writeXMLAsync;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _os() {\n  var data = require(\"os\");\n  _os = function _os() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _xml2js() {\n  var data = require(\"xml2js\");\n  _xml2js = function _xml2js() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction writeXMLAsync(_x) {\n  return _writeXMLAsync.apply(this, arguments);\n}\nfunction _writeXMLAsync() {\n  _writeXMLAsync = _asyncToGenerator(function* (options) {\n    var xml = format(options.xml);\n    yield _fs().default.promises.mkdir(_path().default.dirname(options.path), {\n      recursive: true\n    });\n    yield _fs().default.promises.writeFile(options.path, xml);\n  });\n  return _writeXMLAsync.apply(this, arguments);\n}\nfunction readXMLAsync(_x2) {\n  return _readXMLAsync.apply(this, arguments);\n}\nfunction _readXMLAsync() {\n  _readXMLAsync = _asyncToGenerator(function* (options) {\n    var _manifest$resources;\n    var contents = '';\n    try {\n      contents = yield _fs().default.promises.readFile(options.path, {\n        encoding: 'utf8',\n        flag: 'r'\n      });\n    } catch (_unused) {}\n    var parser = new (_xml2js().Parser)();\n    var manifest = yield parser.parseStringPromise(contents || options.fallback || '');\n    if (Array.isArray(manifest === null || manifest === void 0 ? void 0 : (_manifest$resources = manifest.resources) === null || _manifest$resources === void 0 ? void 0 : _manifest$resources.string)) {\n      for (var string of manifest === null || manifest === void 0 ? void 0 : (_manifest$resources2 = manifest.resources) === null || _manifest$resources2 === void 0 ? void 0 : _manifest$resources2.string) {\n        var _manifest$resources2;\n        if (string.$.translatable === 'false' || string.$.translatable === false) {\n          continue;\n        }\n        string._ = unescapeAndroidString(string._);\n      }\n    }\n    return manifest;\n  });\n  return _readXMLAsync.apply(this, arguments);\n}\nfunction parseXMLAsync(_x3) {\n  return _parseXMLAsync.apply(this, arguments);\n}\nfunction _parseXMLAsync() {\n  _parseXMLAsync = _asyncToGenerator(function* (contents) {\n    var xml = yield new (_xml2js().Parser)().parseStringPromise(contents);\n    return xml;\n  });\n  return _parseXMLAsync.apply(this, arguments);\n}\nvar stringTimesN = function stringTimesN(n, char) {\n  return Array(n + 1).join(char);\n};\nfunction format(manifest) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$indentLevel = _ref.indentLevel,\n    indentLevel = _ref$indentLevel === void 0 ? 2 : _ref$indentLevel,\n    _ref$newline = _ref.newline,\n    newline = _ref$newline === void 0 ? _os().EOL : _ref$newline;\n  var xmlInput;\n  if (typeof manifest === 'string') {\n    xmlInput = manifest;\n  } else if (manifest.toString) {\n    var _manifest$resources3;\n    var builder = new (_xml2js().Builder)({\n      headless: true\n    });\n    if (Array.isArray(manifest === null || manifest === void 0 ? void 0 : (_manifest$resources3 = manifest.resources) === null || _manifest$resources3 === void 0 ? void 0 : _manifest$resources3.string)) {\n      for (var string of manifest === null || manifest === void 0 ? void 0 : (_manifest$resources4 = manifest.resources) === null || _manifest$resources4 === void 0 ? void 0 : _manifest$resources4.string) {\n        var _manifest$resources4;\n        if (string.$.translatable === 'false' || string.$.translatable === false) {\n          continue;\n        }\n        string._ = escapeAndroidString(string._);\n      }\n    }\n    xmlInput = builder.buildObject(manifest);\n    return xmlInput;\n  } else {\n    throw new Error(\"Invalid XML value passed in: \" + manifest);\n  }\n  var indentString = stringTimesN(indentLevel, ' ');\n  var formatted = '';\n  var regex = /(>)(<)(\\/*)/g;\n  var xml = xmlInput.replace(regex, \"$1\" + newline + \"$2$3\");\n  var pad = 0;\n  xml.split(/\\r?\\n/).map(function (line) {\n    return line.trim();\n  }).forEach(function (line) {\n    var indent = 0;\n    if (line.match(/.+<\\/\\w[^>]*>$/)) {\n      indent = 0;\n    } else if (line.match(/^<\\/\\w/)) {\n      if (pad !== 0) {\n        pad -= 1;\n      }\n    } else if (line.match(/^<\\w([^>]*[^/])?>.*$/)) {\n      indent = 1;\n    } else {\n      indent = 0;\n    }\n    var padding = stringTimesN(pad, indentString);\n    formatted += padding + line + newline;\n    pad += indent;\n  });\n  return formatted.trim();\n}\nfunction escapeAndroidString(value) {\n  value = value.replace(/[\\n\\r\\t'\"@]/g, function (m) {\n    switch (m) {\n      case '\"':\n      case \"'\":\n      case '@':\n        return '\\\\' + m;\n      case '\\n':\n        return '\\\\n';\n      case '\\r':\n        return '\\\\r';\n      case '\\t':\n        return '\\\\t';\n      default:\n        throw new Error(\"Cannot escape unhandled XML character: \" + m);\n    }\n  });\n  if (value.match(/(^\\s|\\s$)/)) {\n    value = '\"' + value + '\"';\n  }\n  return value;\n}\nfunction unescapeAndroidString(value) {\n  return value.replace(/\\\\(.)/g, '$1');\n}","map":{"version":3,"names":["_fs","data","_interopRequireDefault","require","_os","_path","_xml2js","writeXMLAsync","_x","_writeXMLAsync","apply","arguments","_asyncToGenerator","options","xml","format","default","promises","mkdir","dirname","path","recursive","writeFile","readXMLAsync","_x2","_readXMLAsync","_manifest$resources","contents","readFile","encoding","flag","_unused","parser","Parser","manifest","parseStringPromise","fallback","Array","isArray","resources","string","_manifest$resources2","$","translatable","_","unescapeAndroidString","parseXMLAsync","_x3","_parseXMLAsync","stringTimesN","n","char","join","_ref","length","undefined","_ref$indentLevel","indentLevel","_ref$newline","newline","EOL","xmlInput","toString","_manifest$resources3","builder","Builder","headless","_manifest$resources4","escapeAndroidString","buildObject","Error","indentString","formatted","regex","replace","pad","split","map","line","trim","forEach","indent","match","padding","value","m"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/utils/XML.ts"],"sourcesContent":["import fs from 'fs';\nimport { EOL } from 'os';\nimport path from 'path';\nimport { Builder, Parser } from 'xml2js';\n\nexport type XMLValue = boolean | number | string | null | XMLArray | XMLObject;\n\nexport interface XMLArray extends Array<XMLValue> {}\n\nexport interface XMLObject {\n  [key: string]: XMLValue | undefined;\n}\n\nexport async function writeXMLAsync(options: { path: string; xml: any }): Promise<void> {\n  const xml = format(options.xml);\n  await fs.promises.mkdir(path.dirname(options.path), { recursive: true });\n  await fs.promises.writeFile(options.path, xml);\n}\n\nexport async function readXMLAsync(options: {\n  path: string;\n  fallback?: string | null;\n}): Promise<XMLObject> {\n  let contents: string = '';\n  try {\n    contents = await fs.promises.readFile(options.path, { encoding: 'utf8', flag: 'r' });\n  } catch {\n    // catch and use fallback\n  }\n  const parser = new Parser();\n  const manifest = await parser.parseStringPromise(contents || options.fallback || '');\n\n  // For strings.xml\n  if (Array.isArray(manifest?.resources?.string)) {\n    for (const string of manifest?.resources?.string) {\n      if (string.$.translatable === 'false' || string.$.translatable === false) {\n        continue;\n      }\n      string._ = unescapeAndroidString(string._);\n    }\n  }\n\n  return manifest;\n}\n\nexport async function parseXMLAsync(contents: string): Promise<XMLObject> {\n  const xml = await new Parser().parseStringPromise(contents);\n  return xml;\n}\n\nconst stringTimesN = (n: number, char: string) => Array(n + 1).join(char);\n\nexport function format(manifest: any, { indentLevel = 2, newline = EOL } = {}): string {\n  let xmlInput: string;\n  if (typeof manifest === 'string') {\n    xmlInput = manifest;\n  } else if (manifest.toString) {\n    const builder = new Builder({\n      headless: true,\n    });\n\n    // For strings.xml\n    if (Array.isArray(manifest?.resources?.string)) {\n      for (const string of manifest?.resources?.string) {\n        if (string.$.translatable === 'false' || string.$.translatable === false) {\n          continue;\n        }\n        string._ = escapeAndroidString(string._);\n      }\n    }\n\n    xmlInput = builder.buildObject(manifest);\n\n    return xmlInput;\n  } else {\n    throw new Error(`Invalid XML value passed in: ${manifest}`);\n  }\n  const indentString = stringTimesN(indentLevel, ' ');\n\n  let formatted = '';\n  const regex = /(>)(<)(\\/*)/g;\n  const xml = xmlInput.replace(regex, `$1${newline}$2$3`);\n  let pad = 0;\n  xml\n    .split(/\\r?\\n/)\n    .map((line: string) => line.trim())\n    .forEach((line: string) => {\n      let indent = 0;\n      if (line.match(/.+<\\/\\w[^>]*>$/)) {\n        indent = 0;\n      } else if (line.match(/^<\\/\\w/)) {\n        if (pad !== 0) {\n          pad -= 1;\n        }\n      } else if (line.match(/^<\\w([^>]*[^/])?>.*$/)) {\n        indent = 1;\n      } else {\n        indent = 0;\n      }\n\n      const padding = stringTimesN(pad, indentString);\n      formatted += padding + line + newline;\n      pad += indent;\n    });\n\n  return formatted.trim();\n}\n\n/**\n * Escapes Android string literals, specifically characters `\"`, `'`, `\\`, `\\n`, `\\r`, `\\t`\n *\n * @param value unescaped Android XML string literal.\n */\nexport function escapeAndroidString(value: string): string {\n  value = value.replace(/[\\n\\r\\t'\"@]/g, m => {\n    switch (m) {\n      case '\"':\n      case \"'\":\n      case '@':\n        return '\\\\' + m;\n      case '\\n':\n        return '\\\\n';\n      case '\\r':\n        return '\\\\r';\n      case '\\t':\n        return '\\\\t';\n      default:\n        throw new Error(`Cannot escape unhandled XML character: ${m}`);\n    }\n  });\n  if (value.match(/(^\\s|\\s$)/)) {\n    value = '\"' + value + '\"';\n  }\n  return value;\n}\n\nexport function unescapeAndroidString(value: string): string {\n  return value.replace(/\\\\(.)/g, '$1');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}