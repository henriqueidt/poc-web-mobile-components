{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getApplicationTargetNameForSchemeAsync = getApplicationTargetNameForSchemeAsync;\nexports.getArchiveBuildConfigurationForSchemeAsync = getArchiveBuildConfigurationForSchemeAsync;\nexports.getRunnableSchemesFromXcodeproj = getRunnableSchemesFromXcodeproj;\nexports.getSchemesFromXcodeproj = getSchemesFromXcodeproj;\nfunction _XML() {\n  var data = require(\"../utils/XML\");\n  _XML = function _XML() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _Target() {\n  var data = require(\"./Target\");\n  _Target = function _Target() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction getSchemesFromXcodeproj(projectRoot) {\n  return (0, _Paths().findSchemeNames)(projectRoot);\n}\nfunction getRunnableSchemesFromXcodeproj(projectRoot) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$configuration = _ref.configuration,\n    configuration = _ref$configuration === void 0 ? 'Debug' : _ref$configuration;\n  var project = (0, _Xcodeproj().getPbxproj)(projectRoot);\n  return (0, _Target().findSignableTargets)(project).map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      target = _ref3[1];\n    var osType = 'iOS';\n    var type = (0, _Xcodeproj().unquote)(target.productType);\n    if (type === _Target().TargetType.APPLICATION) {\n      var xcConfigurationList = project.hash.project.objects.XCConfigurationList[target.buildConfigurationList];\n      if (xcConfigurationList) {\n        var buildConfiguration = xcConfigurationList.buildConfigurations.find(function (value) {\n          return value.comment === configuration;\n        }) || xcConfigurationList.buildConfigurations[0];\n        if (buildConfiguration !== null && buildConfiguration !== void 0 && buildConfiguration.value) {\n          var _project$hash$project;\n          var xcBuildConfiguration = (_project$hash$project = project.hash.project.objects.XCBuildConfiguration) === null || _project$hash$project === void 0 ? void 0 : _project$hash$project[buildConfiguration.value];\n          var buildSdkRoot = xcBuildConfiguration.buildSettings.SDKROOT;\n          if (buildSdkRoot === 'appletvos' || 'TVOS_DEPLOYMENT_TARGET' in xcBuildConfiguration.buildSettings) {\n            osType = 'tvOS';\n          } else if (buildSdkRoot === 'iphoneos') {\n            osType = 'iOS';\n          }\n        }\n      }\n    } else if (type === _Target().TargetType.WATCH) {\n      osType = 'watchOS';\n    }\n    return {\n      name: (0, _Xcodeproj().unquote)(target.name),\n      osType: osType,\n      type: (0, _Xcodeproj().unquote)(target.productType)\n    };\n  });\n}\nfunction readSchemeAsync(_x, _x2) {\n  return _readSchemeAsync.apply(this, arguments);\n}\nfunction _readSchemeAsync() {\n  _readSchemeAsync = _asyncToGenerator(function* (projectRoot, scheme) {\n    var allSchemePaths = (0, _Paths().findSchemePaths)(projectRoot);\n    var re = new RegExp(\"/\" + scheme + \".xcscheme\", 'i');\n    var schemePath = allSchemePaths.find(function (i) {\n      return re.exec(i);\n    });\n    if (schemePath) {\n      return yield (0, _XML().readXMLAsync)({\n        path: schemePath\n      });\n    } else {\n      throw new Error(\"scheme '\" + scheme + \"' does not exist, make sure it's marked as shared\");\n    }\n  });\n  return _readSchemeAsync.apply(this, arguments);\n}\nfunction getApplicationTargetNameForSchemeAsync(_x3, _x4) {\n  return _getApplicationTargetNameForSchemeAsync.apply(this, arguments);\n}\nfunction _getApplicationTargetNameForSchemeAsync() {\n  _getApplicationTargetNameForSchemeAsync = _asyncToGenerator(function* (projectRoot, scheme) {\n    var _schemeXML$Scheme, _schemeXML$Scheme$Bui, _schemeXML$Scheme$Bui2, _schemeXML$Scheme$Bui3, _schemeXML$Scheme$Bui4;\n    var schemeXML = yield readSchemeAsync(projectRoot, scheme);\n    var buildActionEntry = schemeXML === null || schemeXML === void 0 ? void 0 : (_schemeXML$Scheme = schemeXML.Scheme) === null || _schemeXML$Scheme === void 0 ? void 0 : (_schemeXML$Scheme$Bui = _schemeXML$Scheme.BuildAction) === null || _schemeXML$Scheme$Bui === void 0 ? void 0 : (_schemeXML$Scheme$Bui2 = _schemeXML$Scheme$Bui[0]) === null || _schemeXML$Scheme$Bui2 === void 0 ? void 0 : (_schemeXML$Scheme$Bui3 = _schemeXML$Scheme$Bui2.BuildActionEntries) === null || _schemeXML$Scheme$Bui3 === void 0 ? void 0 : (_schemeXML$Scheme$Bui4 = _schemeXML$Scheme$Bui3[0]) === null || _schemeXML$Scheme$Bui4 === void 0 ? void 0 : _schemeXML$Scheme$Bui4.BuildActionEntry;\n    var targetName = (buildActionEntry === null || buildActionEntry === void 0 ? void 0 : buildActionEntry.length) === 1 ? getBlueprintName(buildActionEntry[0]) : getBlueprintName(buildActionEntry === null || buildActionEntry === void 0 ? void 0 : buildActionEntry.find(function (entry) {\n      var _entry$BuildableRefer, _entry$BuildableRefer2, _entry$BuildableRefer3, _entry$BuildableRefer4;\n      return (_entry$BuildableRefer = entry.BuildableReference) === null || _entry$BuildableRefer === void 0 ? void 0 : (_entry$BuildableRefer2 = _entry$BuildableRefer[0]) === null || _entry$BuildableRefer2 === void 0 ? void 0 : (_entry$BuildableRefer3 = _entry$BuildableRefer2['$']) === null || _entry$BuildableRefer3 === void 0 ? void 0 : (_entry$BuildableRefer4 = _entry$BuildableRefer3.BuildableName) === null || _entry$BuildableRefer4 === void 0 ? void 0 : _entry$BuildableRefer4.endsWith('.app');\n    }));\n    if (!targetName) {\n      throw new Error(scheme + \".xcscheme seems to be corrupted\");\n    }\n    return targetName;\n  });\n  return _getApplicationTargetNameForSchemeAsync.apply(this, arguments);\n}\nfunction getArchiveBuildConfigurationForSchemeAsync(_x5, _x6) {\n  return _getArchiveBuildConfigurationForSchemeAsync.apply(this, arguments);\n}\nfunction _getArchiveBuildConfigurationForSchemeAsync() {\n  _getArchiveBuildConfigurationForSchemeAsync = _asyncToGenerator(function* (projectRoot, scheme) {\n    var _schemeXML$Scheme2, _schemeXML$Scheme2$Ar, _schemeXML$Scheme2$Ar2, _schemeXML$Scheme2$Ar3;\n    var schemeXML = yield readSchemeAsync(projectRoot, scheme);\n    var buildConfiguration = schemeXML === null || schemeXML === void 0 ? void 0 : (_schemeXML$Scheme2 = schemeXML.Scheme) === null || _schemeXML$Scheme2 === void 0 ? void 0 : (_schemeXML$Scheme2$Ar = _schemeXML$Scheme2.ArchiveAction) === null || _schemeXML$Scheme2$Ar === void 0 ? void 0 : (_schemeXML$Scheme2$Ar2 = _schemeXML$Scheme2$Ar[0]) === null || _schemeXML$Scheme2$Ar2 === void 0 ? void 0 : (_schemeXML$Scheme2$Ar3 = _schemeXML$Scheme2$Ar2['$']) === null || _schemeXML$Scheme2$Ar3 === void 0 ? void 0 : _schemeXML$Scheme2$Ar3.buildConfiguration;\n    if (!buildConfiguration) {\n      throw new Error(scheme + \".xcscheme seems to be corrupted\");\n    }\n    return buildConfiguration;\n  });\n  return _getArchiveBuildConfigurationForSchemeAsync.apply(this, arguments);\n}\nfunction getBlueprintName(entry) {\n  var _entry$BuildableRefer5, _entry$BuildableRefer6, _entry$BuildableRefer7;\n  return entry === null || entry === void 0 ? void 0 : (_entry$BuildableRefer5 = entry.BuildableReference) === null || _entry$BuildableRefer5 === void 0 ? void 0 : (_entry$BuildableRefer6 = _entry$BuildableRefer5[0]) === null || _entry$BuildableRefer6 === void 0 ? void 0 : (_entry$BuildableRefer7 = _entry$BuildableRefer6['$']) === null || _entry$BuildableRefer7 === void 0 ? void 0 : _entry$BuildableRefer7.BlueprintName;\n}","map":{"version":3,"names":["_XML","data","require","_Paths","_Target","_Xcodeproj","getSchemesFromXcodeproj","projectRoot","findSchemeNames","getRunnableSchemesFromXcodeproj","_ref","arguments","length","undefined","_ref$configuration","configuration","project","getPbxproj","findSignableTargets","map","_ref2","_ref3","_slicedToArray","target","osType","type","unquote","productType","TargetType","APPLICATION","xcConfigurationList","hash","objects","XCConfigurationList","buildConfigurationList","buildConfiguration","buildConfigurations","find","value","comment","_project$hash$project","xcBuildConfiguration","XCBuildConfiguration","buildSdkRoot","buildSettings","SDKROOT","WATCH","name","readSchemeAsync","_x","_x2","_readSchemeAsync","apply","_asyncToGenerator","scheme","allSchemePaths","findSchemePaths","re","RegExp","schemePath","i","exec","readXMLAsync","path","Error","getApplicationTargetNameForSchemeAsync","_x3","_x4","_getApplicationTargetNameForSchemeAsync","_schemeXML$Scheme","_schemeXML$Scheme$Bui","_schemeXML$Scheme$Bui2","_schemeXML$Scheme$Bui3","_schemeXML$Scheme$Bui4","schemeXML","buildActionEntry","Scheme","BuildAction","BuildActionEntries","BuildActionEntry","targetName","getBlueprintName","entry","_entry$BuildableRefer","_entry$BuildableRefer2","_entry$BuildableRefer3","_entry$BuildableRefer4","BuildableReference","BuildableName","endsWith","getArchiveBuildConfigurationForSchemeAsync","_x5","_x6","_getArchiveBuildConfigurationForSchemeAsync","_schemeXML$Scheme2","_schemeXML$Scheme2$Ar","_schemeXML$Scheme2$Ar2","_schemeXML$Scheme2$Ar3","ArchiveAction","_entry$BuildableRefer5","_entry$BuildableRefer6","_entry$BuildableRefer7","BlueprintName"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/ios/BuildScheme.ts"],"sourcesContent":["import { readXMLAsync } from '../utils/XML';\nimport { findSchemeNames, findSchemePaths } from './Paths';\nimport { findSignableTargets, TargetType } from './Target';\nimport { getPbxproj, unquote } from './utils/Xcodeproj';\n\ninterface SchemeXML {\n  Scheme?: {\n    BuildAction?: {\n      BuildActionEntries?: {\n        BuildActionEntry?: BuildActionEntryType[];\n      }[];\n    }[];\n    ArchiveAction?: {\n      $?: {\n        buildConfiguration?: string;\n      };\n    }[];\n  };\n}\n\ninterface BuildActionEntryType {\n  BuildableReference?: {\n    $?: {\n      BlueprintName?: string;\n      BuildableName?: string;\n    };\n  }[];\n}\n\nexport function getSchemesFromXcodeproj(projectRoot: string): string[] {\n  return findSchemeNames(projectRoot);\n}\n\nexport function getRunnableSchemesFromXcodeproj(\n  projectRoot: string,\n  { configuration = 'Debug' }: { configuration?: 'Debug' | 'Release' } = {}\n): { name: string; osType: string; type: string }[] {\n  const project = getPbxproj(projectRoot);\n\n  return findSignableTargets(project).map(([, target]) => {\n    let osType = 'iOS';\n    const type = unquote(target.productType);\n\n    if (type === TargetType.APPLICATION) {\n      // Attempt to resolve the platform SDK for each target so we can filter devices.\n      const xcConfigurationList =\n        project.hash.project.objects.XCConfigurationList[target.buildConfigurationList];\n\n      if (xcConfigurationList) {\n        const buildConfiguration =\n          xcConfigurationList.buildConfigurations.find(\n            (value: { comment: string; value: string }) => value.comment === configuration\n          ) || xcConfigurationList.buildConfigurations[0];\n        if (buildConfiguration?.value) {\n          const xcBuildConfiguration =\n            project.hash.project.objects.XCBuildConfiguration?.[buildConfiguration.value];\n\n          const buildSdkRoot = xcBuildConfiguration.buildSettings.SDKROOT;\n          if (\n            buildSdkRoot === 'appletvos' ||\n            'TVOS_DEPLOYMENT_TARGET' in xcBuildConfiguration.buildSettings\n          ) {\n            // Is a TV app...\n            osType = 'tvOS';\n          } else if (buildSdkRoot === 'iphoneos') {\n            osType = 'iOS';\n          }\n        }\n      }\n    } else if (type === TargetType.WATCH) {\n      osType = 'watchOS';\n    }\n\n    return {\n      name: unquote(target.name),\n      osType,\n      type: unquote(target.productType),\n    };\n  });\n}\n\nasync function readSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<SchemeXML | undefined> {\n  const allSchemePaths = findSchemePaths(projectRoot);\n  const re = new RegExp(`/${scheme}.xcscheme`, 'i');\n  const schemePath = allSchemePaths.find(i => re.exec(i));\n  if (schemePath) {\n    return ((await readXMLAsync({ path: schemePath })) as unknown) as SchemeXML | undefined;\n  } else {\n    throw new Error(`scheme '${scheme}' does not exist, make sure it's marked as shared`);\n  }\n}\n\nexport async function getApplicationTargetNameForSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<string> {\n  const schemeXML = await readSchemeAsync(projectRoot, scheme);\n  const buildActionEntry =\n    schemeXML?.Scheme?.BuildAction?.[0]?.BuildActionEntries?.[0]?.BuildActionEntry;\n  const targetName =\n    buildActionEntry?.length === 1\n      ? getBlueprintName(buildActionEntry[0])\n      : getBlueprintName(\n          buildActionEntry?.find(entry => {\n            return entry.BuildableReference?.[0]?.['$']?.BuildableName?.endsWith('.app');\n          })\n        );\n  if (!targetName) {\n    throw new Error(`${scheme}.xcscheme seems to be corrupted`);\n  }\n  return targetName;\n}\n\nexport async function getArchiveBuildConfigurationForSchemeAsync(\n  projectRoot: string,\n  scheme: string\n): Promise<string> {\n  const schemeXML = await readSchemeAsync(projectRoot, scheme);\n  const buildConfiguration = schemeXML?.Scheme?.ArchiveAction?.[0]?.['$']?.buildConfiguration;\n  if (!buildConfiguration) {\n    throw new Error(`${scheme}.xcscheme seems to be corrupted`);\n  }\n  return buildConfiguration;\n}\n\nfunction getBlueprintName(entry?: BuildActionEntryType): string | undefined {\n  return entry?.BuildableReference?.[0]?.['$']?.BlueprintName;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}