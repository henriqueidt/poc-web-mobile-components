{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"operation\", \"width\"],\n  _excluded2 = [\"operation\"];\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findSharpInstanceAsync = exports.sharpAsync = exports.isAvailableAsync = exports.resizeBufferAsync = void 0;\nvar spawn_async_1 = __importDefault(require(\"@expo/spawn-async\"));\nvar path_1 = __importDefault(require(\"path\"));\nvar resolve_from_1 = __importDefault(require(\"resolve-from\"));\nvar semver_1 = __importDefault(require(\"semver\"));\nvar env_1 = require(\"./env\");\nvar SHARP_HELP_PATTERN = /\\n\\nSpecify --help for available options/g;\nvar SHARP_REQUIRED_VERSION = '^2.1.0';\nfunction resizeBufferAsync(_x, _x2) {\n  return _resizeBufferAsync.apply(this, arguments);\n}\nfunction _resizeBufferAsync() {\n  _resizeBufferAsync = _asyncToGenerator(function* (buffer, sizes) {\n    var sharp = yield findSharpInstanceAsync();\n    var metadata = yield sharp(buffer).metadata();\n    var resizedBuffers = yield Promise.all(sizes.map(function (dimension) {\n      var density = dimension / Math.max(metadata.width, metadata.height) * metadata.density;\n      return sharp(buffer, {\n        density: isNaN(density) ? undefined : Math.ceil(density)\n      }).resize(dimension, dimension, {\n        fit: 'contain',\n        background: 'transparent'\n      }).toBuffer();\n    }));\n    return resizedBuffers;\n  });\n  return _resizeBufferAsync.apply(this, arguments);\n}\nexports.resizeBufferAsync = resizeBufferAsync;\nfunction isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    if (env_1.env.EXPO_IMAGE_UTILS_NO_SHARP) {\n      return false;\n    }\n    try {\n      return !!(yield findSharpBinAsync());\n    } catch (_unused) {\n      return false;\n    }\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexports.isAvailableAsync = isAvailableAsync;\nfunction sharpAsync(_x3) {\n  return _sharpAsync.apply(this, arguments);\n}\nfunction _sharpAsync() {\n  _sharpAsync = _asyncToGenerator(function* (options) {\n    var commands = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var bin = yield findSharpBinAsync();\n    try {\n      var _yield = yield (0, spawn_async_1.default)(bin, [].concat(_toConsumableArray(getOptions(options)), _toConsumableArray(getCommandOptions(commands)))),\n        stdout = _yield.stdout;\n      var outputFilePaths = stdout.trim().split('\\n');\n      return outputFilePaths;\n    } catch (error) {\n      if (error.stderr) {\n        throw new Error('\\nProcessing images using sharp-cli failed: ' + error.message + '\\nOutput: ' + error.stderr.replace(SHARP_HELP_PATTERN, ''));\n      } else {\n        throw error;\n      }\n    }\n  });\n  return _sharpAsync.apply(this, arguments);\n}\nexports.sharpAsync = sharpAsync;\nfunction getOptions(options) {\n  var args = [];\n  for (var _ref of Object.entries(options)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var key = _ref2[0];\n    var value = _ref2[1];\n    if (value != null && value !== false) {\n      if (typeof value === 'boolean') {\n        args.push(\"--\" + key);\n      } else if (typeof value === 'number') {\n        args.push(\"--\" + key, value.toFixed());\n      } else {\n        args.push(\"--\" + key, value);\n      }\n    }\n  }\n  return args;\n}\nfunction getCommandOptions(commands) {\n  var args = [];\n  for (var command of commands) {\n    if (command.operation === 'resize') {\n      var operation = command.operation,\n        width = command.width,\n        namedOptions = _objectWithoutProperties(command, _excluded);\n      args.push.apply(args, [operation, width.toFixed()].concat(_toConsumableArray(getOptions(namedOptions))));\n    } else {\n      var _operation = command.operation,\n        _namedOptions = _objectWithoutProperties(command, _excluded2);\n      args.push.apply(args, [_operation].concat(_toConsumableArray(getOptions(_namedOptions))));\n    }\n    args.push('--');\n  }\n  return args;\n}\nvar _sharpBin = null;\nvar _sharpInstance = null;\nfunction findSharpBinAsync() {\n  return _findSharpBinAsync.apply(this, arguments);\n}\nfunction _findSharpBinAsync() {\n  _findSharpBinAsync = _asyncToGenerator(function* () {\n    if (_sharpBin) {\n      return _sharpBin;\n    }\n    try {\n      var sharpCliPackage = require('sharp-cli/package.json');\n      var libVipsVersion = require('sharp').versions.vips;\n      if (sharpCliPackage && semver_1.default.satisfies(sharpCliPackage.version, SHARP_REQUIRED_VERSION) && typeof sharpCliPackage.bin.sharp === 'string' && typeof libVipsVersion === 'string') {\n        _sharpBin = require.resolve(\"sharp-cli/\" + sharpCliPackage.bin.sharp);\n        return _sharpBin;\n      }\n    } catch (_unused2) {}\n    var installedCliVersion;\n    try {\n      installedCliVersion = (yield (0, spawn_async_1.default)('sharp', ['--version'])).stdout.toString().trim();\n    } catch (_unused3) {\n      throw notFoundError(SHARP_REQUIRED_VERSION);\n    }\n    if (!semver_1.default.satisfies(installedCliVersion, SHARP_REQUIRED_VERSION)) {\n      showVersionMismatchWarning(SHARP_REQUIRED_VERSION, installedCliVersion);\n    }\n    _sharpBin = 'sharp';\n    return _sharpBin;\n  });\n  return _findSharpBinAsync.apply(this, arguments);\n}\nfunction findSharpInstanceAsync() {\n  return _findSharpInstanceAsync.apply(this, arguments);\n}\nfunction _findSharpInstanceAsync() {\n  _findSharpInstanceAsync = _asyncToGenerator(function* () {\n    if (env_1.env.EXPO_IMAGE_UTILS_NO_SHARP) {\n      throw new Error('Global instance of sharp-cli cannot be retrieved because sharp-cli has been disabled with the environment variable `EXPO_IMAGE_UTILS_NO_SHARP`');\n    }\n    if (_sharpInstance) {\n      return _sharpInstance;\n    }\n    yield findSharpBinAsync();\n    try {\n      var sharp = require('sharp');\n      _sharpInstance = sharp;\n      return sharp;\n    } catch (_unused4) {}\n    var sharpCliPath;\n    if (process.platform !== 'win32') {\n      try {\n        sharpCliPath = (yield (0, spawn_async_1.default)('which', ['sharp'])).stdout.toString().trim();\n      } catch (_unused5) {}\n    } else {\n      var yarnGlobalPath = '';\n      try {\n        yarnGlobalPath = path_1.default.join((yield (0, spawn_async_1.default)('yarn', ['global', 'dir'])).stdout.toString().trim(), 'node_modules');\n      } catch (_unused6) {}\n      try {\n        sharpCliPath = require.resolve('sharp-cli/package.json', {\n          paths: (require.resolve.paths('sharp-cli') || []).concat(yarnGlobalPath)\n        });\n      } catch (_unused7) {}\n    }\n    var sharpPath = resolve_from_1.default.silent(sharpCliPath || '', 'sharp');\n    if (sharpPath) {\n      try {\n        _sharpInstance = require(sharpPath);\n      } catch (_unused8) {}\n    }\n    if (!_sharpInstance) {\n      throw new Error(\"Failed to find the instance of sharp used by the global sharp-cli package.\");\n    }\n    return _sharpInstance;\n  });\n  return _findSharpInstanceAsync.apply(this, arguments);\n}\nexports.findSharpInstanceAsync = findSharpInstanceAsync;\nfunction notFoundError(requiredCliVersion) {\n  return new Error(\"This command requires version \" + requiredCliVersion + \" of `sharp-cli`. \\n\" + (\"You can install it using `npm install -g sharp-cli@\" + requiredCliVersion + \"`. \\n\") + '\\n' + 'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites');\n}\nvar versionMismatchWarningShown = false;\nfunction showVersionMismatchWarning(requiredCliVersion, installedCliVersion) {\n  if (versionMismatchWarningShown) {\n    return;\n  }\n  console.warn(\"Warning: This command requires version \" + requiredCliVersion + \" of `sharp-cli`. \\n\" + (\"Currently installed version: \\\"\" + installedCliVersion + \"\\\" \\n\") + (\"Required version: \\\"\" + requiredCliVersion + \"\\\" \\n\") + (\"You can install it using `npm install -g sharp-cli@\" + requiredCliVersion + \"`. \\n\") + '\\n' + 'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites');\n  versionMismatchWarningShown = true;\n}","map":{"version":3,"names":["spawn_async_1","__importDefault","require","path_1","resolve_from_1","semver_1","env_1","SHARP_HELP_PATTERN","SHARP_REQUIRED_VERSION","resizeBufferAsync","_x","_x2","_resizeBufferAsync","apply","arguments","_asyncToGenerator","buffer","sizes","sharp","findSharpInstanceAsync","metadata","resizedBuffers","Promise","all","map","dimension","density","Math","max","width","height","isNaN","undefined","ceil","resize","fit","background","toBuffer","exports","isAvailableAsync","_isAvailableAsync","env","EXPO_IMAGE_UTILS_NO_SHARP","findSharpBinAsync","_unused","sharpAsync","_x3","_sharpAsync","options","commands","length","bin","_yield","default","concat","_toConsumableArray","getOptions","getCommandOptions","stdout","outputFilePaths","trim","split","error","stderr","Error","message","replace","args","_ref","Object","entries","_ref2","_slicedToArray","key","value","push","toFixed","command","operation","namedOptions","_objectWithoutProperties","_excluded","_excluded2","_sharpBin","_sharpInstance","_findSharpBinAsync","sharpCliPackage","libVipsVersion","versions","vips","satisfies","version","resolve","_unused2","installedCliVersion","toString","_unused3","notFoundError","showVersionMismatchWarning","_findSharpInstanceAsync","_unused4","sharpCliPath","process","platform","_unused5","yarnGlobalPath","join","_unused6","paths","_unused7","sharpPath","silent","_unused8","requiredCliVersion","versionMismatchWarningShown","console","warn"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/expo-pwa/node_modules/@expo/image-utils/src/sharp.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { env } from './env';\nimport { Options, SharpCommandOptions, SharpGlobalOptions } from './sharp.types';\n\nconst SHARP_HELP_PATTERN = /\\n\\nSpecify --help for available options/g;\nconst SHARP_REQUIRED_VERSION = '^2.1.0';\n\nexport async function resizeBufferAsync(buffer: Buffer, sizes: number[]): Promise<Buffer[]> {\n  const sharp = await findSharpInstanceAsync();\n\n  const metadata = await sharp(buffer).metadata();\n  // Create buffer for each size\n  const resizedBuffers = await Promise.all(\n    sizes.map(dimension => {\n      const density = (dimension / Math.max(metadata.width, metadata.height)) * metadata.density;\n      return sharp(buffer, {\n        density: isNaN(density) ? undefined : Math.ceil(density),\n      })\n        .resize(dimension, dimension, { fit: 'contain', background: 'transparent' })\n        .toBuffer();\n    })\n  );\n\n  return resizedBuffers;\n}\n\n/**\n * Returns `true` if a global sharp instance can be found.\n * This functionality can be overridden with `process.env.EXPO_IMAGE_UTILS_NO_SHARP=1`.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (env.EXPO_IMAGE_UTILS_NO_SHARP) {\n    return false;\n  }\n  try {\n    return !!(await findSharpBinAsync());\n  } catch {\n    return false;\n  }\n}\n\nexport async function sharpAsync(\n  options: SharpGlobalOptions,\n  commands: SharpCommandOptions[] = []\n): Promise<string[]> {\n  const bin = await findSharpBinAsync();\n  try {\n    const { stdout } = await spawnAsync(bin, [\n      ...getOptions(options),\n      ...getCommandOptions(commands),\n    ]);\n    const outputFilePaths = stdout.trim().split('\\n');\n    return outputFilePaths;\n  } catch (error: any) {\n    if (error.stderr) {\n      throw new Error(\n        '\\nProcessing images using sharp-cli failed: ' +\n          error.message +\n          '\\nOutput: ' +\n          error.stderr.replace(SHARP_HELP_PATTERN, '')\n      );\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getOptions(options: Options): string[] {\n  const args = [];\n  for (const [key, value] of Object.entries(options)) {\n    if (value != null && value !== false) {\n      if (typeof value === 'boolean') {\n        args.push(`--${key}`);\n      } else if (typeof value === 'number') {\n        args.push(`--${key}`, value.toFixed());\n      } else {\n        args.push(`--${key}`, value);\n      }\n    }\n  }\n  return args;\n}\n\nfunction getCommandOptions(commands: SharpCommandOptions[]): string[] {\n  const args: string[] = [];\n  for (const command of commands) {\n    if (command.operation === 'resize') {\n      const { operation, width, ...namedOptions } = command;\n      args.push(operation, width.toFixed(), ...getOptions(namedOptions));\n    } else {\n      const { operation, ...namedOptions } = command;\n      args.push(operation, ...getOptions(namedOptions));\n    }\n    args.push('--');\n  }\n  return args;\n}\n\nlet _sharpBin: string | null = null;\nlet _sharpInstance: any | null = null;\n\nasync function findSharpBinAsync(): Promise<string> {\n  if (_sharpBin) {\n    return _sharpBin;\n  }\n  try {\n    const sharpCliPackage = require('sharp-cli/package.json');\n    const libVipsVersion = require('sharp').versions.vips;\n    if (\n      sharpCliPackage &&\n      semver.satisfies(sharpCliPackage.version, SHARP_REQUIRED_VERSION) &&\n      typeof sharpCliPackage.bin.sharp === 'string' &&\n      typeof libVipsVersion === 'string'\n    ) {\n      _sharpBin = require.resolve(`sharp-cli/${sharpCliPackage.bin.sharp}`);\n      return _sharpBin;\n    }\n  } catch {\n    // fall back to global sharp-cli\n  }\n\n  let installedCliVersion;\n  try {\n    installedCliVersion = (await spawnAsync('sharp', ['--version'])).stdout.toString().trim();\n  } catch {\n    throw notFoundError(SHARP_REQUIRED_VERSION);\n  }\n\n  if (!semver.satisfies(installedCliVersion, SHARP_REQUIRED_VERSION)) {\n    showVersionMismatchWarning(SHARP_REQUIRED_VERSION, installedCliVersion);\n  }\n  _sharpBin = 'sharp';\n  return _sharpBin;\n}\n\n/**\n * Returns the instance of `sharp` installed by the global `sharp-cli` package.\n * This method will throw errors if the `sharp` instance cannot be found, these errors can be circumvented by ensuring `isAvailableAsync()` resolves to `true`.\n */\nexport async function findSharpInstanceAsync(): Promise<any | null> {\n  if (env.EXPO_IMAGE_UTILS_NO_SHARP) {\n    throw new Error(\n      'Global instance of sharp-cli cannot be retrieved because sharp-cli has been disabled with the environment variable `EXPO_IMAGE_UTILS_NO_SHARP`'\n    );\n  }\n  if (_sharpInstance) {\n    return _sharpInstance;\n  }\n  // Ensure sharp-cli version is correct\n  await findSharpBinAsync();\n\n  // Attempt to use local sharp package\n  try {\n    const sharp = require('sharp');\n    _sharpInstance = sharp;\n    return sharp;\n  } catch {}\n\n  // Attempt to resolve the sharp instance used by the global CLI\n  let sharpCliPath;\n  if (process.platform !== 'win32') {\n    try {\n      sharpCliPath = (await spawnAsync('which', ['sharp'])).stdout.toString().trim();\n    } catch {}\n  } else {\n    // On Windows systems, nested dependencies aren't linked to the paths within `require.resolve.paths`.\n    // Yarn installs these modules in a different folder, let's add yarn to the other attempts.\n    // See: https://github.com/expo/expo-cli/issues/2708\n    let yarnGlobalPath = '';\n    try {\n      yarnGlobalPath = path.join(\n        (await spawnAsync('yarn', ['global', 'dir'])).stdout.toString().trim(),\n        'node_modules'\n      );\n    } catch {}\n    try {\n      sharpCliPath = require.resolve('sharp-cli/package.json', {\n        paths: (require.resolve.paths('sharp-cli') || []).concat(yarnGlobalPath),\n      });\n    } catch {}\n  }\n\n  // resolve sharp from the sharp-cli package\n  const sharpPath = resolveFrom.silent(sharpCliPath || '', 'sharp');\n\n  if (sharpPath) {\n    try {\n      // attempt to require the global sharp package\n      _sharpInstance = require(sharpPath);\n    } catch {}\n  }\n\n  if (!_sharpInstance) {\n    throw new Error(`Failed to find the instance of sharp used by the global sharp-cli package.`);\n  }\n\n  return _sharpInstance;\n}\n\nfunction notFoundError(requiredCliVersion: string): Error {\n  return new Error(\n    `This command requires version ${requiredCliVersion} of \\`sharp-cli\\`. \\n` +\n      `You can install it using \\`npm install -g sharp-cli@${requiredCliVersion}\\`. \\n` +\n      '\\n' +\n      'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites'\n  );\n}\n\nlet versionMismatchWarningShown = false;\n\nfunction showVersionMismatchWarning(requiredCliVersion: string, installedCliVersion: string) {\n  if (versionMismatchWarningShown) {\n    return;\n  }\n  console.warn(\n    `Warning: This command requires version ${requiredCliVersion} of \\`sharp-cli\\`. \\n` +\n      `Currently installed version: \"${installedCliVersion}\" \\n` +\n      `Required version: \"${requiredCliVersion}\" \\n` +\n      `You can install it using \\`npm install -g sharp-cli@${requiredCliVersion}\\`. \\n` +\n      '\\n' +\n      'For prerequisites, see: https://sharp.dimens.io/en/stable/install/#prerequisites'\n  );\n  versionMismatchWarningShown = true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}