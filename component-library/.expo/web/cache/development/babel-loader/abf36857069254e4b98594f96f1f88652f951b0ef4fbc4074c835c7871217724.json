{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Config = void 0;\nexports.areVersionsSynced = areVersionsSynced;\nexports.ensureBuildGradleContainsConfigurationScript = ensureBuildGradleContainsConfigurationScript;\nexports.formatApplyLineForBuildGradle = formatApplyLineForBuildGradle;\nexports.isBuildGradleConfigured = isBuildGradleConfigured;\nexports.isMainApplicationMetaDataSet = isMainApplicationMetaDataSet;\nexports.isMainApplicationMetaDataSynced = isMainApplicationMetaDataSynced;\nexports.setUpdatesConfig = setUpdatesConfig;\nexports.setVersionsConfig = setVersionsConfig;\nexports.withUpdates = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Updates() {\n  var data = require(\"../utils/Updates\");\n  _Updates = function _Updates() {\n    return data;\n  };\n  return data;\n}\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n  _Manifest = function _Manifest() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\nvar Config;\nexports.Config = Config;\n(function (Config) {\n  Config[\"ENABLED\"] = \"expo.modules.updates.ENABLED\";\n  Config[\"CHECK_ON_LAUNCH\"] = \"expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH\";\n  Config[\"LAUNCH_WAIT_MS\"] = \"expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS\";\n  Config[\"SDK_VERSION\"] = \"expo.modules.updates.EXPO_SDK_VERSION\";\n  Config[\"RUNTIME_VERSION\"] = \"expo.modules.updates.EXPO_RUNTIME_VERSION\";\n  Config[\"UPDATE_URL\"] = \"expo.modules.updates.EXPO_UPDATE_URL\";\n  Config[\"RELEASE_CHANNEL\"] = \"expo.modules.updates.EXPO_RELEASE_CHANNEL\";\n  Config[\"UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\"] = \"expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\";\n  Config[\"CODE_SIGNING_CERTIFICATE\"] = \"expo.modules.updates.CODE_SIGNING_CERTIFICATE\";\n  Config[\"CODE_SIGNING_METADATA\"] = \"expo.modules.updates.CODE_SIGNING_METADATA\";\n})(Config || (exports.Config = Config = {}));\nvar withUpdates = function withUpdates(config, _ref) {\n  var expoUsername = _ref.expoUsername;\n  return (0, _androidPlugins().withAndroidManifest)(config, function (config) {\n    var projectRoot = config.modRequest.projectRoot;\n    var expoUpdatesPackageVersion = (0, _Updates().getExpoUpdatesPackageVersion)(projectRoot);\n    config.modResults = setUpdatesConfig(projectRoot, config, config.modResults, expoUsername, expoUpdatesPackageVersion);\n    return config;\n  });\n};\nexports.withUpdates = withUpdates;\nfunction setUpdatesConfig(projectRoot, config, androidManifest, username, expoUpdatesPackageVersion) {\n  var mainApplication = (0, _Manifest().getMainApplicationOrThrow)(androidManifest);\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.ENABLED, String((0, _Updates().getUpdatesEnabled)(config)));\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CHECK_ON_LAUNCH, (0, _Updates().getUpdatesCheckOnLaunch)(config, expoUpdatesPackageVersion));\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.LAUNCH_WAIT_MS, String((0, _Updates().getUpdatesTimeout)(config)));\n  var updateUrl = (0, _Updates().getUpdateUrl)(config, username);\n  if (updateUrl) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.UPDATE_URL);\n  }\n  var codeSigningCertificate = (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config);\n  if (codeSigningCertificate) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CODE_SIGNING_CERTIFICATE, codeSigningCertificate);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.CODE_SIGNING_CERTIFICATE);\n  }\n  var codeSigningMetadata = (0, _Updates().getUpdatesCodeSigningMetadataStringified)(config);\n  if (codeSigningMetadata) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CODE_SIGNING_METADATA, codeSigningMetadata);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.CODE_SIGNING_METADATA);\n  }\n  return setVersionsConfig(config, androidManifest);\n}\nfunction setVersionsConfig(config, androidManifest) {\n  var mainApplication = (0, _Manifest().getMainApplicationOrThrow)(androidManifest);\n  var runtimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'android');\n  if (!runtimeVersion && (0, _Manifest().findMetaDataItem)(mainApplication, Config.RUNTIME_VERSION) > -1) {\n    throw new Error('A runtime version is set in your AndroidManifest.xml, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove expo.modules.updates.EXPO_RUNTIME_VERSION from your AndroidManifest.xml.');\n  }\n  var sdkVersion = (0, _Updates().getSDKVersion)(config);\n  if (runtimeVersion) {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.SDK_VERSION);\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.RUNTIME_VERSION);\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.RUNTIME_VERSION);\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.SDK_VERSION);\n  }\n  return androidManifest;\n}\nfunction ensureBuildGradleContainsConfigurationScript(projectRoot, buildGradleContents) {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    var cleanedUpBuildGradleContents;\n    var isBuildGradleMisconfigured = buildGradleContents.split('\\n').some(function (line) {\n      return line.includes(CREATE_MANIFEST_ANDROID_PATH);\n    });\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(new RegExp(\"(\\n// Integration with Expo updates)?\\n.*\" + CREATE_MANIFEST_ANDROID_PATH + \".*\\n\"), '');\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n    var gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return cleanedUpBuildGradleContents + \"\\n// Integration with Expo updates\\n\" + gradleScriptApply + \"\\n\";\n  } else {\n    return buildGradleContents;\n  }\n}\nfunction formatApplyLineForBuildGradle(projectRoot) {\n  var updatesGradleScriptPath = _resolveFrom().default.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n  if (!updatesGradleScriptPath) {\n    throw new Error(\"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");\n  }\n  var relativePath = _path().default.relative(_path().default.join(projectRoot, 'android', 'app'), updatesGradleScriptPath);\n  var posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n  return \"apply from: \\\"\" + posixPath + \"\\\"\";\n}\nfunction isBuildGradleConfigured(projectRoot, buildGradleContents) {\n  var androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n  return buildGradleContents.replace(/\\r\\n/g, '\\n').split('\\n').some(function (line) {\n    return line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\");\n  });\n}\nfunction isMainApplicationMetaDataSet(androidManifest) {\n  var updateUrl = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.UPDATE_URL);\n  var runtimeVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.RUNTIME_VERSION);\n  var sdkVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.SDK_VERSION);\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\nfunction isMainApplicationMetaDataSynced(projectRoot, config, androidManifest, username) {\n  return (0, _Updates().getUpdateUrl)(config, username) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.UPDATE_URL) && String((0, _Updates().getUpdatesEnabled)(config)) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.ENABLED) && String((0, _Updates().getUpdatesTimeout)(config)) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.LAUNCH_WAIT_MS) && (0, _Updates().getUpdatesCheckOnLaunch)(config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CHECK_ON_LAUNCH) && (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CODE_SIGNING_CERTIFICATE) && (0, _Updates().getUpdatesCodeSigningMetadataStringified)(config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CODE_SIGNING_METADATA) && areVersionsSynced(config, androidManifest);\n}\nfunction areVersionsSynced(config, androidManifest) {\n  var expectedRuntimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'android');\n  var expectedSdkVersion = (0, _Updates().getSDKVersion)(config);\n  var currentRuntimeVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.RUNTIME_VERSION);\n  var currentSdkVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.SDK_VERSION);\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}","map":{"version":3,"names":["_path","data","_interopRequireDefault","require","_resolveFrom","_androidPlugins","_Updates","_Manifest","CREATE_MANIFEST_ANDROID_PATH","Config","withUpdates","config","_ref","expoUsername","withAndroidManifest","projectRoot","modRequest","expoUpdatesPackageVersion","getExpoUpdatesPackageVersion","modResults","setUpdatesConfig","androidManifest","username","mainApplication","getMainApplicationOrThrow","addMetaDataItemToMainApplication","ENABLED","String","getUpdatesEnabled","CHECK_ON_LAUNCH","getUpdatesCheckOnLaunch","LAUNCH_WAIT_MS","getUpdatesTimeout","updateUrl","getUpdateUrl","UPDATE_URL","removeMetaDataItemFromMainApplication","codeSigningCertificate","getUpdatesCodeSigningCertificate","CODE_SIGNING_CERTIFICATE","codeSigningMetadata","getUpdatesCodeSigningMetadataStringified","CODE_SIGNING_METADATA","setVersionsConfig","runtimeVersion","getRuntimeVersionNullable","findMetaDataItem","RUNTIME_VERSION","Error","sdkVersion","getSDKVersion","SDK_VERSION","ensureBuildGradleContainsConfigurationScript","buildGradleContents","isBuildGradleConfigured","cleanedUpBuildGradleContents","isBuildGradleMisconfigured","split","some","line","includes","replace","RegExp","gradleScriptApply","formatApplyLineForBuildGradle","updatesGradleScriptPath","default","silent","relativePath","relative","join","posixPath","process","platform","androidBuildScript","isMainApplicationMetaDataSet","getMainApplicationMetaDataValue","Boolean","isMainApplicationMetaDataSynced","areVersionsSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/android/Updates.ts"],"sourcesContent":["import path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport {\n  ExpoConfigUpdates,\n  getExpoUpdatesPackageVersion,\n  getRuntimeVersionNullable,\n  getSDKVersion,\n  getUpdatesCheckOnLaunch,\n  getUpdatesCodeSigningCertificate,\n  getUpdatesCodeSigningMetadataStringified,\n  getUpdatesEnabled,\n  getUpdatesTimeout,\n  getUpdateUrl,\n} from '../utils/Updates';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  findMetaDataItem,\n  getMainApplicationMetaDataValue,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\n\nconst CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\n\nexport enum Config {\n  ENABLED = 'expo.modules.updates.ENABLED',\n  CHECK_ON_LAUNCH = 'expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH',\n  LAUNCH_WAIT_MS = 'expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS',\n  SDK_VERSION = 'expo.modules.updates.EXPO_SDK_VERSION',\n  RUNTIME_VERSION = 'expo.modules.updates.EXPO_RUNTIME_VERSION',\n  UPDATE_URL = 'expo.modules.updates.EXPO_UPDATE_URL',\n  RELEASE_CHANNEL = 'expo.modules.updates.EXPO_RELEASE_CHANNEL',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY',\n  CODE_SIGNING_CERTIFICATE = 'expo.modules.updates.CODE_SIGNING_CERTIFICATE',\n  CODE_SIGNING_METADATA = 'expo.modules.updates.CODE_SIGNING_METADATA',\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withAndroidManifest(config, config => {\n    const projectRoot = config.modRequest.projectRoot;\n    const expoUpdatesPackageVersion = getExpoUpdatesPackageVersion(projectRoot);\n    config.modResults = setUpdatesConfig(\n      projectRoot,\n      config,\n      config.modResults,\n      expoUsername,\n      expoUpdatesPackageVersion\n    );\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null,\n  expoUpdatesPackageVersion?: string | null\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.ENABLED,\n    String(getUpdatesEnabled(config))\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.CHECK_ON_LAUNCH,\n    getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion)\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.LAUNCH_WAIT_MS,\n    String(getUpdatesTimeout(config))\n  );\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    addMetaDataItemToMainApplication(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.UPDATE_URL);\n  }\n\n  const codeSigningCertificate = getUpdatesCodeSigningCertificate(projectRoot, config);\n  if (codeSigningCertificate) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.CODE_SIGNING_CERTIFICATE,\n      codeSigningCertificate\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.CODE_SIGNING_CERTIFICATE);\n  }\n\n  const codeSigningMetadata = getUpdatesCodeSigningMetadataStringified(config);\n  if (codeSigningMetadata) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.CODE_SIGNING_METADATA,\n      codeSigningMetadata\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.CODE_SIGNING_METADATA);\n  }\n\n  return setVersionsConfig(config, androidManifest);\n}\n\nexport function setVersionsConfig(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  const runtimeVersion = getRuntimeVersionNullable(config, 'android');\n  if (!runtimeVersion && findMetaDataItem(mainApplication, Config.RUNTIME_VERSION) > -1) {\n    throw new Error(\n      'A runtime version is set in your AndroidManifest.xml, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove expo.modules.updates.EXPO_RUNTIME_VERSION from your AndroidManifest.xml.'\n    );\n  }\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.RUNTIME_VERSION, runtimeVersion);\n  } else if (sdkVersion) {\n    /**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n  }\n\n  return androidManifest;\n}\nexport function ensureBuildGradleContainsConfigurationScript(\n  projectRoot: string,\n  buildGradleContents: string\n): string {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    let cleanedUpBuildGradleContents;\n\n    const isBuildGradleMisconfigured = buildGradleContents\n      .split('\\n')\n      .some(line => line.includes(CREATE_MANIFEST_ANDROID_PATH));\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(\n        new RegExp(`(\\n// Integration with Expo updates)?\\n.*${CREATE_MANIFEST_ANDROID_PATH}.*\\n`),\n        ''\n      );\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n\n    const gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return `${cleanedUpBuildGradleContents}\\n// Integration with Expo updates\\n${gradleScriptApply}\\n`;\n  } else {\n    return buildGradleContents;\n  }\n}\n\nexport function formatApplyLineForBuildGradle(projectRoot: string): string {\n  const updatesGradleScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n\n  if (!updatesGradleScriptPath) {\n    throw new Error(\n      \"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(\n    path.join(projectRoot, 'android', 'app'),\n    updatesGradleScriptPath\n  );\n  const posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n\n  return `apply from: \"${posixPath}\"`;\n}\n\nexport function isBuildGradleConfigured(projectRoot: string, buildGradleContents: string): boolean {\n  const androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n\n  return (\n    buildGradleContents\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some(line => line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function isMainApplicationMetaDataSet(androidManifest: AndroidManifest): boolean {\n  const updateUrl = getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL);\n  const runtimeVersion = getMainApplicationMetaDataValue(androidManifest, Config.RUNTIME_VERSION);\n  const sdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\n\nexport function isMainApplicationMetaDataSynced(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL) &&\n    String(getUpdatesEnabled(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.ENABLED) &&\n    String(getUpdatesTimeout(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.LAUNCH_WAIT_MS) &&\n    getUpdatesCheckOnLaunch(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CHECK_ON_LAUNCH) &&\n    getUpdatesCodeSigningCertificate(projectRoot, config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CODE_SIGNING_CERTIFICATE) &&\n    getUpdatesCodeSigningMetadataStringified(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CODE_SIGNING_METADATA) &&\n    areVersionsSynced(config, androidManifest)\n  );\n}\n\nexport function areVersionsSynced(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion' | 'sdkVersion'>,\n  androidManifest: AndroidManifest\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config, 'android');\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = getMainApplicationMetaDataValue(\n    androidManifest,\n    Config.RUNTIME_VERSION\n  );\n  const currentSdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}