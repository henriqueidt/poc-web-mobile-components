{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gteSdkVersion = gteSdkVersion;\nexports.lteSdkVersion = lteSdkVersion;\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction gteSdkVersion(exp, sdkVersion) {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n  try {\n    return _semver().default.gte(exp.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(exp.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}\nfunction lteSdkVersion(exp, sdkVersion) {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n  try {\n    return _semver().default.lte(exp.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(exp.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}","map":{"version":3,"names":["_semver","data","_interopRequireDefault","require","gteSdkVersion","exp","sdkVersion","default","gte","e","Error","lteSdkVersion","lte"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/utils/versions.ts"],"sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\nimport semver from 'semver';\n\nexport function gteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(exp.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n\nexport function lteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(exp.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"],"mappings":";;;;;;;AACA,SAAAA,QAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,OAAA,YAAAA,QAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;;;;;;AAEO,SAASG,aAATA,CAAuBC,GAAvB,EAA4DC,UAA5D,EAAyF;EAC9F,IAAI,CAACD,GAAG,CAACC,UAAT,EAAqB;IACnB,OAAO,KAAP;EACD;EAED,IAAID,GAAG,CAACC,UAAJ,KAAmB,aAAvB,EAAsC;IACpC,OAAO,IAAP;EACD;EAED,IAAI;IACF,OAAON,OAAA,GAAAO,OAAA,CAAOC,GAAP,CAAWH,GAAG,CAACC,UAAf,EAA2BA,UAA3B,CAAP;EACD,CAFD,CAEE,OAAOG,CAAP,EAAU;IACV,MAAM,IAAIC,KAAJ,CAAaL,GAAG,CAACC,UAAW,2DAAlC;EACD;AACF;AAEM,SAASK,aAATA,CAAuBN,GAAvB,EAA4DC,UAA5D,EAAyF;EAC9F,IAAI,CAACD,GAAG,CAACC,UAAT,EAAqB;IACnB,OAAO,KAAP;EACD;EAED,IAAID,GAAG,CAACC,UAAJ,KAAmB,aAAvB,EAAsC;IACpC,OAAO,KAAP;EACD;EAED,IAAI;IACF,OAAON,OAAA,GAAAO,OAAA,CAAOK,GAAP,CAAWP,GAAG,CAACC,UAAf,EAA2BA,UAA3B,CAAP;EACD,CAFD,CAEE,OAAOG,CAAP,EAAU;IACV,MAAM,IAAIC,KAAJ,CAAaL,GAAG,CAACC,UAAW,2DAAlC;EACD;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}