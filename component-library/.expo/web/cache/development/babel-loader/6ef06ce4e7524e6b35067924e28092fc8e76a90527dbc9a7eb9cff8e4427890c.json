{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyPlugin = applyPlugin;\nexports.getGoogleServicesFilePath = getGoogleServicesFilePath;\nexports.setClassPath = setClassPath;\nexports.setGoogleServicesFile = setGoogleServicesFile;\nexports.withGoogleServicesFile = exports.withClassPath = exports.withApplyPlugin = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = require(\"../utils/fs\");\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar DEFAULT_TARGET_PATH = './android/app/google-services.json';\nvar googleServicesClassPath = 'com.google.gms:google-services';\nvar googleServicesPlugin = 'com.google.gms.google-services';\nvar googleServicesVersion = '4.3.3';\nvar withClassPath = function withClassPath(config) {\n  return (0, _androidPlugins().withProjectBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.googleServicesFile', \"Cannot automatically configure project build.gradle if it's not groovy\");\n    }\n    return config;\n  });\n};\nexports.withClassPath = withClassPath;\nvar withApplyPlugin = function withApplyPlugin(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.googleServicesFile', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n    return config;\n  });\n};\nexports.withApplyPlugin = withApplyPlugin;\nvar withGoogleServicesFile = function withGoogleServicesFile(config) {\n  return (0, _withDangerousMod().withDangerousMod)(config, ['android', function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      yield setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withGoogleServicesFile = withGoogleServicesFile;\nfunction getGoogleServicesFilePath(config) {\n  var _config$android$googl, _config$android;\n  return (_config$android$googl = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.googleServicesFile) !== null && _config$android$googl !== void 0 ? _config$android$googl : null;\n}\nfunction setGoogleServicesFile(_x2, _x3) {\n  return _setGoogleServicesFile.apply(this, arguments);\n}\nfunction _setGoogleServicesFile() {\n  _setGoogleServicesFile = _asyncToGenerator(function* (config, projectRoot) {\n    var targetPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_TARGET_PATH;\n    var partialSourcePath = getGoogleServicesFilePath(config);\n    if (!partialSourcePath) {\n      return false;\n    }\n    var completeSourcePath = _path().default.resolve(projectRoot, partialSourcePath);\n    var destinationPath = _path().default.resolve(projectRoot, targetPath);\n    try {\n      yield (0, _fs().copyFilePathToPathAsync)(completeSourcePath, destinationPath);\n    } catch (e) {\n      console.log(e);\n      throw new Error(\"Cannot copy google-services.json from \" + completeSourcePath + \" to \" + destinationPath + \". Please make sure the source and destination paths exist.\");\n    }\n    return true;\n  });\n  return _setGoogleServicesFile.apply(this, arguments);\n}\nfunction setClassPath(config, buildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n  return buildGradle.replace(/dependencies\\s?{/, \"dependencies {\\n        classpath '\" + googleServicesClassPath + \":\" + googleServicesVersion + \"'\");\n}\nfunction applyPlugin(config, appBuildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n  var pattern = new RegExp(\"apply\\\\s+plugin:\\\\s+['\\\"]\" + googleServicesPlugin + \"['\\\"]\");\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n  return appBuildGradle + (\"\\napply plugin: '\" + googleServicesPlugin + \"'\");\n}","map":{"version":3,"names":["_path","data","_interopRequireDefault","require","_androidPlugins","_withDangerousMod","_fs","_warnings","DEFAULT_TARGET_PATH","googleServicesClassPath","googleServicesPlugin","googleServicesVersion","withClassPath","config","withProjectBuildGradle","modResults","language","contents","setClassPath","addWarningAndroid","withApplyPlugin","withAppBuildGradle","applyPlugin","withGoogleServicesFile","withDangerousMod","_ref","_asyncToGenerator","setGoogleServicesFile","modRequest","projectRoot","_x","apply","arguments","getGoogleServicesFilePath","_config$android$googl","_config$android","android","googleServicesFile","_x2","_x3","_setGoogleServicesFile","targetPath","length","undefined","partialSourcePath","completeSourcePath","default","resolve","destinationPath","copyFilePathToPathAsync","e","console","log","Error","buildGradle","includes","replace","appBuildGradle","pattern","RegExp","match"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/android/GoogleServices.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { copyFilePathToPathAsync } from '../utils/fs';\nimport { addWarningAndroid } from '../utils/warnings';\n\nconst DEFAULT_TARGET_PATH = './android/app/google-services.json';\n\nconst googleServicesClassPath = 'com.google.gms:google-services';\nconst googleServicesPlugin = 'com.google.gms.google-services';\n\n// NOTE(brentvatne): This may be annoying to keep up to date...\nconst googleServicesVersion = '4.3.3';\n\nexport const withClassPath: ConfigPlugin = config => {\n  return withProjectBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withApplyPlugin: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/**\n * Add `google-services.json` to project\n */\nexport const withGoogleServicesFile: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getGoogleServicesFilePath(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.googleServicesFile ?? null;\n}\n\nexport async function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string,\n  targetPath: string = DEFAULT_TARGET_PATH\n) {\n  const partialSourcePath = getGoogleServicesFilePath(config);\n  if (!partialSourcePath) {\n    return false;\n  }\n\n  const completeSourcePath = path.resolve(projectRoot, partialSourcePath);\n  const destinationPath = path.resolve(projectRoot, targetPath);\n\n  try {\n    await copyFilePathToPathAsync(completeSourcePath, destinationPath);\n  } catch (e) {\n    console.log(e);\n    throw new Error(\n      `Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`\n    );\n  }\n  return true;\n}\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  //\n  return buildGradle.replace(\n    /dependencies\\s?{/,\n    `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`\n  );\n}\n\nexport function applyPlugin(config: Pick<ExpoConfig, 'android'>, appBuildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  // Make sure the project does not have the plugin already\n  const pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  // Add it to the end of the file\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}