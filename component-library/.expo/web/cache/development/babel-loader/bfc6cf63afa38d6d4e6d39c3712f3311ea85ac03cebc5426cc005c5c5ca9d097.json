{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parsePropertiesFile = parsePropertiesFile;\nexports.propertiesListToString = propertiesListToString;\nfunction parsePropertiesFile(contents) {\n  var propertiesList = [];\n  var lines = contents.split('\\n');\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].trim();\n    if (!line) {\n      propertiesList.push({\n        type: 'empty'\n      });\n    } else if (line.startsWith('#')) {\n      propertiesList.push({\n        type: 'comment',\n        value: line.substring(1).trimStart()\n      });\n    } else {\n      var eok = line.indexOf('=');\n      var key = line.slice(0, eok);\n      var value = line.slice(eok + 1, line.length);\n      propertiesList.push({\n        type: 'property',\n        key: key,\n        value: value\n      });\n    }\n  }\n  return propertiesList;\n}\nfunction propertiesListToString(props) {\n  var output = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    if (prop.type === 'empty') {\n      output += '';\n    } else if (prop.type === 'comment') {\n      output += '# ' + prop.value;\n    } else if (prop.type === 'property') {\n      output += prop.key + \"=\" + prop.value;\n    } else {\n      throw new Error(\"Invalid properties type \\\"\" + prop.type + \"\\\"\");\n    }\n    if (i < props.length - 1) {\n      output += '\\n';\n    }\n  }\n  return output;\n}","map":{"version":3,"names":["parsePropertiesFile","contents","propertiesList","lines","split","i","length","line","trim","push","type","startsWith","value","substring","trimStart","eok","indexOf","key","slice","propertiesListToString","props","output","prop","Error"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/android/Properties.ts"],"sourcesContent":["export type PropertiesItem =\n  | {\n      type: 'comment';\n      value: string;\n    }\n  | {\n      type: 'empty';\n    }\n  | {\n      type: 'property';\n      key: string;\n      value: string;\n    };\n\nexport function parsePropertiesFile(contents: string): PropertiesItem[] {\n  const propertiesList: PropertiesItem[] = [];\n  const lines = contents.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) {\n      propertiesList.push({ type: 'empty' });\n    } else if (line.startsWith('#')) {\n      propertiesList.push({ type: 'comment', value: line.substring(1).trimStart() });\n    } else {\n      const eok = line.indexOf('=');\n      const key = line.slice(0, eok);\n      const value = line.slice(eok + 1, line.length);\n      propertiesList.push({ type: 'property', key, value });\n    }\n  }\n\n  return propertiesList;\n}\n\nexport function propertiesListToString(props: PropertiesItem[]): string {\n  let output = '';\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n    if (prop.type === 'empty') {\n      output += '';\n    } else if (prop.type === 'comment') {\n      output += '# ' + prop.value;\n    } else if (prop.type === 'property') {\n      output += `${prop.key}=${prop.value}`;\n    } else {\n      // @ts-ignore: assertion\n      throw new Error(`Invalid properties type \"${prop.type}\"`);\n    }\n    if (i < props.length - 1) {\n      output += '\\n';\n    }\n  }\n  return output;\n}\n"],"mappings":";;;;;;;AAcO,SAASA,mBAATA,CAA6BC,QAA7B,EAAiE;EACtE,IAAMC,cAAgC,GAAG,EAAzC;EACA,IAAMC,KAAK,GAAGF,QAAQ,CAACG,KAAT,CAAe,IAAf,CAAd;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,IAAME,IAAI,GAAGJ,KAAK,CAACE,CAAD,CAAL,CAASG,IAAT,EAAb;IACA,IAAI,CAACD,IAAL,EAAW;MACTL,cAAc,CAACO,IAAf,CAAoB;QAAEC,IAAI,EAAE;MAAR,CAApB;IACD,CAFD,MAEO,IAAIH,IAAI,CAACI,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;MAC/BT,cAAc,CAACO,IAAf,CAAoB;QAAEC,IAAI,EAAE,SAAR;QAAmBE,KAAK,EAAEL,IAAI,CAACM,SAAL,CAAe,CAAf,EAAkBC,SAAlB;MAA1B,CAApB;IACD,CAFM,MAEA;MACL,IAAMC,GAAG,GAAGR,IAAI,CAACS,OAAL,CAAa,GAAb,CAAZ;MACA,IAAMC,GAAG,GAAGV,IAAI,CAACW,KAAL,CAAW,CAAX,EAAcH,GAAd,CAAZ;MACA,IAAMH,KAAK,GAAGL,IAAI,CAACW,KAAL,CAAWH,GAAG,GAAG,CAAjB,EAAoBR,IAAI,CAACD,MAAzB,CAAd;MACAJ,cAAc,CAACO,IAAf,CAAoB;QAAEC,IAAI,EAAE,UAAR;QAAoBO,GAApB,EAAoBA,GAApB;QAAyBL,KAAA,EAAAA;MAAzB,CAApB;IACD;EACF;EAED,OAAOV,cAAP;AACD;AAEM,SAASiB,sBAATA,CAAgCC,KAAhC,EAAiE;EACtE,IAAIC,MAAM,GAAG,EAAb;EACA,KAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGe,KAAK,CAACd,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,IAAMiB,IAAI,GAAGF,KAAK,CAACf,CAAD,CAAlB;IACA,IAAIiB,IAAI,CAACZ,IAAL,KAAc,OAAlB,EAA2B;MACzBW,MAAM,IAAI,EAAV;IACD,CAFD,MAEO,IAAIC,IAAI,CAACZ,IAAL,KAAc,SAAlB,EAA6B;MAClCW,MAAM,IAAI,OAAOC,IAAI,CAACV,KAAtB;IACD,CAFM,MAEA,IAAIU,IAAI,CAACZ,IAAL,KAAc,UAAlB,EAA8B;MACnCW,MAAM,IAAOC,IAAI,CAACL,GAAI,SAAGK,IAAI,CAACV,KAA9B;IACD,CAFM,MAEA;MAEL,MAAM,IAAIW,KAAJ,gCAAsCD,IAAI,CAACZ,IAAK,QAAtD;IACD;IACD,IAAIL,CAAC,GAAGe,KAAK,CAACd,MAAN,GAAe,CAAvB,EAA0B;MACxBe,MAAM,IAAI,IAAV;IACD;EACF;EACD,OAAOA,MAAP;AACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}