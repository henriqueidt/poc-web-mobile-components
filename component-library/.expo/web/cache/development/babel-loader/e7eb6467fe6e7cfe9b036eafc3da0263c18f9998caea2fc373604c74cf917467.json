{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStatusBarColor = getStatusBarColor;\nexports.getStatusBarStyle = getStatusBarStyle;\nexports.getStatusBarTranslucent = getStatusBarTranslucent;\nexports.setStatusBarColors = setStatusBarColors;\nexports.setStatusBarStyles = setStatusBarStyles;\nexports.withStatusBar = void 0;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Colors() {\n  var data = require(\"./Colors\");\n  _Colors = function _Colors() {\n    return data;\n  };\n  return data;\n}\nfunction _Styles() {\n  var data = require(\"./Styles\");\n  _Styles = function _Styles() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\nvar WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\nvar WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\nvar withStatusBar = function withStatusBar(config) {\n  config = withStatusBarColors(config);\n  config = withStatusBarStyles(config);\n  return config;\n};\nexports.withStatusBar = withStatusBar;\nvar withStatusBarColors = function withStatusBarColors(config) {\n  return (0, _androidPlugins().withAndroidColors)(config, function (config) {\n    config.modResults = setStatusBarColors(config, config.modResults);\n    return config;\n  });\n};\nvar withStatusBarStyles = function withStatusBarStyles(config) {\n  return (0, _androidPlugins().withAndroidStyles)(config, function (config) {\n    config.modResults = setStatusBarStyles(config, config.modResults);\n    return config;\n  });\n};\nfunction setStatusBarColors(config, colors) {\n  return (0, _Colors().assignColorValue)(colors, {\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: getStatusBarColor(config)\n  });\n}\nfunction setStatusBarStyles(config, styles) {\n  var hexString = getStatusBarColor(config);\n  var floatElement = getStatusBarTranslucent(config);\n  styles = (0, _Styles().assignStylesValue)(styles, {\n    parent: (0, _Styles().getAppThemeLightNoActionBarGroup)(),\n    name: WINDOW_LIGHT_STATUS_BAR,\n    targetApi: '23',\n    value: 'true',\n    add: getStatusBarStyle(config) === 'dark-content'\n  });\n  styles = (0, _Styles().assignStylesValue)(styles, {\n    parent: (0, _Styles().getAppThemeLightNoActionBarGroup)(),\n    name: WINDOW_TRANSLUCENT_STATUS,\n    value: 'true',\n    add: floatElement\n  });\n  styles = (0, _Styles().assignStylesValue)(styles, {\n    parent: (0, _Styles().getAppThemeLightNoActionBarGroup)(),\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: \"@color/\" + COLOR_PRIMARY_DARK_KEY,\n    add: !!hexString\n  });\n  return styles;\n}\nfunction getStatusBarColor(config) {\n  var _config$androidStatus;\n  var backgroundColor = (_config$androidStatus = config.androidStatusBar) === null || _config$androidStatus === void 0 ? void 0 : _config$androidStatus.backgroundColor;\n  if (backgroundColor) {\n    (0, _assert().default)(backgroundColor !== 'translucent', \"androidStatusBar.backgroundColor must be a valid hex string, instead got: \\\"\" + backgroundColor + \"\\\"\");\n  }\n  return backgroundColor;\n}\nfunction getStatusBarTranslucent(config) {\n  var _config$androidStatus2, _config$androidStatus3;\n  return (_config$androidStatus2 = (_config$androidStatus3 = config.androidStatusBar) === null || _config$androidStatus3 === void 0 ? void 0 : _config$androidStatus3.translucent) !== null && _config$androidStatus2 !== void 0 ? _config$androidStatus2 : false;\n}\nfunction getStatusBarStyle(config) {\n  var _config$androidStatus4;\n  return ((_config$androidStatus4 = config.androidStatusBar) === null || _config$androidStatus4 === void 0 ? void 0 : _config$androidStatus4.barStyle) || 'light-content';\n}","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","_androidPlugins","_Colors","_Styles","COLOR_PRIMARY_DARK_KEY","WINDOW_TRANSLUCENT_STATUS","WINDOW_LIGHT_STATUS_BAR","withStatusBar","config","withStatusBarColors","withStatusBarStyles","withAndroidColors","modResults","setStatusBarColors","withAndroidStyles","setStatusBarStyles","colors","assignColorValue","name","value","getStatusBarColor","styles","hexString","floatElement","getStatusBarTranslucent","assignStylesValue","parent","getAppThemeLightNoActionBarGroup","targetApi","add","getStatusBarStyle","_config$androidStatus","backgroundColor","androidStatusBar","default","_config$androidStatus2","_config$androidStatus3","translucent","_config$androidStatus4","barStyle"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/android/StatusBar.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidColors, withAndroidStyles } from '../plugins/android-plugins';\nimport { assignColorValue } from './Colors';\nimport { ResourceXML } from './Resources';\nimport { assignStylesValue, getAppThemeLightNoActionBarGroup } from './Styles';\n\n// https://developer.android.com/reference/android/R.attr#colorPrimaryDark\nconst COLOR_PRIMARY_DARK_KEY = 'colorPrimaryDark';\n// https://developer.android.com/reference/android/R.attr#windowTranslucentStatus\nconst WINDOW_TRANSLUCENT_STATUS = 'android:windowTranslucentStatus';\n// https://developer.android.com/reference/android/R.attr#windowLightStatusBar\nconst WINDOW_LIGHT_STATUS_BAR = 'android:windowLightStatusBar';\n\nexport const withStatusBar: ConfigPlugin = config => {\n  config = withStatusBarColors(config);\n  config = withStatusBarStyles(config);\n  return config;\n};\n\nconst withStatusBarColors: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setStatusBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withStatusBarStyles: ConfigPlugin = config => {\n  return withAndroidStyles(config, config => {\n    config.modResults = setStatusBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setStatusBarColors(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  colors: ResourceXML\n): ResourceXML {\n  return assignColorValue(colors, {\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: getStatusBarColor(config),\n  });\n}\n\nexport function setStatusBarStyles(\n  config: Pick<ExpoConfig, 'androidStatusBar'>,\n  styles: ResourceXML\n): ResourceXML {\n  const hexString = getStatusBarColor(config);\n  const floatElement = getStatusBarTranslucent(config);\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_LIGHT_STATUS_BAR,\n    targetApi: '23',\n    value: 'true',\n    // Default is light-content, don't need to do anything to set it\n    add: getStatusBarStyle(config) === 'dark-content',\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: WINDOW_TRANSLUCENT_STATUS,\n    value: 'true',\n    // translucent status bar set in theme\n    add: floatElement,\n  });\n\n  styles = assignStylesValue(styles, {\n    parent: getAppThemeLightNoActionBarGroup(),\n    name: COLOR_PRIMARY_DARK_KEY,\n    value: `@color/${COLOR_PRIMARY_DARK_KEY}`,\n    // Remove the color if translucent is used\n    add: !!hexString,\n  });\n\n  return styles;\n}\n\nexport function getStatusBarColor(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  const backgroundColor = config.androidStatusBar?.backgroundColor;\n  if (backgroundColor) {\n    // Drop support for translucent\n    assert(\n      backgroundColor !== 'translucent',\n      `androidStatusBar.backgroundColor must be a valid hex string, instead got: \"${backgroundColor}\"`\n    );\n  }\n  return backgroundColor;\n}\n\n/**\n * Specifies whether the status bar should be \"translucent\". When true, the status bar is drawn with `position: absolute` and a gray underlay, when false `position: relative` (pushes content down).\n *\n * @default false\n * @param config\n * @returns\n */\nexport function getStatusBarTranslucent(config: Pick<ExpoConfig, 'androidStatusBar'>): boolean {\n  return config.androidStatusBar?.translucent ?? false;\n}\n\nexport function getStatusBarStyle(config: Pick<ExpoConfig, 'androidStatusBar'>) {\n  return config.androidStatusBar?.barStyle || 'light-content';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}