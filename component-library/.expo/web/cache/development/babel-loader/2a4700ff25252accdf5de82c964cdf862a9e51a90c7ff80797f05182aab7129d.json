{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"GMSApiKey\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MATCH_INIT = void 0;\nexports.addGoogleMapsAppDelegateImport = addGoogleMapsAppDelegateImport;\nexports.addGoogleMapsAppDelegateInit = addGoogleMapsAppDelegateInit;\nexports.addMapsCocoaPods = addMapsCocoaPods;\nexports.getGoogleMapsApiKey = getGoogleMapsApiKey;\nexports.removeGoogleMapsAppDelegateImport = removeGoogleMapsAppDelegateImport;\nexports.removeGoogleMapsAppDelegateInit = removeGoogleMapsAppDelegateInit;\nexports.removeMapsCocoaPods = removeMapsCocoaPods;\nexports.setGoogleMapsApiKey = setGoogleMapsApiKey;\nexports.withMaps = void 0;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _generateCode() {\n  var data = require(\"../utils/generateCode\");\n  _generateCode = function _generateCode() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require('debug')('expo:config-plugins:ios:maps');\nvar MATCH_INIT = /(?:(self\\.|_)(\\w+)\\s?=\\s?\\[\\[UMModuleRegistryAdapter alloc\\])|(?:RCTBridge\\s?\\*\\s?(\\w+)\\s?=\\s?\\[\\[RCTBridge alloc\\])|(\\[self\\.reactDelegate createBridgeWithDelegate:self launchOptions:launchOptions\\])/g;\nexports.MATCH_INIT = MATCH_INIT;\nvar withGoogleMapsKey = (0, _iosPlugins().createInfoPlistPlugin)(setGoogleMapsApiKey, 'withGoogleMapsKey');\nvar withMaps = function withMaps(config) {\n  config = withGoogleMapsKey(config);\n  var apiKey = getGoogleMapsApiKey(config);\n  debug('Google Maps API Key:', apiKey);\n  config = withMapsCocoaPods(config, {\n    useGoogleMaps: !!apiKey\n  });\n  config = withGoogleMapsAppDelegate(config, {\n    apiKey: apiKey\n  });\n  return config;\n};\nexports.withMaps = withMaps;\nfunction getGoogleMapsApiKey(config) {\n  var _config$ios$config$go, _config$ios, _config$ios$config;\n  return (_config$ios$config$go = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : _config$ios$config.googleMapsApiKey) !== null && _config$ios$config$go !== void 0 ? _config$ios$config$go : null;\n}\nfunction setGoogleMapsApiKey(config, _ref) {\n  var GMSApiKey = _ref.GMSApiKey,\n    infoPlist = _objectWithoutProperties(_ref, _excluded);\n  var apiKey = getGoogleMapsApiKey(config);\n  if (apiKey === null) {\n    return infoPlist;\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    GMSApiKey: apiKey\n  });\n}\nfunction addGoogleMapsAppDelegateImport(src) {\n  var newSrc = [];\n  newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)', '#import <GoogleMaps/GoogleMaps.h>', '#endif');\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps-import',\n    src: src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//'\n  });\n}\nfunction removeGoogleMapsAppDelegateImport(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps-import',\n    src: src\n  });\n}\nfunction addGoogleMapsAppDelegateInit(src, apiKey) {\n  var newSrc = [];\n  newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)', \"  [GMSServices provideAPIKey:@\\\"\" + apiKey + \"\\\"];\", '#endif');\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps-init',\n    src: src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 0,\n    comment: '//'\n  });\n}\nfunction removeGoogleMapsAppDelegateInit(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps-init',\n    src: src\n  });\n}\nfunction addMapsCocoaPods(src) {\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps',\n    src: src,\n    newSrc: \"  pod 'react-native-google-maps', path: File.dirname(`node --print \\\"require.resolve('react-native-maps/package.json')\\\"`)\",\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#'\n  });\n}\nfunction removeMapsCocoaPods(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps',\n    src: src\n  });\n}\nfunction isReactNativeMapsInstalled(projectRoot) {\n  var resolved = _resolveFrom().default.silent(projectRoot, 'react-native-maps/package.json');\n  return resolved ? _path().default.dirname(resolved) : null;\n}\nfunction isReactNativeMapsAutolinked(config) {\n  return true;\n}\nvar withMapsCocoaPods = function withMapsCocoaPods(config, _ref2) {\n  var useGoogleMaps = _ref2.useGoogleMaps;\n  return (0, _withDangerousMod().withDangerousMod)(config, ['ios', function () {\n    var _ref3 = _asyncToGenerator(function* (config) {\n      var filePath = _path().default.join(config.modRequest.platformProjectRoot, 'Podfile');\n      var contents = yield _fs().default.promises.readFile(filePath, 'utf-8');\n      var results;\n      var googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      var isLinked = isReactNativeMapsAutolinked(config);\n      debug('Is Expo Autolinked:', isLinked);\n      debug('react-native-maps path:', googleMapsPath);\n      if (isLinked && googleMapsPath && useGoogleMaps) {\n        try {\n          results = addMapsCocoaPods(contents);\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\"Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.\");\n          }\n          throw error;\n        }\n      } else {\n        results = removeMapsCocoaPods(contents);\n      }\n      if (results.didMerge || results.didClear) {\n        yield _fs().default.promises.writeFile(filePath, results.contents);\n      }\n      return config;\n    });\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }()]);\n};\nvar withGoogleMapsAppDelegate = function withGoogleMapsAppDelegate(config, _ref4) {\n  var apiKey = _ref4.apiKey;\n  return (0, _iosPlugins().withAppDelegate)(config, function (config) {\n    if (['objc', 'objcpp'].includes(config.modResults.language)) {\n      if (apiKey && isReactNativeMapsAutolinked(config) && isReactNativeMapsInstalled(config.modRequest.projectRoot)) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(config.modResults.contents).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(config.modResults.contents, apiKey).contents;\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\"Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.\");\n          }\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(config.modResults.contents).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(config.modResults.contents).contents;\n      }\n    } else {\n      throw new Error(\"Cannot setup Google Maps because the project AppDelegate is not a supported language: \" + config.modResults.language);\n    }\n    return config;\n  });\n};","map":{"version":3,"names":["_fs","data","_interopRequireDefault","require","_path","_resolveFrom","_iosPlugins","_withDangerousMod","_generateCode","debug","MATCH_INIT","withGoogleMapsKey","createInfoPlistPlugin","setGoogleMapsApiKey","withMaps","config","apiKey","getGoogleMapsApiKey","withMapsCocoaPods","useGoogleMaps","withGoogleMapsAppDelegate","_config$ios$config$go","_config$ios","_config$ios$config","ios","googleMapsApiKey","_ref","GMSApiKey","infoPlist","_objectWithoutProperties","_excluded","_objectSpread","addGoogleMapsAppDelegateImport","src","newSrc","push","mergeContents","tag","join","anchor","offset","comment","removeGoogleMapsAppDelegateImport","removeContents","addGoogleMapsAppDelegateInit","removeGoogleMapsAppDelegateInit","addMapsCocoaPods","removeMapsCocoaPods","isReactNativeMapsInstalled","projectRoot","resolved","default","silent","dirname","isReactNativeMapsAutolinked","_ref2","withDangerousMod","_ref3","_asyncToGenerator","filePath","modRequest","platformProjectRoot","contents","promises","readFile","results","googleMapsPath","isLinked","error","code","Error","didMerge","didClear","writeFile","_x","apply","arguments","_ref4","withAppDelegate","includes","modResults","language"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/ios/Maps.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin, InfoPlist } from '../Plugin.types';\nimport { createInfoPlistPlugin, withAppDelegate } from '../plugins/ios-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { mergeContents, MergeResults, removeContents } from '../utils/generateCode';\n\nconst debug = require('debug')('expo:config-plugins:ios:maps') as typeof console.log;\n\n// Match against `UMModuleRegistryAdapter` (unimodules), and React Native without unimodules (Expo Modules), and SDK +44 React AppDelegate subscriber.\nexport const MATCH_INIT = /(?:(self\\.|_)(\\w+)\\s?=\\s?\\[\\[UMModuleRegistryAdapter alloc\\])|(?:RCTBridge\\s?\\*\\s?(\\w+)\\s?=\\s?\\[\\[RCTBridge alloc\\])|(\\[self\\.reactDelegate createBridgeWithDelegate:self launchOptions:launchOptions\\])/g;\n\nconst withGoogleMapsKey = createInfoPlistPlugin(setGoogleMapsApiKey, 'withGoogleMapsKey');\n\nexport const withMaps: ConfigPlugin = config => {\n  config = withGoogleMapsKey(config);\n\n  const apiKey = getGoogleMapsApiKey(config);\n  // Technically adds react-native-maps (Apple maps) and google maps.\n\n  debug('Google Maps API Key:', apiKey);\n  config = withMapsCocoaPods(config, { useGoogleMaps: !!apiKey });\n\n  // Adds/Removes AppDelegate setup for Google Maps API on iOS\n  config = withGoogleMapsAppDelegate(config, { apiKey });\n\n  return config;\n};\n\nexport function getGoogleMapsApiKey(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleMapsApiKey ?? null;\n}\n\nexport function setGoogleMapsApiKey(\n  config: Pick<ExpoConfig, 'ios'>,\n  { GMSApiKey, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const apiKey = getGoogleMapsApiKey(config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GMSApiKey: apiKey,\n  };\n}\n\nexport function addGoogleMapsAppDelegateImport(src: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    '#import <GoogleMaps/GoogleMaps.h>',\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateImport(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-import',\n    src,\n  });\n}\n\nexport function addGoogleMapsAppDelegateInit(src: string, apiKey: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    `  [GMSServices provideAPIKey:@\"${apiKey}\"];`,\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-init',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 0,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateInit(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-init',\n    src,\n  });\n}\n\n/**\n * @param src The contents of the Podfile.\n * @returns Podfile with Google Maps added.\n */\nexport function addMapsCocoaPods(src: string): MergeResults {\n  return mergeContents({\n    tag: 'react-native-maps',\n    src,\n    newSrc: `  pod 'react-native-google-maps', path: File.dirname(\\`node --print \"require.resolve('react-native-maps/package.json')\"\\`)`,\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#',\n  });\n}\n\nexport function removeMapsCocoaPods(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps',\n    src,\n  });\n}\n\nfunction isReactNativeMapsInstalled(projectRoot: string): string | null {\n  const resolved = resolveFrom.silent(projectRoot, 'react-native-maps/package.json');\n  return resolved ? path.dirname(resolved) : null;\n}\n\nfunction isReactNativeMapsAutolinked(config: Pick<ExpoConfig, '_internal'>): boolean {\n  // Only add the native code changes if we know that the package is going to be linked natively.\n  // This is specifically for monorepo support where one app might have react-native-maps (adding it to the node_modules)\n  // but another app will not have it installed in the package.json, causing it to not be linked natively.\n  // This workaround only exists because react-native-maps doesn't have a config plugin vendored in the package.\n\n  // TODO: `react-native-maps` doesn't use Expo autolinking so we cannot safely disable the module.\n  return true;\n\n  // return (\n  //   !config._internal?.autolinkedModules ||\n  //   config._internal.autolinkedModules.includes('react-native-maps')\n  // );\n}\n\nconst withMapsCocoaPods: ConfigPlugin<{ useGoogleMaps: boolean }> = (config, { useGoogleMaps }) => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      const filePath = path.join(config.modRequest.platformProjectRoot, 'Podfile');\n      const contents = await fs.promises.readFile(filePath, 'utf-8');\n      let results: MergeResults;\n      // Only add the block if react-native-maps is installed in the project (best effort).\n      // Generally prebuild runs after a yarn install so this should always work as expected.\n      const googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      const isLinked = isReactNativeMapsAutolinked(config);\n      debug('Is Expo Autolinked:', isLinked);\n      debug('react-native-maps path:', googleMapsPath);\n      if (isLinked && googleMapsPath && useGoogleMaps) {\n        try {\n          results = addMapsCocoaPods(contents);\n        } catch (error: any) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        // If the package is no longer installed, then remove the block.\n        results = removeMapsCocoaPods(contents);\n      }\n      if (results.didMerge || results.didClear) {\n        await fs.promises.writeFile(filePath, results.contents);\n      }\n      return config;\n    },\n  ]);\n};\n\nconst withGoogleMapsAppDelegate: ConfigPlugin<{ apiKey: string | null }> = (config, { apiKey }) => {\n  return withAppDelegate(config, config => {\n    if (['objc', 'objcpp'].includes(config.modResults.language)) {\n      if (\n        apiKey &&\n        isReactNativeMapsAutolinked(config) &&\n        isReactNativeMapsInstalled(config.modRequest.projectRoot)\n      ) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(\n            config.modResults.contents\n          ).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(\n            config.modResults.contents,\n            apiKey\n          ).contents;\n        } catch (error: any) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(\n          config.modResults.contents\n        ).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(\n          config.modResults.contents\n        ).contents;\n      }\n    } else {\n      throw new Error(\n        `Cannot setup Google Maps because the project AppDelegate is not a supported language: ${config.modResults.language}`\n      );\n    }\n    return config;\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}