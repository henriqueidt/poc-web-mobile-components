{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExpoUpdatesPackageVersion = getExpoUpdatesPackageVersion;\nexports.getNativeVersion = getNativeVersion;\nexports.getRuntimeVersion = getRuntimeVersion;\nexports.getRuntimeVersionNullable = getRuntimeVersionNullable;\nexports.getSDKVersion = getSDKVersion;\nexports.getUpdateUrl = getUpdateUrl;\nexports.getUpdatesCheckOnLaunch = getUpdatesCheckOnLaunch;\nexports.getUpdatesCodeSigningCertificate = getUpdatesCodeSigningCertificate;\nexports.getUpdatesCodeSigningMetadata = getUpdatesCodeSigningMetadata;\nexports.getUpdatesCodeSigningMetadataStringified = getUpdatesCodeSigningMetadataStringified;\nexports.getUpdatesEnabled = getUpdatesEnabled;\nexports.getUpdatesTimeout = getUpdatesTimeout;\nexports.withRuntimeVersion = void 0;\nfunction _sdkRuntimeVersions() {\n  var data = require(\"@expo/sdk-runtime-versions\");\n  _sdkRuntimeVersions = function _sdkRuntimeVersions() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _() {\n  var data = require(\"..\");\n  _ = function _() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getExpoUpdatesPackageVersion(projectRoot) {\n  var expoUpdatesPackageJsonPath = _resolveFrom().default.silent(projectRoot, 'expo-updates/package.json');\n  if (!expoUpdatesPackageJsonPath || !_fs().default.existsSync(expoUpdatesPackageJsonPath)) {\n    return null;\n  }\n  var packageJson = JSON.parse(_fs().default.readFileSync(expoUpdatesPackageJsonPath, 'utf8'));\n  return packageJson.version;\n}\nfunction getUpdateUrl(config, username) {\n  var _config$updates;\n  if ((_config$updates = config.updates) !== null && _config$updates !== void 0 && _config$updates.url) {\n    var _config$updates2;\n    return (_config$updates2 = config.updates) === null || _config$updates2 === void 0 ? void 0 : _config$updates2.url;\n  }\n  var user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return \"https://exp.host/@\" + user + \"/\" + config.slug;\n}\nfunction getNativeVersion(config, platform) {\n  var version = _().IOSConfig.Version.getVersion(config);\n  switch (platform) {\n    case 'ios':\n      {\n        var buildNumber = _().IOSConfig.Version.getBuildNumber(config);\n        return version + \"(\" + buildNumber + \")\";\n      }\n    case 'android':\n      {\n        var versionCode = _().AndroidConfig.Version.getVersionCode(config);\n        return version + \"(\" + versionCode + \")\";\n      }\n    default:\n      {\n        throw new Error(\"\\\"\" + platform + \"\\\" is not a supported platform. Choose either \\\"ios\\\" or \\\"android\\\".\");\n      }\n  }\n}\nvar withRuntimeVersion = function withRuntimeVersion(config) {\n  var _config$ios, _config$android;\n  if ((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.runtimeVersion || config.runtimeVersion) {\n    var runtimeVersion = getRuntimeVersion(config, 'ios');\n    if (runtimeVersion) {\n      config.ios = _objectSpread(_objectSpread({}, config.ios), {}, {\n        runtimeVersion: runtimeVersion\n      });\n    }\n  }\n  if ((_config$android = config.android) !== null && _config$android !== void 0 && _config$android.runtimeVersion || config.runtimeVersion) {\n    var _runtimeVersion = getRuntimeVersion(config, 'android');\n    if (_runtimeVersion) {\n      config.android = _objectSpread(_objectSpread({}, config.android), {}, {\n        runtimeVersion: _runtimeVersion\n      });\n    }\n  }\n  delete config.runtimeVersion;\n  return config;\n};\nexports.withRuntimeVersion = withRuntimeVersion;\nfunction getRuntimeVersionNullable() {\n  for (var _len = arguments.length, _ref = new Array(_len), _key = 0; _key < _len; _key++) {\n    _ref[_key] = arguments[_key];\n  }\n  var config = _ref[0],\n    platform = _ref[1];\n  try {\n    return getRuntimeVersion(config, platform);\n  } catch (e) {\n    if ((0, _getenv().boolish)('EXPO_DEBUG', false)) {\n      console.log(e);\n    }\n    return null;\n  }\n}\nfunction getRuntimeVersion(config, platform) {\n  var _config$platform$runt, _config$platform;\n  var runtimeVersion = (_config$platform$runt = (_config$platform = config[platform]) === null || _config$platform === void 0 ? void 0 : _config$platform.runtimeVersion) !== null && _config$platform$runt !== void 0 ? _config$platform$runt : config.runtimeVersion;\n  if (!runtimeVersion) {\n    return null;\n  }\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n    return (0, _sdkRuntimeVersions().getRuntimeVersionForSDKVersion)(config.sdkVersion);\n  }\n  throw new Error(\"\\\"\" + (typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion) + \"\\\" is not a valid runtime version. getRuntimeVersion only supports a string, \\\"sdkVersion\\\", or \\\"nativeVersion\\\" policy.\");\n}\nfunction getSDKVersion(config) {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\nfunction getUpdatesEnabled(config) {\n  var _config$updates3;\n  return ((_config$updates3 = config.updates) === null || _config$updates3 === void 0 ? void 0 : _config$updates3.enabled) !== false;\n}\nfunction getUpdatesTimeout(config) {\n  var _config$updates$fallb, _config$updates4;\n  return (_config$updates$fallb = (_config$updates4 = config.updates) === null || _config$updates4 === void 0 ? void 0 : _config$updates4.fallbackToCacheTimeout) !== null && _config$updates$fallb !== void 0 ? _config$updates$fallb : 0;\n}\nfunction getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion) {\n  var _config$updates5, _config$updates6;\n  if (((_config$updates5 = config.updates) === null || _config$updates5 === void 0 ? void 0 : _config$updates5.checkAutomatically) === 'ON_ERROR_RECOVERY') {\n    if (expoUpdatesPackageVersion && _semver().default.gte(expoUpdatesPackageVersion, '0.11.0')) {\n      return 'ERROR_RECOVERY_ONLY';\n    }\n    return 'NEVER';\n  } else if (((_config$updates6 = config.updates) === null || _config$updates6 === void 0 ? void 0 : _config$updates6.checkAutomatically) === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\nfunction getUpdatesCodeSigningCertificate(projectRoot, config) {\n  var _config$updates7;\n  var codeSigningCertificatePath = (_config$updates7 = config.updates) === null || _config$updates7 === void 0 ? void 0 : _config$updates7.codeSigningCertificate;\n  if (!codeSigningCertificatePath) {\n    return undefined;\n  }\n  var finalPath = _path().default.join(projectRoot, codeSigningCertificatePath);\n  if (!_fs().default.existsSync(finalPath)) {\n    throw new Error(\"File not found at `updates.codeSigningCertificate` path: \" + finalPath);\n  }\n  return _fs().default.readFileSync(finalPath, 'utf8');\n}\nfunction getUpdatesCodeSigningMetadata(config) {\n  var _config$updates8;\n  return (_config$updates8 = config.updates) === null || _config$updates8 === void 0 ? void 0 : _config$updates8.codeSigningMetadata;\n}\nfunction getUpdatesCodeSigningMetadataStringified(config) {\n  var metadata = getUpdatesCodeSigningMetadata(config);\n  if (!metadata) {\n    return undefined;\n  }\n  return JSON.stringify(metadata);\n}","map":{"version":3,"names":["_sdkRuntimeVersions","data","require","_fs","_interopRequireDefault","_getenv","_path","_resolveFrom","_semver","_","getExpoUpdatesPackageVersion","projectRoot","expoUpdatesPackageJsonPath","default","silent","existsSync","packageJson","JSON","parse","readFileSync","version","getUpdateUrl","config","username","_config$updates","updates","url","_config$updates2","user","owner","slug","getNativeVersion","platform","IOSConfig","Version","getVersion","buildNumber","getBuildNumber","versionCode","AndroidConfig","getVersionCode","Error","withRuntimeVersion","_config$ios","_config$android","ios","runtimeVersion","getRuntimeVersion","_objectSpread","android","getRuntimeVersionNullable","_len","arguments","length","_ref","Array","_key","e","boolish","console","log","_config$platform$runt","_config$platform","policy","sdkVersion","getRuntimeVersionForSDKVersion","stringify","getSDKVersion","getUpdatesEnabled","_config$updates3","enabled","getUpdatesTimeout","_config$updates$fallb","_config$updates4","fallbackToCacheTimeout","getUpdatesCheckOnLaunch","expoUpdatesPackageVersion","_config$updates5","_config$updates6","checkAutomatically","gte","getUpdatesCodeSigningCertificate","_config$updates7","codeSigningCertificatePath","codeSigningCertificate","undefined","finalPath","join","getUpdatesCodeSigningMetadata","_config$updates8","codeSigningMetadata","getUpdatesCodeSigningMetadataStringified","metadata"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/utils/Updates.ts"],"sourcesContent":["import { Android, ExpoConfig, IOS } from '@expo/config-types';\nimport { getRuntimeVersionForSDKVersion } from '@expo/sdk-runtime-versions';\nimport fs from 'fs';\nimport { boolish } from 'getenv';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { AndroidConfig, IOSConfig } from '..';\n\nexport type ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport function getExpoUpdatesPackageVersion(projectRoot: string): string | null {\n  const expoUpdatesPackageJsonPath = resolveFrom.silent(projectRoot, 'expo-updates/package.json');\n  if (!expoUpdatesPackageJsonPath || !fs.existsSync(expoUpdatesPackageJsonPath)) {\n    return null;\n  }\n  const packageJson = JSON.parse(fs.readFileSync(expoUpdatesPackageJsonPath, 'utf8'));\n  return packageJson.version;\n}\n\nexport function getUpdateUrl(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug' | 'updates'>,\n  username: string | null\n): string | null {\n  if (config.updates?.url) {\n    return config.updates?.url;\n  }\n\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getNativeVersion(\n  config: Pick<ExpoConfig, 'version'> & {\n    android?: Pick<Android, 'versionCode'>;\n    ios?: Pick<IOS, 'buildNumber'>;\n  },\n  platform: 'android' | 'ios'\n): string {\n  const version = IOSConfig.Version.getVersion(config);\n  switch (platform) {\n    case 'ios': {\n      const buildNumber = IOSConfig.Version.getBuildNumber(config);\n      return `${version}(${buildNumber})`;\n    }\n    case 'android': {\n      const versionCode = AndroidConfig.Version.getVersionCode(config);\n      return `${version}(${versionCode})`;\n    }\n    default: {\n      throw new Error(\n        `\"${platform}\" is not a supported platform. Choose either \"ios\" or \"android\".`\n      );\n    }\n  }\n}\n\n/**\n * Compute runtime version policies.\n * @return an expoConfig with only string valued platform specific runtime versions.\n */\nexport const withRuntimeVersion: (config: ExpoConfig) => ExpoConfig = config => {\n  if (config.ios?.runtimeVersion || config.runtimeVersion) {\n    const runtimeVersion = getRuntimeVersion(config, 'ios');\n    if (runtimeVersion) {\n      config.ios = {\n        ...config.ios,\n        runtimeVersion,\n      };\n    }\n  }\n  if (config.android?.runtimeVersion || config.runtimeVersion) {\n    const runtimeVersion = getRuntimeVersion(config, 'android');\n    if (runtimeVersion) {\n      config.android = {\n        ...config.android,\n        runtimeVersion,\n      };\n    }\n  }\n  delete config.runtimeVersion;\n  return config;\n};\n\nexport function getRuntimeVersionNullable(\n  ...[config, platform]: Parameters<typeof getRuntimeVersion>\n): string | null {\n  try {\n    return getRuntimeVersion(config, platform);\n  } catch (e) {\n    if (boolish('EXPO_DEBUG', false)) {\n      console.log(e);\n    }\n    return null;\n  }\n}\n\nexport function getRuntimeVersion(\n  config: Pick<ExpoConfig, 'version' | 'runtimeVersion' | 'sdkVersion'> & {\n    android?: Pick<Android, 'versionCode' | 'runtimeVersion'>;\n    ios?: Pick<IOS, 'buildNumber' | 'runtimeVersion'>;\n  },\n  platform: 'android' | 'ios'\n): string | null {\n  const runtimeVersion = config[platform]?.runtimeVersion ?? config.runtimeVersion;\n  if (!runtimeVersion) {\n    return null;\n  }\n\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n    return getRuntimeVersionForSDKVersion(config.sdkVersion);\n  }\n\n  throw new Error(\n    `\"${\n      typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion\n    }\" is not a valid runtime version. getRuntimeVersion only supports a string, \"sdkVersion\", or \"nativeVersion\" policy.`\n  );\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return config.updates?.enabled !== false;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>): number {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>,\n  expoUpdatesPackageVersion?: string | null\n): 'NEVER' | 'ERROR_RECOVERY_ONLY' | 'ALWAYS' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    // native 'ERROR_RECOVERY_ONLY' option was only introduced in 0.11.x\n    if (expoUpdatesPackageVersion && semver.gte(expoUpdatesPackageVersion, '0.11.0')) {\n      return 'ERROR_RECOVERY_ONLY';\n    }\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  }\n  return 'ALWAYS';\n}\n\nexport function getUpdatesCodeSigningCertificate(\n  projectRoot: string,\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const codeSigningCertificatePath = config.updates?.codeSigningCertificate;\n  if (!codeSigningCertificatePath) {\n    return undefined;\n  }\n\n  const finalPath = path.join(projectRoot, codeSigningCertificatePath);\n  if (!fs.existsSync(finalPath)) {\n    throw new Error(`File not found at \\`updates.codeSigningCertificate\\` path: ${finalPath}`);\n  }\n\n  return fs.readFileSync(finalPath, 'utf8');\n}\n\nexport function getUpdatesCodeSigningMetadata(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): NonNullable<ExpoConfigUpdates['updates']>['codeSigningMetadata'] {\n  return config.updates?.codeSigningMetadata;\n}\n\nexport function getUpdatesCodeSigningMetadataStringified(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const metadata = getUpdatesCodeSigningMetadata(config);\n  if (!metadata) {\n    return undefined;\n  }\n\n  return JSON.stringify(metadata);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}