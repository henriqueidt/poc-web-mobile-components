{"ast":null,"code":"\"use strict\";\n\nvar babel = require(\"@babel/core\");\nmodule.exports = function injectCaller(opts, target) {\n  if (!supportsCallerOption()) return opts;\n  return Object.assign({}, opts, {\n    caller: Object.assign({\n      name: \"babel-loader\",\n      target: target,\n      supportsStaticESM: true,\n      supportsDynamicImport: true,\n      supportsTopLevelAwait: true\n    }, opts.caller)\n  });\n};\nvar supportsCallerOptionFlag = undefined;\nfunction supportsCallerOption() {\n  if (supportsCallerOptionFlag === undefined) {\n    try {\n      babel.loadPartialConfig({\n        caller: undefined,\n        babelrc: false,\n        configFile: false\n      });\n      supportsCallerOptionFlag = true;\n    } catch (err) {\n      supportsCallerOptionFlag = false;\n    }\n  }\n  return supportsCallerOptionFlag;\n}","map":{"version":3,"names":["babel","require","module","exports","injectCaller","opts","target","supportsCallerOption","Object","assign","caller","name","supportsStaticESM","supportsDynamicImport","supportsTopLevelAwait","supportsCallerOptionFlag","undefined","loadPartialConfig","babelrc","configFile","err"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/webpack-config/node_modules/babel-loader/lib/injectCaller.js"],"sourcesContent":["\"use strict\";\n\nconst babel = require(\"@babel/core\");\nmodule.exports = function injectCaller(opts, target) {\n  if (!supportsCallerOption()) return opts;\n  return Object.assign({}, opts, {\n    caller: Object.assign({\n      name: \"babel-loader\",\n      // Provide plugins with insight into webpack target.\n      // https://github.com/babel/babel-loader/issues/787\n      target,\n      // Webpack >= 2 supports ESM and dynamic import.\n      supportsStaticESM: true,\n      supportsDynamicImport: true,\n      // Webpack 5 supports TLA behind a flag. We enable it by default\n      // for Babel, and then webpack will throw an error if the experimental\n      // flag isn't enabled.\n      supportsTopLevelAwait: true\n    }, opts.caller)\n  });\n};\n\n// TODO: We can remove this eventually, I'm just adding it so that people have\n// a little time to migrate to the newer RCs of @babel/core without getting\n// hard-to-diagnose errors about unknown 'caller' options.\nlet supportsCallerOptionFlag = undefined;\nfunction supportsCallerOption() {\n  if (supportsCallerOptionFlag === undefined) {\n    try {\n      // Rather than try to match the Babel version, we just see if it throws\n      // when passed a 'caller' flag, and use that to decide if it is supported.\n      babel.loadPartialConfig({\n        caller: undefined,\n        babelrc: false,\n        configFile: false\n      });\n      supportsCallerOptionFlag = true;\n    } catch (err) {\n      supportsCallerOptionFlag = false;\n    }\n  }\n  return supportsCallerOptionFlag;\n}"],"mappings":"AAAA,YAAY;;AAEZ,IAAMA,KAAK,GAAGC,OAAO,CAAC,aAAa,CAAC;AACpCC,MAAM,CAACC,OAAO,GAAG,SAASC,YAAYA,CAACC,IAAI,EAAEC,MAAM,EAAE;EACnD,IAAI,CAACC,oBAAoB,EAAE,EAAE,OAAOF,IAAI;EACxC,OAAOG,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,IAAI,EAAE;IAC7BK,MAAM,EAAEF,MAAM,CAACC,MAAM,CAAC;MACpBE,IAAI,EAAE,cAAc;MAGpBL,MAAM,EAANA,MAAM;MAENM,iBAAiB,EAAE,IAAI;MACvBC,qBAAqB,EAAE,IAAI;MAI3BC,qBAAqB,EAAE;IACzB,CAAC,EAAET,IAAI,CAACK,MAAM;EAChB,CAAC,CAAC;AACJ,CAAC;AAKD,IAAIK,wBAAwB,GAAGC,SAAS;AACxC,SAAST,oBAAoBA,CAAA,EAAG;EAC9B,IAAIQ,wBAAwB,KAAKC,SAAS,EAAE;IAC1C,IAAI;MAGFhB,KAAK,CAACiB,iBAAiB,CAAC;QACtBP,MAAM,EAAEM,SAAS;QACjBE,OAAO,EAAE,KAAK;QACdC,UAAU,EAAE;MACd,CAAC,CAAC;MACFJ,wBAAwB,GAAG,IAAI;IACjC,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZL,wBAAwB,GAAG,KAAK;IAClC;EACF;EACA,OAAOA,wBAAwB;AACjC"},"metadata":{},"sourceType":"script","externalDependencies":[]}