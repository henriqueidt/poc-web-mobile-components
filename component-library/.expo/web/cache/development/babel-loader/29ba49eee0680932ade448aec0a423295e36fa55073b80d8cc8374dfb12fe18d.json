{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBlockedPermissions = addBlockedPermissions;\nexports.addPermission = addPermission;\nexports.addPermissionToManifest = addPermissionToManifest;\nexports.ensurePermission = ensurePermission;\nexports.ensurePermissionNameFormat = ensurePermissionNameFormat;\nexports.ensurePermissions = ensurePermissions;\nexports.getAndroidPermissions = getAndroidPermissions;\nexports.getPermissions = getPermissions;\nexports.isPermissionAlreadyRequested = isPermissionAlreadyRequested;\nexports.removePermissions = removePermissions;\nexports.setAndroidPermissions = setAndroidPermissions;\nexports.withPermissions = exports.withBlockedPermissions = void 0;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar USES_PERMISSION = 'uses-permission';\nvar withPermissions = function withPermissions(config, permissions) {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = _toConsumableArray(new Set(config.android.permissions.concat(permissions)));\n  }\n  return (0, _androidPlugins().withAndroidManifest)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setAndroidPermissions(config, config.modResults);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withPermissions = withPermissions;\nvar withBlockedPermissions = function withBlockedPermissions(config, permissions) {\n  var _config$android;\n  (0, _assert().default)(Array.isArray(permissions), 'permissions prop must be an array');\n  if (config !== null && config !== void 0 && (_config$android = config.android) !== null && _config$android !== void 0 && _config$android.permissions && Array.isArray(config.android.permissions)) {\n    config.android.permissions = config.android.permissions.filter(function (permission) {\n      return !permissions.includes(permission);\n    });\n  }\n  return (0, _androidPlugins().withAndroidManifest)(config, function () {\n    var _ref2 = _asyncToGenerator(function* (config) {\n      config.modResults = ensureToolsAvailable(config.modResults);\n      config.modResults = addBlockedPermissions(config.modResults, permissions);\n      return config;\n    });\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n};\nexports.withBlockedPermissions = withBlockedPermissions;\nfunction ensureToolsAvailable(manifest) {\n  var _manifest$manifest, _manifest$manifest$$;\n  if (manifest !== null && manifest !== void 0 && (_manifest$manifest = manifest.manifest) !== null && _manifest$manifest !== void 0 && (_manifest$manifest$$ = _manifest$manifest.$) !== null && _manifest$manifest$$ !== void 0 && _manifest$manifest$$['xmlns:tools']) {\n    return manifest;\n  }\n  manifest.manifest.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n  return manifest;\n}\nfunction addBlockedPermissions(androidManifest, permissions) {\n  if (!Array.isArray(androidManifest.manifest['uses-permission'])) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  for (var permission of permissions) {\n    androidManifest.manifest['uses-permission'] = ensureBlockedPermission(androidManifest.manifest['uses-permission'], permission);\n  }\n  return androidManifest;\n}\nfunction ensureBlockedPermission(manifestPermissions, permission) {\n  manifestPermissions = manifestPermissions.filter(function (e) {\n    return e.$['android:name'] !== permission;\n  });\n  manifestPermissions.push({\n    $: {\n      'android:name': permission,\n      'tools:node': 'remove'\n    }\n  });\n  return manifestPermissions;\n}\nfunction prefixAndroidPermissionsIfNecessary(permissions) {\n  return permissions.map(function (permission) {\n    if (!permission.includes('.')) {\n      return \"android.permission.\" + permission;\n    }\n    return permission;\n  });\n}\nfunction getAndroidPermissions(config) {\n  var _config$android$permi, _config$android2;\n  return (_config$android$permi = (_config$android2 = config.android) === null || _config$android2 === void 0 ? void 0 : _config$android2.permissions) !== null && _config$android$permi !== void 0 ? _config$android$permi : [];\n}\nfunction setAndroidPermissions(config, androidManifest) {\n  var _androidManifest$mani;\n  var permissions = getAndroidPermissions(config);\n  var providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n  var permissionsToAdd = _toConsumableArray(providedPermissions);\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  var manifestPermissions = (_androidManifest$mani = androidManifest.manifest['uses-permission']) !== null && _androidManifest$mani !== void 0 ? _androidManifest$mani : [];\n  permissionsToAdd.forEach(function (permission) {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n  return androidManifest;\n}\nfunction isPermissionAlreadyRequested(permission, manifestPermissions) {\n  return manifestPermissions.some(function (e) {\n    return e.$['android:name'] === permission;\n  });\n}\nfunction addPermissionToManifest(permission, manifestPermissions) {\n  manifestPermissions.push({\n    $: {\n      'android:name': permission\n    }\n  });\n  return manifestPermissions;\n}\nfunction removePermissions(androidManifest, permissionNames) {\n  var targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  var permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var nextPermissions = [];\n  for (var attribute of permissions) {\n    if (targetNames) {\n      var value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\nfunction addPermission(androidManifest, permissionName) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: {\n      'android:name': permissionName\n    }\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\nfunction ensurePermissions(androidManifest, permissionNames) {\n  var permissions = getPermissions(androidManifest);\n  var results = {};\n  for (var permissionName of permissionNames) {\n    var targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\nfunction ensurePermission(androidManifest, permissionName) {\n  var permissions = getPermissions(androidManifest);\n  var targetName = ensurePermissionNameFormat(permissionName);\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\nfunction ensurePermissionNameFormat(permissionName) {\n  if (permissionName.includes('.')) {\n    var com = permissionName.split('.');\n    var name = com.pop();\n    return [].concat(_toConsumableArray(com), [name.toUpperCase()]).join('.');\n  } else {\n    return ensurePermissionNameFormat(\"android.permission.\" + permissionName);\n  }\n}\nfunction getPermissions(androidManifest) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var permissions = usesPermissions.map(function (permissionObject) {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","_androidPlugins","USES_PERMISSION","withPermissions","config","permissions","Array","isArray","filter","Boolean","android","_toConsumableArray","Set","concat","withAndroidManifest","_ref","_asyncToGenerator","modResults","setAndroidPermissions","_x","apply","arguments","withBlockedPermissions","_config$android","default","permission","includes","_ref2","ensureToolsAvailable","addBlockedPermissions","_x2","manifest","_manifest$manifest","_manifest$manifest$$","$","androidManifest","ensureBlockedPermission","manifestPermissions","e","push","prefixAndroidPermissionsIfNecessary","map","getAndroidPermissions","_config$android$permi","_config$android2","_androidManifest$mani","providedPermissions","permissionsToAdd","hasOwnProperty","forEach","isPermissionAlreadyRequested","addPermissionToManifest","some","removePermissions","permissionNames","targetNames","ensurePermissionNameFormat","nextPermissions","attribute","value","name","addPermission","permissionName","usesPermissions","ensurePermissions","getPermissions","results","targetName","ensurePermission","com","split","pop","toUpperCase","join","permissionObject"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/android/Permissions.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { AndroidManifest, ManifestUsesPermission } from './Manifest';\n\nconst USES_PERMISSION = 'uses-permission';\n\nexport const withPermissions: ConfigPlugin<string[] | void> = (config, permissions) => {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = [\n      // @ts-ignore\n      ...new Set(config.android.permissions.concat(permissions)),\n    ];\n  }\n  return withAndroidManifest(config, async config => {\n    config.modResults = await setAndroidPermissions(config, config.modResults);\n    return config;\n  });\n};\n\nexport const withBlockedPermissions: ConfigPlugin<string[]> = (config, permissions) => {\n  assert(Array.isArray(permissions), 'permissions prop must be an array');\n\n  if (config?.android?.permissions && Array.isArray(config.android.permissions)) {\n    // Remove any static config permissions\n    config.android.permissions = config.android.permissions.filter(\n      permission => !permissions.includes(permission)\n    );\n  }\n\n  return withAndroidManifest(config, async config => {\n    config.modResults = ensureToolsAvailable(config.modResults);\n    config.modResults = addBlockedPermissions(config.modResults, permissions);\n\n    return config;\n  });\n};\n\n/**\n * Ensure the `tools:*` namespace is available in the manifest.\n *\n * @param manifest AndroidManifest.xml\n * @returns manifest with the `tools:*` namespace available\n */\nfunction ensureToolsAvailable(manifest: AndroidManifest) {\n  if (manifest?.manifest?.$?.['xmlns:tools']) {\n    return manifest;\n  }\n  manifest.manifest.$['xmlns:tools'] = 'http://schemas.android.com/tools';\n  return manifest;\n}\n\nexport function addBlockedPermissions(androidManifest: AndroidManifest, permissions: string[]) {\n  if (!Array.isArray(androidManifest.manifest['uses-permission'])) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n\n  for (const permission of permissions) {\n    androidManifest.manifest['uses-permission'] = ensureBlockedPermission(\n      androidManifest.manifest['uses-permission'],\n      permission\n    );\n  }\n\n  return androidManifest;\n}\n\n/**\n * Filter any existing permissions matching the provided permission name, then add a\n * restricted permission to overwrite any extra permissions that may be added in a\n * third-party package's AndroidManifest.xml.\n *\n * @param manifestPermissions manifest `uses-permissions` array.\n * @param permission `android:name` of the permission to restrict\n * @returns\n */\nfunction ensureBlockedPermission(\n  manifestPermissions: ManifestUsesPermission[],\n  permission: string\n) {\n  // Remove permission if it currently exists\n  manifestPermissions = manifestPermissions.filter(e => e.$['android:name'] !== permission);\n\n  // Add a permission with tools:node to overwrite any existing permission and ensure it's removed upon building.\n  manifestPermissions.push({\n    $: { 'android:name': permission, 'tools:node': 'remove' },\n  });\n  return manifestPermissions;\n}\n\nfunction prefixAndroidPermissionsIfNecessary(permissions: string[]): string[] {\n  return permissions.map(permission => {\n    if (!permission.includes('.')) {\n      return `android.permission.${permission}`;\n    }\n    return permission;\n  });\n}\n\nexport function getAndroidPermissions(config: Pick<ExpoConfig, 'android'>): string[] {\n  return config.android?.permissions ?? [];\n}\n\nexport function setAndroidPermissions(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const permissions = getAndroidPermissions(config);\n  const providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n  const permissionsToAdd = [...providedPermissions];\n\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  // manifest.manifest['uses-permission'] = [];\n\n  const manifestPermissions = androidManifest.manifest['uses-permission'] ?? [];\n\n  permissionsToAdd.forEach(permission => {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n\n  return androidManifest;\n}\n\nexport function isPermissionAlreadyRequested(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n): boolean {\n  return manifestPermissions.some(e => e.$['android:name'] === permission);\n}\n\nexport function addPermissionToManifest(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n) {\n  manifestPermissions.push({ $: { 'android:name': permission } });\n  return manifestPermissions;\n}\n\nexport function removePermissions(androidManifest: AndroidManifest, permissionNames?: string[]) {\n  const targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  const permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  const nextPermissions = [];\n  for (const attribute of permissions) {\n    if (targetNames) {\n      // @ts-ignore: name isn't part of the type\n      const value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\n\nexport function addPermission(androidManifest: AndroidManifest, permissionName: string): void {\n  const usesPermissions: ManifestUsesPermission[] = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: { 'android:name': permissionName },\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\n\nexport function ensurePermissions(\n  androidManifest: AndroidManifest,\n  permissionNames: string[]\n): { [permission: string]: boolean } {\n  const permissions = getPermissions(androidManifest);\n\n  const results: { [permission: string]: boolean } = {};\n  for (const permissionName of permissionNames) {\n    const targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\n\nexport function ensurePermission(\n  androidManifest: AndroidManifest,\n  permissionName: string\n): boolean {\n  const permissions = getPermissions(androidManifest);\n  const targetName = ensurePermissionNameFormat(permissionName);\n\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\n\nexport function ensurePermissionNameFormat(permissionName: string): string {\n  if (permissionName.includes('.')) {\n    const com = permissionName.split('.');\n    const name = com.pop() as string;\n    return [...com, name.toUpperCase()].join('.');\n  } else {\n    // If shorthand form like `WRITE_CONTACTS` is provided, expand it to `android.permission.WRITE_CONTACTS`.\n    return ensurePermissionNameFormat(`android.permission.${permissionName}`);\n  }\n}\n\nexport function getPermissions(androidManifest: AndroidManifest): string[] {\n  const usesPermissions: { [key: string]: any }[] = androidManifest.manifest[USES_PERMISSION] || [];\n  const permissions = usesPermissions.map(permissionObject => {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}