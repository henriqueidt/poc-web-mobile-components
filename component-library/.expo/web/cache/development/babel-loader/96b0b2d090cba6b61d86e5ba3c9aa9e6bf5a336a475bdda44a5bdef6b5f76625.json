{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRunOncePlugin = createRunOncePlugin;\nexports.withRunOnce = void 0;\nfunction _history() {\n  var data = require(\"../utils/history\");\n  _history = function _history() {\n    return data;\n  };\n  return data;\n}\nvar withRunOnce = function withRunOnce(config, _ref) {\n  var plugin = _ref.plugin,\n    name = _ref.name,\n    version = _ref.version;\n  if ((0, _history().getHistoryItem)(config, name)) {\n    return config;\n  }\n  config = (0, _history().addHistoryItem)(config, {\n    name: name,\n    version: version\n  });\n  return plugin(config);\n};\nexports.withRunOnce = withRunOnce;\nfunction createRunOncePlugin(_plugin, name, version) {\n  return function (config, props) {\n    return withRunOnce(config, {\n      plugin: function plugin(config) {\n        return _plugin(config, props);\n      },\n      name: name,\n      version: version\n    });\n  };\n}","map":{"version":3,"names":["_history","data","require","withRunOnce","config","_ref","plugin","name","version","getHistoryItem","addHistoryItem","createRunOncePlugin","props"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/plugins/withRunOnce.ts"],"sourcesContent":["import { ConfigPlugin } from '../Plugin.types';\nimport { addHistoryItem, getHistoryItem, PluginHistoryItem } from '../utils/history';\n\n/**\n * Prevents the same plugin from being run twice.\n * Used for migrating from unversioned expo config plugins to versioned plugins.\n *\n * @param config\n * @param name\n */\nexport const withRunOnce: ConfigPlugin<{\n  plugin: ConfigPlugin<void>;\n  name: PluginHistoryItem['name'];\n  version?: PluginHistoryItem['version'];\n}> = (config, { plugin, name, version }) => {\n  // Detect if a plugin has already been run on this config.\n  if (getHistoryItem(config, name)) {\n    return config;\n  }\n\n  // Push the history item so duplicates cannot be run.\n  config = addHistoryItem(config, { name, version });\n\n  return plugin(config);\n};\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createRunOncePlugin<T>(\n  plugin: ConfigPlugin<T>,\n  name: string,\n  version?: string\n): ConfigPlugin<T> {\n  return (config, props) => {\n    return withRunOnce(config, { plugin: config => plugin(config, props), name, version });\n  };\n}\n"],"mappings":";;;;;;;AACA,SAAAA,SAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,QAAA,YAAAA,SAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AASO,IAAME,WAIX,GAAG,SAJQA,WAIXA,CAAIC,MAAD,EAAAC,IAAA,EAAuC;EAAA,IAA5BC,MAAF,GAAAD,IAAA,CAAEC,MAAF;IAAUC,IAAV,GAAAF,IAAA,CAAUE,IAAV;IAAgBC,OAAA,GAAAH,IAAA,CAAAG,OAAA;EAE5B,IAAI,IAAAR,QAAA,GAAAS,cAAA,EAAeL,MAAf,EAAuBG,IAAvB,CAAJ,EAAkC;IAChC,OAAOH,MAAP;EACD;EAGDA,MAAM,GAAG,IAAAJ,QAAA,GAAAU,cAAA,EAAeN,MAAf,EAAuB;IAAEG,IAAF,EAAEA,IAAF;IAAQC,OAAA,EAAAA;EAAR,CAAvB,CAAT;EAEA,OAAOF,MAAM,CAACF,MAAD,CAAb;AACD,CAdM;;AAqBA,SAASO,mBAATA,CACLL,OADK,EAELC,IAFK,EAGLC,OAHK,EAIY;EACjB,OAAO,UAACJ,MAAD,EAASQ,KAAT,EAAmB;IACxB,OAAOT,WAAW,CAACC,MAAD,EAAS;MAAEE,MAAM,EAAE,SAAAA,OAAAF,MAAM;QAAA,OAAIE,OAAM,CAACF,MAAD,EAASQ,KAAT,CAA1B;MAAA;MAA2CL,IAA3C,EAA2CA,IAA3C;MAAiDC,OAAA,EAAAA;IAAjD,CAAT,CAAlB;EACD,CAFD;AAGD"},"metadata":{},"sourceType":"script","externalDependencies":[]}