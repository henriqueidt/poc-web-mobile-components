{"ast":null,"code":"\"use strict\";\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = void 0;\nvar xmldom_1 = require(\"@xmldom/xmldom\");\nvar assert_1 = __importDefault(require(\"assert\"));\nvar TEXT_NODE = 3;\nvar CDATA_NODE = 4;\nvar COMMENT_NODE = 8;\nfunction shouldIgnoreNode(node) {\n  return node.nodeType === TEXT_NODE || node.nodeType === COMMENT_NODE || node.nodeType === CDATA_NODE;\n}\nfunction isEmptyNode(node) {\n  return !node.childNodes || node.childNodes.length === 0;\n}\nfunction parse(xml) {\n  var doc = new xmldom_1.DOMParser({\n    errorHandler: function errorHandler() {}\n  }).parseFromString(xml);\n  assert_1.default(doc.documentElement.nodeName === 'plist', 'malformed document. First element should be <plist>');\n  var plist = parsePlistXML(doc.documentElement);\n  if (plist.length == 1) plist = plist[0];\n  return plist;\n}\nexports.parse = parse;\nfunction parsePlistXML(node) {\n  var i, new_obj, key, new_arr, res, counter;\n  if (!node) return null;\n  if (node.nodeName === 'plist') {\n    new_arr = [];\n    if (isEmptyNode(node)) {\n      return new_arr;\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (!shouldIgnoreNode(node.childNodes[i])) {\n        new_arr.push(parsePlistXML(node.childNodes[i]));\n      }\n    }\n    return new_arr;\n  } else if (node.nodeName === 'dict') {\n    new_obj = {};\n    key = null;\n    counter = 0;\n    if (isEmptyNode(node)) {\n      return new_obj;\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (shouldIgnoreNode(node.childNodes[i])) continue;\n      if (counter % 2 === 0) {\n        assert_1.default(node.childNodes[i].nodeName === 'key', 'Missing key while parsing <dict/>.');\n        key = parsePlistXML(node.childNodes[i]);\n      } else {\n        assert_1.default(node.childNodes[i].nodeName !== 'key', 'Unexpected key \"' + parsePlistXML(node.childNodes[i]) + '\" while parsing <dict/>.');\n        new_obj[key] = parsePlistXML(node.childNodes[i]);\n      }\n      counter += 1;\n    }\n    if (counter % 2 === 1) {\n      throw new Error('Missing value for \"' + key + '\" while parsing <dict/>');\n    }\n    return new_obj;\n  } else if (node.nodeName === 'array') {\n    new_arr = [];\n    if (isEmptyNode(node)) {\n      return new_arr;\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (!shouldIgnoreNode(node.childNodes[i])) {\n        res = parsePlistXML(node.childNodes[i]);\n        if (res != null) new_arr.push(res);\n      }\n    }\n    return new_arr;\n  } else if (node.nodeName === '#text') {} else if (node.nodeName === 'key') {\n    if (isEmptyNode(node)) {\n      return '';\n    }\n    return node.childNodes[0].nodeValue;\n  } else if (node.nodeName === 'string') {\n    res = '';\n    if (isEmptyNode(node)) {\n      return res;\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      var type = node.childNodes[i].nodeType;\n      if (type === TEXT_NODE || type === CDATA_NODE) {\n        res += node.childNodes[i].nodeValue;\n      }\n    }\n    return res;\n  } else if (node.nodeName === 'integer') {\n    assert_1.default(!isEmptyNode(node), 'Cannot parse \"\" as integer.');\n    return parseInt(node.childNodes[0].nodeValue, 10);\n  } else if (node.nodeName === 'real') {\n    assert_1.default(!isEmptyNode(node), 'Cannot parse \"\" as real.');\n    res = '';\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (node.childNodes[i].nodeType === TEXT_NODE) {\n        res += node.childNodes[i].nodeValue;\n      }\n    }\n    return parseFloat(res);\n  } else if (node.nodeName === 'data') {\n    res = '';\n    if (isEmptyNode(node)) {\n      return Buffer.from(res, 'base64');\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (node.childNodes[i].nodeType === TEXT_NODE) {\n        res += node.childNodes[i].nodeValue.replace(/\\s+/g, '');\n      }\n    }\n    return Buffer.from(res, 'base64');\n  } else if (node.nodeName === 'date') {\n    assert_1.default(!isEmptyNode(node), 'Cannot parse \"\" as Date.');\n    return new Date(node.childNodes[0].nodeValue);\n  } else if (node.nodeName === 'true') {\n    return true;\n  } else if (node.nodeName === 'false') {\n    return false;\n  }\n}","map":{"version":3,"names":["xmldom_1","require","assert_1","__importDefault","TEXT_NODE","CDATA_NODE","COMMENT_NODE","shouldIgnoreNode","node","nodeType","isEmptyNode","childNodes","length","parse","xml","doc","DOMParser","errorHandler","parseFromString","default","documentElement","nodeName","plist","parsePlistXML","exports","i","new_obj","key","new_arr","res","counter","push","Error","nodeValue","type","parseInt","parseFloat","Buffer","from","replace","Date"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/plist/src/parse.ts"],"sourcesContent":["/* eslint-disable */\n/* (The MIT License)\n\nCopyright (c) 2010-2017 Nathan Rajlich <nathan@tootallnate.net>\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE. */\n\nimport { DOMParser } from '@xmldom/xmldom';\nimport assert from 'assert';\n\nconst TEXT_NODE = 3;\nconst CDATA_NODE = 4;\nconst COMMENT_NODE = 8;\n\n/**\n * We ignore raw text (usually whitespace), <!-- xml comments -->,\n * and raw CDATA nodes.\n *\n * @param {Element} node\n * @returns {Boolean}\n * @api private\n */\n\nfunction shouldIgnoreNode(node: { [key: string]: any }): boolean {\n  return (\n    node.nodeType === TEXT_NODE || node.nodeType === COMMENT_NODE || node.nodeType === CDATA_NODE\n  );\n}\n\n/**\n * Check if the node is empty. Some plist file has such node:\n * <key />\n * this node shoud be ignored.\n *\n * @see https://github.com/TooTallNate/plist.js/issues/66\n * @param {Element} node\n * @returns {Boolean}\n * @api private\n */\nfunction isEmptyNode(node: { [key: string]: any }): boolean {\n  return !node.childNodes || node.childNodes.length === 0;\n}\n\n/**\n * Parses a Plist XML string. Returns an Object.\n *\n * @param {String} xml - the XML String to decode\n * @returns {Mixed} the decoded value from the Plist XML\n * @api public\n */\n\nexport function parse(xml: string): any {\n  // prevent the parser from logging non-fatel errors\n  const doc = new DOMParser({ errorHandler() {} }).parseFromString(xml);\n  assert(\n    doc.documentElement.nodeName === 'plist',\n    'malformed document. First element should be <plist>'\n  );\n  let plist = parsePlistXML(doc.documentElement);\n\n  // the root <plist> node gets interpreted as an Array,\n  // so pull out the inner data first\n  if (plist.length == 1) plist = plist[0];\n\n  return plist;\n}\n\n/**\n * Convert an XML based plist document into a JSON representation.\n *\n * @param {Object} xml_node - current XML node in the plist\n * @returns {Mixed} built up JSON object\n * @api private\n */\n\nfunction parsePlistXML(node: { [key: string]: any }): any {\n  let i, new_obj: { [key: string]: any }, key, new_arr: any[], res, counter;\n\n  if (!node) return null;\n\n  if (node.nodeName === 'plist') {\n    new_arr = [];\n    if (isEmptyNode(node)) {\n      return new_arr;\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (!shouldIgnoreNode(node.childNodes[i])) {\n        new_arr.push(parsePlistXML(node.childNodes[i]));\n      }\n    }\n    return new_arr;\n  } else if (node.nodeName === 'dict') {\n    new_obj = {};\n    key = null;\n    counter = 0;\n    if (isEmptyNode(node)) {\n      return new_obj;\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (shouldIgnoreNode(node.childNodes[i])) continue;\n      if (counter % 2 === 0) {\n        assert(node.childNodes[i].nodeName === 'key', 'Missing key while parsing <dict/>.');\n        key = parsePlistXML(node.childNodes[i]);\n      } else {\n        assert(\n          node.childNodes[i].nodeName !== 'key',\n          'Unexpected key \"' + parsePlistXML(node.childNodes[i]) + '\" while parsing <dict/>.'\n        );\n        new_obj[key] = parsePlistXML(node.childNodes[i]);\n      }\n      counter += 1;\n    }\n    if (counter % 2 === 1) {\n      throw new Error('Missing value for \"' + key + '\" while parsing <dict/>');\n    }\n    return new_obj;\n  } else if (node.nodeName === 'array') {\n    new_arr = [];\n    if (isEmptyNode(node)) {\n      return new_arr;\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (!shouldIgnoreNode(node.childNodes[i])) {\n        res = parsePlistXML(node.childNodes[i]);\n        if (res != null) new_arr.push(res);\n      }\n    }\n    return new_arr;\n  } else if (node.nodeName === '#text') {\n    // TODO: what should we do with text types? (CDATA sections)\n  } else if (node.nodeName === 'key') {\n    if (isEmptyNode(node)) {\n      return '';\n    }\n    return node.childNodes[0].nodeValue;\n  } else if (node.nodeName === 'string') {\n    res = '';\n    if (isEmptyNode(node)) {\n      return res;\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      const type = node.childNodes[i].nodeType;\n      if (type === TEXT_NODE || type === CDATA_NODE) {\n        res += node.childNodes[i].nodeValue;\n      }\n    }\n    return res;\n  } else if (node.nodeName === 'integer') {\n    assert(!isEmptyNode(node), 'Cannot parse \"\" as integer.');\n    return parseInt(node.childNodes[0].nodeValue, 10);\n  } else if (node.nodeName === 'real') {\n    assert(!isEmptyNode(node), 'Cannot parse \"\" as real.');\n    res = '';\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (node.childNodes[i].nodeType === TEXT_NODE) {\n        res += node.childNodes[i].nodeValue;\n      }\n    }\n    return parseFloat(res);\n  } else if (node.nodeName === 'data') {\n    res = '';\n    if (isEmptyNode(node)) {\n      return Buffer.from(res, 'base64');\n    }\n    for (i = 0; i < node.childNodes.length; i++) {\n      if (node.childNodes[i].nodeType === TEXT_NODE) {\n        res += node.childNodes[i].nodeValue.replace(/\\s+/g, '');\n      }\n    }\n    return Buffer.from(res, 'base64');\n  } else if (node.nodeName === 'date') {\n    assert(!isEmptyNode(node), 'Cannot parse \"\" as Date.');\n    return new Date(node.childNodes[0].nodeValue);\n  } else if (node.nodeName === 'true') {\n    return true;\n  } else if (node.nodeName === 'false') {\n    return false;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}