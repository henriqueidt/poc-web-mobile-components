{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getApplicationIdAsync = getApplicationIdAsync;\nexports.getPackage = getPackage;\nexports.renamePackageOnDisk = renamePackageOnDisk;\nexports.renamePackageOnDiskForType = renamePackageOnDiskForType;\nexports.setPackageInAndroidManifest = setPackageInAndroidManifest;\nexports.setPackageInBuildGradle = setPackageInBuildGradle;\nexports.withPackageRefactor = exports.withPackageManifest = exports.withPackageGradle = void 0;\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _glob() {\n  var data = require(\"glob\");\n  _glob = function _glob() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n  _modules = function _modules() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:config-plugins:android:package');\nvar withPackageManifest = (0, _androidPlugins().createAndroidManifestPlugin)(setPackageInAndroidManifest, 'withPackageManifest');\nexports.withPackageManifest = withPackageManifest;\nvar withPackageGradle = function withPackageGradle(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setPackageInBuildGradle(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.package', \"Cannot automatically configure app build.gradle if it's not groovy\");\n    }\n    return config;\n  });\n};\nexports.withPackageGradle = withPackageGradle;\nvar withPackageRefactor = function withPackageRefactor(config) {\n  return (0, _withDangerousMod().withDangerousMod)(config, ['android', function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      yield renamePackageOnDisk(config, config.modRequest.projectRoot);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withPackageRefactor = withPackageRefactor;\nfunction getPackage(config) {\n  var _config$android$packa, _config$android;\n  return (_config$android$packa = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.package) !== null && _config$android$packa !== void 0 ? _config$android$packa : null;\n}\nfunction getPackageRoot(projectRoot, type) {\n  return _path().default.join(projectRoot, 'android', 'app', 'src', type, 'java');\n}\nfunction getCurrentPackageName(projectRoot, packageRoot) {\n  var mainApplication = (0, _Paths().getProjectFilePath)(projectRoot, 'MainApplication');\n  var packagePath = _path().default.dirname(mainApplication);\n  var packagePathParts = _path().default.relative(packageRoot, packagePath).split(_path().default.sep).filter(Boolean);\n  return packagePathParts.join('.');\n}\nfunction getCurrentPackageForProjectFile(projectRoot, packageRoot, fileName, type) {\n  var filePath = (0, _glob().sync)(_path().default.join(projectRoot, \"android/app/src/\" + type + \"/java/**/\" + fileName + \".@(java|kt)\"))[0];\n  if (!filePath) {\n    return null;\n  }\n  var packagePath = _path().default.dirname(filePath);\n  var packagePathParts = _path().default.relative(packageRoot, packagePath).split(_path().default.sep).filter(Boolean);\n  return packagePathParts.join('.');\n}\nfunction getCurrentPackageNameForType(projectRoot, type) {\n  var packageRoot = getPackageRoot(projectRoot, type);\n  if (type === 'main') {\n    return getCurrentPackageName(projectRoot, packageRoot);\n  }\n  return getCurrentPackageForProjectFile(projectRoot, packageRoot, '*', type);\n}\nfunction renamePackageOnDisk(_x2, _x3) {\n  return _renamePackageOnDisk.apply(this, arguments);\n}\nfunction _renamePackageOnDisk() {\n  _renamePackageOnDisk = _asyncToGenerator(function* (config, projectRoot) {\n    var newPackageName = getPackage(config);\n    if (newPackageName === null) {\n      return;\n    }\n    for (var type of ['main', 'debug']) {\n      yield renamePackageOnDiskForType({\n        projectRoot: projectRoot,\n        type: type,\n        packageName: newPackageName\n      });\n    }\n  });\n  return _renamePackageOnDisk.apply(this, arguments);\n}\nfunction renamePackageOnDiskForType(_x4) {\n  return _renamePackageOnDiskForType.apply(this, arguments);\n}\nfunction _renamePackageOnDiskForType() {\n  _renamePackageOnDiskForType = _asyncToGenerator(function* (_ref2) {\n    var _path$default, _path$default2;\n    var projectRoot = _ref2.projectRoot,\n      type = _ref2.type,\n      packageName = _ref2.packageName;\n    if (!packageName) {\n      return;\n    }\n    var currentPackageName = getCurrentPackageNameForType(projectRoot, type);\n    debug(\"Found package \\\"\" + currentPackageName + \"\\\" for type \\\"\" + type + \"\\\"\");\n    if (!currentPackageName || currentPackageName === packageName) {\n      return;\n    }\n    debug(\"Refactor \\\"\" + currentPackageName + \"\\\" to \\\"\" + packageName + \"\\\" for type \\\"\" + type + \"\\\"\");\n    var packageRoot = getPackageRoot(projectRoot, type);\n    if (!(yield (0, _modules().directoryExistsAsync)(packageRoot))) {\n      debug(\"- skipping refactor of missing directory: \" + packageRoot);\n      return;\n    }\n    var currentPackagePath = (_path$default = _path().default).join.apply(_path$default, [packageRoot].concat(_toConsumableArray(currentPackageName.split('.'))));\n    var newPackagePath = (_path$default2 = _path().default).join.apply(_path$default2, [packageRoot].concat(_toConsumableArray(packageName.split('.'))));\n    _fs().default.mkdirSync(newPackagePath, {\n      recursive: true\n    });\n    (0, _glob().sync)('**/*', {\n      cwd: currentPackagePath\n    }).forEach(function (relativePath) {\n      var filepath = _path().default.join(currentPackagePath, relativePath);\n      if (_fs().default.lstatSync(filepath).isFile()) {\n        moveFileSync(filepath, _path().default.join(newPackagePath, relativePath));\n      } else {\n        _fs().default.mkdirSync(filepath, {\n          recursive: true\n        });\n      }\n    });\n    var oldPathParts = currentPackageName.split('.');\n    while (oldPathParts.length) {\n      var _path$default3;\n      var pathToCheck = (_path$default3 = _path().default).join.apply(_path$default3, [packageRoot].concat(_toConsumableArray(oldPathParts)));\n      try {\n        var files = _fs().default.readdirSync(pathToCheck);\n        if (files.length === 0) {\n          _fs().default.rmdirSync(pathToCheck);\n        }\n      } finally {\n        oldPathParts.pop();\n      }\n    }\n    var filesToUpdate = _toConsumableArray((0, _glob().sync)('**/*', {\n      cwd: newPackagePath,\n      absolute: true\n    }));\n    if (type === 'main') {\n      filesToUpdate.push(_path().default.join(projectRoot, 'android', 'app', 'BUCK'));\n    }\n    filesToUpdate.forEach(function (filepath) {\n      try {\n        if (_fs().default.lstatSync(filepath).isFile()) {\n          var contents = _fs().default.readFileSync(filepath).toString();\n          contents = contents.replace(new RegExp(currentPackageName, 'g'), packageName);\n          _fs().default.writeFileSync(filepath, contents);\n        }\n      } catch (e) {\n        debug(\"Error updating \\\"\" + filepath + \"\\\" for type \\\"\" + type + \"\\\"\");\n      }\n    });\n  });\n  return _renamePackageOnDiskForType.apply(this, arguments);\n}\nfunction moveFileSync(src, dest) {\n  _fs().default.mkdirSync(_path().default.dirname(dest), {\n    recursive: true\n  });\n  _fs().default.renameSync(src, dest);\n}\nfunction setPackageInBuildGradle(config, buildGradle) {\n  var packageName = getPackage(config);\n  if (packageName === null) {\n    return buildGradle;\n  }\n  var pattern = new RegExp(\"applicationId ['\\\"].*['\\\"]\");\n  return buildGradle.replace(pattern, \"applicationId '\" + packageName + \"'\");\n}\nfunction setPackageInAndroidManifest(config, androidManifest) {\n  var packageName = getPackage(config);\n  if (packageName) {\n    androidManifest.manifest.$.package = packageName;\n  } else {\n    delete androidManifest.manifest.$.package;\n  }\n  return androidManifest;\n}\nfunction getApplicationIdAsync(_x5) {\n  return _getApplicationIdAsync.apply(this, arguments);\n}\nfunction _getApplicationIdAsync() {\n  _getApplicationIdAsync = _asyncToGenerator(function* (projectRoot) {\n    var _matchResult$;\n    var buildGradlePath = (0, _Paths().getAppBuildGradleFilePath)(projectRoot);\n    if (!_fs().default.existsSync(buildGradlePath)) {\n      return null;\n    }\n    var buildGradle = yield _fs().default.promises.readFile(buildGradlePath, 'utf8');\n    var matchResult = buildGradle.match(/applicationId ['\"](.*)['\"]/);\n    return (_matchResult$ = matchResult === null || matchResult === void 0 ? void 0 : matchResult[1]) !== null && _matchResult$ !== void 0 ? _matchResult$ : null;\n  });\n  return _getApplicationIdAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_debug","data","_interopRequireDefault","require","_fs","_glob","_path","_androidPlugins","_withDangerousMod","_modules","_warnings","_Paths","debug","default","withPackageManifest","createAndroidManifestPlugin","setPackageInAndroidManifest","withPackageGradle","config","withAppBuildGradle","modResults","language","contents","setPackageInBuildGradle","addWarningAndroid","withPackageRefactor","withDangerousMod","_ref","_asyncToGenerator","renamePackageOnDisk","modRequest","projectRoot","_x","apply","arguments","getPackage","_config$android$packa","_config$android","android","package","getPackageRoot","type","join","getCurrentPackageName","packageRoot","mainApplication","getProjectFilePath","packagePath","dirname","packagePathParts","relative","split","sep","filter","Boolean","getCurrentPackageForProjectFile","fileName","filePath","sync","getCurrentPackageNameForType","_x2","_x3","_renamePackageOnDisk","newPackageName","renamePackageOnDiskForType","packageName","_x4","_renamePackageOnDiskForType","_ref2","_path$default","_path$default2","currentPackageName","directoryExistsAsync","currentPackagePath","concat","_toConsumableArray","newPackagePath","mkdirSync","recursive","cwd","forEach","relativePath","filepath","lstatSync","isFile","moveFileSync","oldPathParts","length","_path$default3","pathToCheck","files","readdirSync","rmdirSync","pop","filesToUpdate","absolute","push","readFileSync","toString","replace","RegExp","writeFileSync","e","src","dest","renameSync","buildGradle","pattern","androidManifest","manifest","$","getApplicationIdAsync","_x5","_getApplicationIdAsync","_matchResult$","buildGradlePath","getAppBuildGradleFilePath","existsSync","promises","readFile","matchResult","match"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/android/Package.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport Debug from 'debug';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createAndroidManifestPlugin, withAppBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { AndroidManifest } from './Manifest';\nimport { getAppBuildGradleFilePath, getProjectFilePath } from './Paths';\n\nconst debug = Debug('expo:config-plugins:android:package');\n\nexport const withPackageManifest = createAndroidManifestPlugin(\n  setPackageInAndroidManifest,\n  'withPackageManifest'\n);\n\nexport const withPackageGradle: ConfigPlugin = config => {\n  return withAppBuildGradle(config, config => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setPackageInBuildGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.package',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withPackageRefactor: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await renamePackageOnDisk(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getPackage(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.package ?? null;\n}\n\nfunction getPackageRoot(projectRoot: string, type: 'main' | 'debug') {\n  return path.join(projectRoot, 'android', 'app', 'src', type, 'java');\n}\n\nfunction getCurrentPackageName(projectRoot: string, packageRoot: string) {\n  const mainApplication = getProjectFilePath(projectRoot, 'MainApplication');\n  const packagePath = path.dirname(mainApplication);\n  const packagePathParts = path.relative(packageRoot, packagePath).split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageForProjectFile(\n  projectRoot: string,\n  packageRoot: string,\n  fileName: string,\n  type: string\n) {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/${type}/java/**/${fileName}.@(java|kt)`)\n  )[0];\n\n  if (!filePath) {\n    return null;\n  }\n\n  const packagePath = path.dirname(filePath);\n  const packagePathParts = path.relative(packageRoot, packagePath).split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageNameForType(projectRoot: string, type: string): string | null {\n  const packageRoot = getPackageRoot(projectRoot, type as any);\n\n  if (type === 'main') {\n    return getCurrentPackageName(projectRoot, packageRoot);\n  }\n  // debug, etc..\n  return getCurrentPackageForProjectFile(projectRoot, packageRoot, '*', type);\n}\n\n// NOTE(brentvatne): this assumes that our MainApplication.java file is in the root of the package\n// this makes sense for standard react-native projects but may not apply in customized projects, so if\n// we want this to be runnable in any app we need to handle other possibilities\nexport async function renamePackageOnDisk(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string\n) {\n  const newPackageName = getPackage(config);\n  if (newPackageName === null) {\n    return;\n  }\n\n  for (const type of ['main', 'debug']) {\n    await renamePackageOnDiskForType({ projectRoot, type, packageName: newPackageName });\n  }\n}\n\nexport async function renamePackageOnDiskForType({\n  projectRoot,\n  type,\n  packageName,\n}: {\n  projectRoot: string;\n  type: string;\n  packageName: string;\n}) {\n  if (!packageName) {\n    return;\n  }\n\n  const currentPackageName = getCurrentPackageNameForType(projectRoot, type);\n  debug(`Found package \"${currentPackageName}\" for type \"${type}\"`);\n  if (!currentPackageName || currentPackageName === packageName) {\n    return;\n  }\n  debug(`Refactor \"${currentPackageName}\" to \"${packageName}\" for type \"${type}\"`);\n  const packageRoot = getPackageRoot(projectRoot, type as any);\n  // Set up our paths\n  if (!(await directoryExistsAsync(packageRoot))) {\n    debug(`- skipping refactor of missing directory: ${packageRoot}`);\n    return;\n  }\n\n  const currentPackagePath = path.join(packageRoot, ...currentPackageName.split('.'));\n  const newPackagePath = path.join(packageRoot, ...packageName.split('.'));\n\n  // Create the new directory\n  fs.mkdirSync(newPackagePath, { recursive: true });\n\n  // Move everything from the old directory over\n  globSync('**/*', { cwd: currentPackagePath }).forEach(relativePath => {\n    const filepath = path.join(currentPackagePath, relativePath);\n    if (fs.lstatSync(filepath).isFile()) {\n      moveFileSync(filepath, path.join(newPackagePath, relativePath));\n    } else {\n      fs.mkdirSync(filepath, { recursive: true });\n    }\n  });\n\n  // Remove the old directory recursively from com/old/package to com/old and com,\n  // as long as the directories are empty\n  const oldPathParts = currentPackageName.split('.');\n  while (oldPathParts.length) {\n    const pathToCheck = path.join(packageRoot, ...oldPathParts);\n    try {\n      const files = fs.readdirSync(pathToCheck);\n      if (files.length === 0) {\n        fs.rmdirSync(pathToCheck);\n      }\n    } finally {\n      oldPathParts.pop();\n    }\n  }\n\n  const filesToUpdate = [...globSync('**/*', { cwd: newPackagePath, absolute: true })];\n  // Only update the BUCK file to match the main package name\n  if (type === 'main') {\n    filesToUpdate.push(path.join(projectRoot, 'android', 'app', 'BUCK'));\n  }\n  // Replace all occurrences of the path in the project\n  filesToUpdate.forEach((filepath: string) => {\n    try {\n      if (fs.lstatSync(filepath).isFile()) {\n        let contents = fs.readFileSync(filepath).toString();\n        contents = contents.replace(new RegExp(currentPackageName!, 'g'), packageName);\n        fs.writeFileSync(filepath, contents);\n      }\n    } catch (e) {\n      debug(`Error updating \"${filepath}\" for type \"${type}\"`);\n    }\n  });\n}\n\nfunction moveFileSync(src: string, dest: string) {\n  fs.mkdirSync(path.dirname(dest), { recursive: true });\n  fs.renameSync(src, dest);\n}\n\nexport function setPackageInBuildGradle(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const packageName = getPackage(config);\n  if (packageName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`applicationId ['\"].*['\"]`);\n  return buildGradle.replace(pattern, `applicationId '${packageName}'`);\n}\n\nexport function setPackageInAndroidManifest(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const packageName = getPackage(config);\n\n  if (packageName) {\n    androidManifest.manifest.$.package = packageName;\n  } else {\n    delete androidManifest.manifest.$.package;\n  }\n\n  return androidManifest;\n}\n\nexport async function getApplicationIdAsync(projectRoot: string): Promise<string | null> {\n  const buildGradlePath = getAppBuildGradleFilePath(projectRoot);\n  if (!fs.existsSync(buildGradlePath)) {\n    return null;\n  }\n  const buildGradle = await fs.promises.readFile(buildGradlePath, 'utf8');\n  const matchResult = buildGradle.match(/applicationId ['\"](.*)['\"]/);\n  // TODO add fallback for legacy cases to read from AndroidManifest.xml\n  return matchResult?.[1] ?? null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}