{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBundleIdentifier = getBundleIdentifier;\nexports.getBundleIdentifierFromPbxproj = getBundleIdentifierFromPbxproj;\nexports.resetAllPlistBundleIdentifiers = resetAllPlistBundleIdentifiers;\nexports.resetPlistBundleIdentifier = resetPlistBundleIdentifier;\nexports.setBundleIdentifier = setBundleIdentifier;\nexports.setBundleIdentifierForPbxproj = setBundleIdentifierForPbxproj;\nexports.updateBundleIdentifierForPbxproj = updateBundleIdentifierForPbxproj;\nexports.withBundleIdentifier = void 0;\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n  _plist = function _plist() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n  _xcode = function _xcode() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _Target() {\n  var data = require(\"./Target\");\n  _Target = function _Target() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _string() {\n  var data = require(\"./utils/string\");\n  _string = function _string() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withBundleIdentifier = function withBundleIdentifier(config, _ref) {\n  var bundleIdentifier = _ref.bundleIdentifier;\n  return (0, _withDangerousMod().withDangerousMod)(config, ['ios', function () {\n    var _ref2 = _asyncToGenerator(function* (config) {\n      var _config$ios;\n      var bundleId = bundleIdentifier !== null && bundleIdentifier !== void 0 ? bundleIdentifier : (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.bundleIdentifier;\n      (0, _assert().default)(bundleId, '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.');\n      yield setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId);\n      return config;\n    });\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withBundleIdentifier = withBundleIdentifier;\nfunction getBundleIdentifier(config) {\n  var _config$ios$bundleIde, _config$ios2;\n  return (_config$ios$bundleIde = (_config$ios2 = config.ios) === null || _config$ios2 === void 0 ? void 0 : _config$ios2.bundleIdentifier) !== null && _config$ios$bundleIde !== void 0 ? _config$ios$bundleIde : null;\n}\nfunction setBundleIdentifier(config, infoPlist) {\n  var bundleIdentifier = getBundleIdentifier(config);\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleIdentifier: bundleIdentifier\n  });\n}\nfunction getBundleIdentifierFromPbxproj(projectRoot) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    targetName = _ref3.targetName,\n    _ref3$buildConfigurat = _ref3.buildConfiguration,\n    buildConfiguration = _ref3$buildConfigurat === void 0 ? 'Release' : _ref3$buildConfigurat;\n  var pbxprojPath;\n  try {\n    pbxprojPath = (0, _Paths().getPBXProjectPath)(projectRoot);\n  } catch (_unused) {\n    return null;\n  }\n  var project = _xcode().default.project(pbxprojPath);\n  project.parseSync();\n  var xcBuildConfiguration = (0, _Target().getXCBuildConfigurationFromPbxproj)(project, {\n    targetName: targetName,\n    buildConfiguration: buildConfiguration\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\nfunction getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration) {\n  var bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n  if (bundleIdentifierRaw) {\n    var bundleIdentifier = (0, _string().trimQuotes)(bundleIdentifierRaw);\n    var bundleIdentifierParts = bundleIdentifier.split('.');\n    if (bundleIdentifierParts[bundleIdentifierParts.length - 1] === '$(PRODUCT_NAME:rfc1034identifier)' && xcBuildConfiguration.buildSettings.PRODUCT_NAME) {\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] = xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\nfunction updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier) {\n  var updateProductName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var project = _xcode().default.project(pbxprojPath);\n  project.parseSync();\n  var _ref4 = (0, _Target().findFirstNativeTarget)(project),\n    _ref5 = _slicedToArray(_ref4, 2),\n    nativeTarget = _ref5[1];\n  (0, _Xcodeproj().getBuildConfigurationsForListId)(project, nativeTarget.buildConfigurationList).forEach(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      item = _ref7[1];\n    if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n      return;\n    }\n    item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = \"\\\"\" + bundleIdentifier + \"\\\"\";\n    if (updateProductName) {\n      var productName = bundleIdentifier.split('.').pop();\n      if (!(productName !== null && productName !== void 0 && productName.includes('$'))) {\n        item.buildSettings.PRODUCT_NAME = productName;\n      }\n    }\n  });\n  _fs().default.writeFileSync(pbxprojPath, project.writeSync());\n}\nfunction setBundleIdentifierForPbxproj(projectRoot, bundleIdentifier) {\n  var updateProductName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var pbxprojPaths = [];\n  try {\n    pbxprojPaths = (0, _Paths().getAllPBXProjectPaths)(projectRoot);\n  } catch (_unused2) {}\n  for (var pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\nvar defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\nfunction resetAllPlistBundleIdentifiers(projectRoot) {\n  var infoPlistPaths = (0, _Paths().getAllInfoPlistPaths)(projectRoot);\n  for (var plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\nfunction resetPlistBundleIdentifier(plistPath) {\n  var rawPlist = _fs().default.readFileSync(plistPath, 'utf8');\n  var plistObject = _plist().default.parse(rawPlist);\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n    var format = {\n      pretty: true,\n      indent: \"\\t\"\n    };\n    var xml = _plist().default.build(_objectSpread(_objectSpread({}, plistObject), {}, {\n      CFBundleIdentifier: defaultBundleId\n    }), format);\n    if (xml !== rawPlist) {\n      _fs().default.writeFileSync(plistPath, xml);\n    }\n  }\n}","map":{"version":3,"names":["_plist","data","_interopRequireDefault","require","_assert","_fs","_xcode","_withDangerousMod","_Paths","_Target","_Xcodeproj","_string","withBundleIdentifier","config","_ref","bundleIdentifier","withDangerousMod","_ref2","_asyncToGenerator","_config$ios","bundleId","ios","default","setBundleIdentifierForPbxproj","modRequest","projectRoot","_x","apply","arguments","getBundleIdentifier","_config$ios$bundleIde","_config$ios2","setBundleIdentifier","infoPlist","_objectSpread","CFBundleIdentifier","getBundleIdentifierFromPbxproj","_ref3","length","undefined","targetName","_ref3$buildConfigurat","buildConfiguration","pbxprojPath","getPBXProjectPath","_unused","project","parseSync","xcBuildConfiguration","getXCBuildConfigurationFromPbxproj","getProductBundleIdentifierFromBuildConfiguration","bundleIdentifierRaw","buildSettings","PRODUCT_BUNDLE_IDENTIFIER","trimQuotes","bundleIdentifierParts","split","PRODUCT_NAME","replace","join","updateBundleIdentifierForPbxproj","updateProductName","_ref4","findFirstNativeTarget","_ref5","_slicedToArray","nativeTarget","getBuildConfigurationsForListId","buildConfigurationList","forEach","_ref6","_ref7","item","productName","pop","includes","writeFileSync","writeSync","pbxprojPaths","getAllPBXProjectPaths","_unused2","defaultBundleId","resetAllPlistBundleIdentifiers","infoPlistPaths","getAllInfoPlistPaths","plistPath","resetPlistBundleIdentifier","rawPlist","readFileSync","plistObject","parse","format","pretty","indent","xml","build"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/ios/BundleIdentifier.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist, { PlistObject } from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport xcode, { XCBuildConfiguration } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { InfoPlist } from './IosConfig.types';\nimport { getAllInfoPlistPaths, getAllPBXProjectPaths, getPBXProjectPath } from './Paths';\nimport { findFirstNativeTarget, getXCBuildConfigurationFromPbxproj } from './Target';\nimport { ConfigurationSectionEntry, getBuildConfigurationsForListId } from './utils/Xcodeproj';\nimport { trimQuotes } from './utils/string';\n\nexport const withBundleIdentifier: ConfigPlugin<{ bundleIdentifier?: string }> = (\n  config,\n  { bundleIdentifier }\n) => {\n  return withDangerousMod(config, [\n    'ios',\n    async config => {\n      const bundleId = bundleIdentifier ?? config.ios?.bundleIdentifier;\n      assert(\n        bundleId,\n        '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.'\n      );\n      await setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId!);\n      return config;\n    },\n  ]);\n};\n\nfunction getBundleIdentifier(config: Pick<ExpoConfig, 'ios'>): string | null {\n  return config.ios?.bundleIdentifier ?? null;\n}\n\n/**\n * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather\n * than in pbxproj\n */\nfunction setBundleIdentifier(config: ExpoConfig, infoPlist: InfoPlist): InfoPlist {\n  const bundleIdentifier = getBundleIdentifier(config);\n\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleIdentifier: bundleIdentifier,\n  };\n}\n\n/**\n * Gets the bundle identifier defined in the Xcode project found in the project directory.\n *\n * A bundle identifier is stored as a value in XCBuildConfiguration entry.\n * Those entries exist for every pair (build target, build configuration).\n * Unless target name is passed, the first target defined in the pbxproj is used\n * (to keep compatibility with the inaccurate legacy implementation of this function).\n * The build configuration is usually 'Release' or 'Debug'. However, it could be any arbitrary string.\n * Defaults to 'Release'.\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} targetName Target name\n * @param {string} buildConfiguration Build configuration. Defaults to 'Release'.\n * @returns {string | null} bundle identifier of the Xcode project or null if the project is not configured\n */\nfunction getBundleIdentifierFromPbxproj(\n  projectRoot: string,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): string | null {\n  let pbxprojPath: string;\n  try {\n    pbxprojPath = getPBXProjectPath(projectRoot);\n  } catch {\n    return null;\n  }\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const xcBuildConfiguration = getXCBuildConfigurationFromPbxproj(project, {\n    targetName,\n    buildConfiguration,\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\n\nfunction getProductBundleIdentifierFromBuildConfiguration(\n  xcBuildConfiguration: XCBuildConfiguration\n): string | null {\n  const bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n  if (bundleIdentifierRaw) {\n    const bundleIdentifier = trimQuotes(bundleIdentifierRaw);\n    // it's possible to use interpolation for the bundle identifier\n    // the most common case is when the last part of the id is set to `$(PRODUCT_NAME:rfc1034identifier)`\n    // in this case, PRODUCT_NAME should be replaced with its value\n    // the `rfc1034identifier` modifier replaces all non-alphanumeric characters with dashes\n    const bundleIdentifierParts = bundleIdentifier.split('.');\n    if (\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] ===\n        '$(PRODUCT_NAME:rfc1034identifier)' &&\n      xcBuildConfiguration.buildSettings.PRODUCT_NAME\n    ) {\n      bundleIdentifierParts[\n        bundleIdentifierParts.length - 1\n      ] = xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Updates the bundle identifier for a given pbxproj\n *\n * @param {string} pbxprojPath Path to pbxproj file\n * @param {string} bundleIdentifier Bundle identifier to set in the pbxproj\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction updateBundleIdentifierForPbxproj(\n  pbxprojPath: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const [, nativeTarget] = findFirstNativeTarget(project);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).forEach(\n    ([, item]: ConfigurationSectionEntry) => {\n      if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n        return;\n      }\n\n      item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `\"${bundleIdentifier}\"`;\n\n      if (updateProductName) {\n        const productName = bundleIdentifier.split('.').pop();\n        if (!productName?.includes('$')) {\n          item.buildSettings.PRODUCT_NAME = productName;\n        }\n      }\n    }\n  );\n  fs.writeFileSync(pbxprojPath, project.writeSync());\n}\n\n/**\n * Updates the bundle identifier for pbx projects inside the ios directory of the given project root\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} bundleIdentifier Desired bundle identifier\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction setBundleIdentifierForPbxproj(\n  projectRoot: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  // Get all pbx projects in the ${projectRoot}/ios directory\n  let pbxprojPaths: string[] = [];\n  try {\n    pbxprojPaths = getAllPBXProjectPaths(projectRoot);\n  } catch {}\n\n  for (const pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\n\n/**\n * Reset bundle identifier field in Info.plist to use PRODUCT_BUNDLE_IDENTIFIER, as recommended by Apple.\n */\n\nconst defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\n\nfunction resetAllPlistBundleIdentifiers(projectRoot: string): void {\n  const infoPlistPaths = getAllInfoPlistPaths(projectRoot);\n\n  for (const plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\n\nfunction resetPlistBundleIdentifier(plistPath: string): void {\n  const rawPlist = fs.readFileSync(plistPath, 'utf8');\n  const plistObject = plist.parse(rawPlist) as PlistObject;\n\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n\n    // attempt to match default Info.plist format\n    const format = { pretty: true, indent: `\\t` };\n\n    const xml = plist.build(\n      {\n        ...plistObject,\n        CFBundleIdentifier: defaultBundleId,\n      },\n      format\n    );\n\n    if (xml !== rawPlist) {\n      fs.writeFileSync(plistPath, xml);\n    }\n  }\n}\n\nexport {\n  getBundleIdentifier,\n  setBundleIdentifier,\n  getBundleIdentifierFromPbxproj,\n  updateBundleIdentifierForPbxproj,\n  setBundleIdentifierForPbxproj,\n  resetAllPlistBundleIdentifiers,\n  resetPlistBundleIdentifier,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}