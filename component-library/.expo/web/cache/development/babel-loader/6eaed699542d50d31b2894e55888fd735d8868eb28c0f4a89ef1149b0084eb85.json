{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDynamicConfig = getDynamicConfig;\nexports.getStaticConfig = getStaticConfig;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = require(\"fs\");\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _Errors() {\n  var data = require(\"./Errors\");\n  _Errors = function _Errors() {\n    return data;\n  };\n  return data;\n}\nfunction _evalConfig() {\n  var data = require(\"./evalConfig\");\n  _evalConfig = function _evalConfig() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction readConfigFile(configFile, context) {\n  if (!(0, _fs().existsSync)(configFile)) {\n    return null;\n  }\n  try {\n    return (0, _evalConfig().evalConfig)(configFile, context);\n  } catch (error) {\n    error.isConfigError = true;\n    error.message = \"Error reading Expo config at \" + configFile + \":\\n\\n\" + error.message;\n    throw error;\n  }\n}\nfunction getDynamicConfig(configPath, request) {\n  var config = readConfigFile(configPath, request);\n  if (config) {\n    return config;\n  }\n  throw new (_Errors().ConfigError)(\"Failed to read config at: \" + configPath, 'INVALID_CONFIG');\n}\nfunction getStaticConfig(configPath) {\n  var config = _jsonFile().default.read(configPath, {\n    json5: true\n  });\n  if (config) {\n    return config;\n  }\n  throw new (_Errors().ConfigError)(\"Failed to read config at: \" + configPath, 'INVALID_CONFIG');\n}","map":{"version":3,"names":["_jsonFile","data","_interopRequireDefault","require","_fs","_Errors","_evalConfig","readConfigFile","configFile","context","existsSync","evalConfig","error","isConfigError","message","getDynamicConfig","configPath","request","config","ConfigError","getStaticConfig","default","read","json5"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config/src/getConfig.ts"],"sourcesContent":["import JsonFile from '@expo/json-file';\nimport { existsSync } from 'fs';\n\nimport { AppJSONConfig, ConfigContext, ExpoConfig } from './Config.types';\nimport { ConfigError } from './Errors';\nimport { DynamicConfigResults, evalConfig } from './evalConfig';\n\n// We cannot use async config resolution right now because Next.js doesn't support async configs.\n// If they don't add support for async Webpack configs then we may need to pull support for Next.js.\nfunction readConfigFile(configFile: string, context: ConfigContext): null | DynamicConfigResults {\n  // If the file doesn't exist then we should skip it and continue searching.\n  if (!existsSync(configFile)) {\n    return null;\n  }\n  try {\n    return evalConfig(configFile, context);\n  } catch (error) {\n    // @ts-ignore\n    error.isConfigError = true;\n    error.message = `Error reading Expo config at ${configFile}:\\n\\n${error.message}`;\n    throw error;\n  }\n}\n\nexport function getDynamicConfig(configPath: string, request: ConfigContext): DynamicConfigResults {\n  const config = readConfigFile(configPath, request);\n  if (config) {\n    // The config must be serialized and evaluated ahead of time so the spawned process can send it over.\n    return config;\n  }\n  // TODO: It seems this is only thrown if the file cannot be found (which may never happen).\n  // If so we should throw a more helpful error.\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n\nexport function getStaticConfig(configPath: string): AppJSONConfig | ExpoConfig {\n  const config = JsonFile.read(configPath, { json5: true });\n  if (config) {\n    return config as any;\n  }\n  throw new ConfigError(`Failed to read config at: ${configPath}`, 'INVALID_CONFIG');\n}\n"],"mappings":";;;;;;;AAAA,SAAAA,UAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,SAAA,YAAAA,UAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,IAAA;EAAA,IAAAH,IAAA,GAAAE,OAAA;EAAAC,GAAA,YAAAA,IAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGA,SAAAI,QAAA;EAAA,IAAAJ,IAAA,GAAAE,OAAA;EAAAE,OAAA,YAAAA,QAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,YAAA;EAAA,IAAAL,IAAA,GAAAE,OAAA;EAAAG,WAAA,YAAAA,YAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;;;;;;AAIA,SAASM,cAATA,CAAwBC,UAAxB,EAA4CC,OAA5C,EAAiG;EAE/F,IAAI,CAAC,IAAAL,GAAA,GAAAM,UAAA,EAAWF,UAAX,CAAL,EAA6B;IAC3B,OAAO,IAAP;EACD;EACD,IAAI;IACF,OAAO,IAAAF,WAAA,GAAAK,UAAA,EAAWH,UAAX,EAAuBC,OAAvB,CAAP;EACD,CAFD,CAEE,OAAOG,KAAP,EAAc;IAEdA,KAAK,CAACC,aAAN,GAAsB,IAAtB;IACAD,KAAK,CAACE,OAAN,qCAAgDN,UAAW,aAAOI,KAAK,CAACE,OAAxE;IACA,MAAMF,KAAN;EACD;AACF;AAEM,SAASG,gBAATA,CAA0BC,UAA1B,EAA8CC,OAA9C,EAA4F;EACjG,IAAMC,MAAM,GAAGX,cAAc,CAACS,UAAD,EAAaC,OAAb,CAA7B;EACA,IAAIC,MAAJ,EAAY;IAEV,OAAOA,MAAP;EACD;EAGD,MAAM,KAAIb,OAAA,GAAAc,WAAJ,iCAA6CH,UAAW,EAAG,gBAA3D,CAAN;AACD;AAEM,SAASI,eAATA,CAAyBJ,UAAzB,EAAyE;EAC9E,IAAME,MAAM,GAAGlB,SAAA,GAAAqB,OAAA,CAASC,IAAT,CAAcN,UAAd,EAA0B;IAAEO,KAAK,EAAE;EAAT,CAA1B,CAAf;EACA,IAAIL,MAAJ,EAAY;IACV,OAAOA,MAAP;EACD;EACD,MAAM,KAAIb,OAAA,GAAAc,WAAJ,iCAA6CH,UAAW,EAAG,gBAA3D,CAAN;AACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}