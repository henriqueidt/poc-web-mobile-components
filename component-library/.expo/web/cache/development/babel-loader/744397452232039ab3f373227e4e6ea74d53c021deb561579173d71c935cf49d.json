{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isLegacyImportsEnabled = isLegacyImportsEnabled;\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction isLegacyImportsEnabled(exp) {\n  if ((0, _getenv().boolish)('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn('Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.');\n    return true;\n  }\n  return lteSdkVersion(exp, '40.0.0');\n}\nfunction lteSdkVersion(expJson, sdkVersion) {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n  try {\n    return _semver().default.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(expJson.sdkVersion + \" is not a valid version. Must be in the form of x.y.z\");\n  }\n}","map":{"version":3,"names":["_getenv","data","require","_semver","_interopRequireDefault","isLegacyImportsEnabled","exp","boolish","console","warn","lteSdkVersion","expJson","sdkVersion","default","lte","e","Error"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config/src/isLegacyImportsEnabled.ts"],"sourcesContent":["import { boolish } from 'getenv';\nimport semver from 'semver';\n\nimport { ExpoConfig } from './Config.types';\n\n/**\n * Should the bundler use .expo file extensions.\n *\n * @param exp\n */\nexport function isLegacyImportsEnabled(exp: Pick<ExpoConfig, 'sdkVersion'>) {\n  if (boolish('EXPO_LEGACY_IMPORTS', false)) {\n    console.warn(\n      'Dangerously enabled the deprecated `.expo` extensions feature, this functionality may be removed between SDK cycles.'\n    );\n    return true;\n  }\n  // Only allow target if the SDK version is available and it's less 41.\n  // This is optimized for making future projects work.\n  return lteSdkVersion(exp, '40.0.0');\n}\n\nfunction lteSdkVersion(expJson: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new Error(`${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"],"mappings":";;;;;;AAAA,SAAAA,QAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,OAAA,YAAAA,QAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,QAAA;EAAA,IAAAF,IAAA,GAAAG,sBAAA,CAAAF,OAAA;EAAAC,OAAA,YAAAA,QAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;;;;;;AASO,SAASI,sBAATA,CAAgCC,GAAhC,EAAqE;EAC1E,IAAI,IAAAN,OAAA,GAAAO,OAAA,EAAQ,qBAAR,EAA+B,KAA/B,CAAJ,EAA2C;IACzCC,OAAO,CAACC,IAAR,CACE,sHADF;IAGA,OAAO,IAAP;EACD;EAGD,OAAOC,aAAa,CAACJ,GAAD,EAAM,QAAN,CAApB;AACD;AAED,SAASI,aAATA,CAAuBC,OAAvB,EAAgEC,UAAhE,EAA6F;EAC3F,IAAI,CAACD,OAAO,CAACC,UAAb,EAAyB;IACvB,OAAO,KAAP;EACD;EAED,IAAID,OAAO,CAACC,UAAR,KAAuB,aAA3B,EAA0C;IACxC,OAAO,KAAP;EACD;EAED,IAAI;IACF,OAAOT,OAAA,GAAAU,OAAA,CAAOC,GAAP,CAAWH,OAAO,CAACC,UAAnB,EAA+BA,UAA/B,CAAP;EACD,CAFD,CAEE,OAAOG,CAAP,EAAU;IACV,MAAM,IAAIC,KAAJ,CAAaL,OAAO,CAACC,UAAW,2DAAtC;EACD;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}