{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBabelLoaderRule = exports.styleLoaderRule = exports.fallbackLoaderRule = exports.imageLoaderRule = exports.avifImageLoaderRule = void 0;\nvar paths_1 = require(\"@expo/config/paths\");\nvar getenv_1 = require(\"getenv\");\nvar mini_css_extract_plugin_1 = __importDefault(require(\"mini-css-extract-plugin\"));\nvar env_1 = require(\"../env\");\nvar createBabelLoader_1 = __importDefault(require(\"./createBabelLoader\"));\nvar shouldUseSourceMap = (0, getenv_1.boolish)('GENERATE_SOURCEMAP', true);\nvar imageInlineSizeLimit = parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT || '1000', 10);\nexports.avifImageLoaderRule = {\n  test: [/\\.avif$/],\n  type: 'asset',\n  mimetype: 'image/avif',\n  parser: {\n    dataUrlCondition: {\n      maxSize: imageInlineSizeLimit\n    }\n  }\n};\nexports.imageLoaderRule = {\n  test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/, /\\.svg$/],\n  type: 'asset',\n  parser: {\n    dataUrlCondition: {\n      maxSize: imageInlineSizeLimit\n    }\n  }\n};\nexports.fallbackLoaderRule = {\n  exclude: [/^$/, /\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n  type: 'asset/resource'\n};\nexports.styleLoaderRule = {\n  test: /\\.(css)$/,\n  use: [require.resolve('style-loader'), require.resolve('css-loader')]\n};\nfunction createAllLoaders(env) {\n  env.projectRoot = env.projectRoot || (0, paths_1.getPossibleProjectRoot)();\n  env.config = env.config || (0, env_1.getConfig)(env);\n  env.locations = env.locations || (0, env_1.getPaths)(env.projectRoot, env);\n  var isNative = ['ios', 'android'].includes(env.platform);\n  if (isNative) {\n    return [getBabelLoaderRule(env)];\n  }\n  var isEnvDevelopment = env.mode === 'development';\n  var isEnvProduction = env.mode === 'production';\n  var _ref = (0, env_1.getPublicPaths)(env),\n    publicUrlOrPath = _ref.publicPath;\n  var getStyleLoaders = function getStyleLoaders(cssOptions) {\n    var loaders = [isEnvDevelopment && require.resolve('style-loader'), isEnvProduction && {\n      loader: mini_css_extract_plugin_1.default.loader,\n      options: publicUrlOrPath.startsWith('.') ? {\n        publicPath: '../../'\n      } : {}\n    }, {\n      loader: require.resolve('css-loader'),\n      options: cssOptions\n    }].filter(Boolean);\n    return loaders;\n  };\n  return [exports.avifImageLoaderRule, exports.imageLoaderRule, getBabelLoaderRule(env), {\n    test: /\\.(css)$/,\n    use: getStyleLoaders({\n      importLoaders: 1,\n      sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,\n      modules: {\n        mode: 'icss'\n      }\n    }),\n    sideEffects: true\n  }, exports.fallbackLoaderRule].filter(Boolean);\n}\nexports.default = createAllLoaders;\nfunction getBabelLoaderRule(env) {\n  var _a;\n  env.projectRoot = env.projectRoot || (0, paths_1.getPossibleProjectRoot)();\n  env.config = env.config || (0, env_1.getConfig)(env);\n  env.locations = env.locations || (0, env_1.getPaths)(env.projectRoot, env);\n  var _env$config$web = env.config.web;\n  _env$config$web = _env$config$web === void 0 ? {} : _env$config$web;\n  var _env$config$web$build = _env$config$web.build;\n  _env$config$web$build = _env$config$web$build === void 0 ? {} : _env$config$web$build;\n  var _env$config$web$build2 = _env$config$web$build.babel,\n    babel = _env$config$web$build2 === void 0 ? {} : _env$config$web$build2;\n  var root = babel.root,\n    verbose = babel.verbose,\n    _babel$include = babel.include,\n    include = _babel$include === void 0 ? [] : _babel$include,\n    use = babel.use;\n  var babelProjectRoot = root || env.projectRoot;\n  return (0, createBabelLoader_1.default)({\n    projectRoot: env.locations.root,\n    mode: env.mode,\n    platform: env.platform,\n    babelProjectRoot: babelProjectRoot,\n    verbose: verbose,\n    include: [].concat(_toConsumableArray(include), _toConsumableArray(((_a = env.babel) === null || _a === void 0 ? void 0 : _a.dangerouslyAddModulePathsToTranspile) || [])),\n    use: use\n  });\n}\nexports.getBabelLoaderRule = getBabelLoaderRule;","map":{"version":3,"names":["paths_1","require","getenv_1","mini_css_extract_plugin_1","__importDefault","env_1","createBabelLoader_1","shouldUseSourceMap","boolish","imageInlineSizeLimit","parseInt","process","env","IMAGE_INLINE_SIZE_LIMIT","exports","avifImageLoaderRule","test","type","mimetype","parser","dataUrlCondition","maxSize","imageLoaderRule","fallbackLoaderRule","exclude","styleLoaderRule","use","resolve","createAllLoaders","projectRoot","getPossibleProjectRoot","config","getConfig","locations","getPaths","isNative","includes","platform","getBabelLoaderRule","isEnvDevelopment","mode","isEnvProduction","_ref","getPublicPaths","publicUrlOrPath","publicPath","getStyleLoaders","cssOptions","loaders","loader","default","options","startsWith","filter","Boolean","importLoaders","sourceMap","modules","sideEffects","_env$config$web","web","_env$config$web$build","build","_env$config$web$build2","babel","root","verbose","_babel$include","include","babelProjectRoot","concat","_toConsumableArray","_a","dangerouslyAddModulePathsToTranspile"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/webpack-config/src/loaders/createAllLoaders.ts"],"sourcesContent":["import { getPossibleProjectRoot } from '@expo/config/paths';\nimport { boolish } from 'getenv';\nimport MiniCssExtractPlugin from 'mini-css-extract-plugin';\nimport { RuleSetRule } from 'webpack';\n\nimport { getConfig, getPaths, getPublicPaths } from '../env';\nimport { Environment } from '../types';\nimport createBabelLoader from './createBabelLoader';\n\nconst shouldUseSourceMap = boolish('GENERATE_SOURCEMAP', true);\n\n// Inline resources as Base64 when there is less reason to parallelize their download. The\n// heuristic we use is whether the resource would fit within a TCP/IP packet that we would\n// send to request the resource.\n//\n// An Ethernet MTU is usually 1500. IP headers are 20 (v4) or 40 (v6) bytes and TCP\n// headers are 40 bytes. HTTP response headers vary and are around 400 bytes. This leaves\n// about 1000 bytes for content to fit in a packet.\nconst imageInlineSizeLimit = parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT || '1000', 10);\n\n// TODO: Merge this config once `image/avif` is in the mime-db\n// https://github.com/jshttp/mime-db\nexport const avifImageLoaderRule: RuleSetRule = {\n  test: [/\\.avif$/],\n  type: 'asset',\n  mimetype: 'image/avif',\n  parser: {\n    dataUrlCondition: {\n      maxSize: imageInlineSizeLimit,\n    },\n  },\n};\n\n/**\n * This is needed for webpack to import static images in JavaScript files.\n * \"url\" loader works like \"file\" loader except that it embeds assets\n * smaller than specified limit in bytes as data URLs to avoid requests.\n * A missing `test` is equivalent to a match.\n *\n * @category loaders\n */\n// TODO: Bacon: Move SVG\nexport const imageLoaderRule: RuleSetRule = {\n  test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/, /\\.svg$/],\n  type: 'asset',\n  parser: {\n    dataUrlCondition: {\n      maxSize: imageInlineSizeLimit,\n    },\n  },\n};\n\n/**\n * \"file\" loader makes sure those assets get served by WebpackDevServer.\n * When you `import` an asset, you get its (virtual) filename.\n * In production, they would get copied to the `build` folder.\n * This loader doesn't use a \"test\" so it will catch all modules\n * that fall through the other loaders.\n *\n * @category loaders\n */\nexport const fallbackLoaderRule: RuleSetRule = {\n  // Exclude `js` files to keep \"css\" loader working as it injects\n  // its runtime that would otherwise be processed through \"file\" loader.\n  // Also exclude `html` and `json` extensions so they get processed\n  // by webpacks internal loaders.\n  exclude: [/^$/, /\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n  type: 'asset/resource',\n};\n\n/**\n * Default CSS loader.\n *\n * @category loaders\n */\nexport const styleLoaderRule: RuleSetRule = {\n  test: /\\.(css)$/,\n  use: [require.resolve('style-loader'), require.resolve('css-loader')],\n};\n\n/**\n * Create the fallback loader for parsing any unhandled file type.\n *\n * @param env\n * @category loaders\n */\nexport default function createAllLoaders(\n  env: Pick<Environment, 'projectRoot' | 'locations' | 'mode' | 'config' | 'platform' | 'babel'>\n): RuleSetRule[] {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n  // @ts-ignore\n  env.config = env.config || getConfig(env);\n  // @ts-ignore\n  env.locations = env.locations || getPaths(env.projectRoot, env);\n\n  const isNative = ['ios', 'android'].includes(env.platform);\n\n  if (isNative) {\n    // TODO: Support fallback loader + assets\n    return [getBabelLoaderRule(env)];\n  }\n\n  const isEnvDevelopment = env.mode === 'development';\n  const isEnvProduction = env.mode === 'production';\n  const { publicPath: publicUrlOrPath } = getPublicPaths(env);\n\n  // common function to get style loaders\n  const getStyleLoaders = (cssOptions: RuleSetRule['options']) => {\n    const loaders = [\n      isEnvDevelopment && require.resolve('style-loader'),\n      isEnvProduction && {\n        loader: MiniCssExtractPlugin.loader,\n        // css is located in `static/css`, use '../../' to locate index.html folder\n        // in production `paths.publicUrlOrPath` can be a relative path\n        options: publicUrlOrPath.startsWith('.') ? { publicPath: '../../' } : {},\n      },\n      {\n        loader: require.resolve('css-loader'),\n        options: cssOptions,\n      },\n    ].filter(Boolean);\n\n    return loaders;\n  };\n\n  return [\n    avifImageLoaderRule,\n    imageLoaderRule,\n    getBabelLoaderRule(env),\n    {\n      test: /\\.(css)$/,\n      use: getStyleLoaders({\n        importLoaders: 1,\n        sourceMap: isEnvProduction ? shouldUseSourceMap : isEnvDevelopment,\n        modules: {\n          mode: 'icss',\n        },\n      }),\n      // Don't consider CSS imports dead code even if the\n      // containing package claims to have no side effects.\n      // Remove this when webpack adds a warning or an error for this.\n      // See https://github.com/webpack/webpack/issues/6571\n      sideEffects: true,\n    },\n    // This needs to be the last loader\n    fallbackLoaderRule,\n  ].filter(Boolean) as RuleSetRule[];\n}\n\n/**\n * Creates a Rule for loading application code and packages that work with the Expo ecosystem.\n * This method attempts to emulate how Metro loads ES modules in the `node_modules` folder.\n *\n * @param env partial Environment object.\n * @category loaders\n */\nexport function getBabelLoaderRule(\n  env: Pick<Environment, 'projectRoot' | 'config' | 'locations' | 'mode' | 'platform' | 'babel'>\n): RuleSetRule {\n  env.projectRoot = env.projectRoot || getPossibleProjectRoot();\n  // @ts-ignore\n  env.config = env.config || getConfig(env);\n\n  env.locations = env.locations || getPaths(env.projectRoot, env);\n\n  const { web: { build: { babel = {} } = {} } = {} } = env.config;\n\n  // TODO: deprecate app.json method in favor of env.babel\n  const { root, verbose, include = [], use } = babel;\n\n  const babelProjectRoot = root || env.projectRoot;\n\n  return createBabelLoader({\n    projectRoot: env.locations.root,\n    mode: env.mode,\n    platform: env.platform,\n    babelProjectRoot,\n    verbose,\n    include: [...include, ...(env.babel?.dangerouslyAddModulePathsToTranspile || [])],\n    use,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}