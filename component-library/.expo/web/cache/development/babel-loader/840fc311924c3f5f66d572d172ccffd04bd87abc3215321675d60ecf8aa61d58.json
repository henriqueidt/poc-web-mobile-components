{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withInternal = exports.EXPO_DEBUG = void 0;\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nvar EXPO_DEBUG = (0, _getenv().boolish)('EXPO_DEBUG', false);\nexports.EXPO_DEBUG = EXPO_DEBUG;\nvar withInternal = function withInternal(config, internals) {\n  if (!config._internal) {\n    config._internal = {};\n  }\n  config._internal = _objectSpread(_objectSpread({\n    isDebug: EXPO_DEBUG\n  }, config._internal), internals);\n  return config;\n};\nexports.withInternal = withInternal;","map":{"version":3,"names":["_getenv","data","require","EXPO_DEBUG","boolish","withInternal","config","internals","_internal","_objectSpread","isDebug"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config/src/plugins/withInternal.ts"],"sourcesContent":["import { ConfigPlugin } from '@expo/config-plugins';\nimport { boolish } from 'getenv';\n\nimport { ConfigFilePaths } from '../Config.types';\n\nexport const EXPO_DEBUG = boolish('EXPO_DEBUG', false);\n\n/**\n * Adds the _internal object.\n *\n * @param config\n * @param projectRoot\n */\nexport const withInternal: ConfigPlugin<\n  { projectRoot: string; packageJsonPath?: string } & Partial<ConfigFilePaths>\n> = (config, internals) => {\n  if (!config._internal) {\n    config._internal = {};\n  }\n\n  config._internal = {\n    isDebug: EXPO_DEBUG,\n    ...config._internal,\n    ...internals,\n  };\n\n  return config;\n};\n"],"mappings":";;;;;;;;;AACA,SAAAA,QAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,OAAA,YAAAA,QAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAIO,IAAME,UAAU,GAAG,IAAAH,OAAA,GAAAI,OAAA,EAAQ,YAAR,EAAsB,KAAtB,CAAnB;;AAQA,IAAMC,YAEZ,GAAG,SAFSA,YAEZA,CAAIC,MAAD,EAASC,SAAT,EAAuB;EACzB,IAAI,CAACD,MAAM,CAACE,SAAZ,EAAuB;IACrBF,MAAM,CAACE,SAAP,GAAmB,EAAnB;EACD;EAEDF,MAAM,CAACE,SAAP,GAAAC,aAAA,CAAAA,aAAA;IACEC,OAAO,EAAEP;EADQ,GAEdG,MAAM,CAACE,SAFO,GAGdD,SAAA,CAHL;EAMA,OAAOD,MAAP;AACD,CAdM"},"metadata":{},"sourceType":"script","externalDependencies":[]}