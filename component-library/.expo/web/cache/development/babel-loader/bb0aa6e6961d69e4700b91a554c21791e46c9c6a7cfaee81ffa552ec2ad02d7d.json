{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBuildSourceFileToGroup = addBuildSourceFileToGroup;\nexports.addFileToGroupAndLink = addFileToGroupAndLink;\nexports.addFramework = addFramework;\nexports.addResourceFileToGroup = addResourceFileToGroup;\nexports.ensureGroupRecursively = ensureGroupRecursively;\nexports.getApplicationNativeTarget = getApplicationNativeTarget;\nexports.getBuildConfigurationForListIdAndName = getBuildConfigurationForListIdAndName;\nexports.getBuildConfigurationsForListId = getBuildConfigurationsForListId;\nexports.getHackyProjectName = getHackyProjectName;\nexports.getPbxproj = getPbxproj;\nexports.getProductName = getProductName;\nexports.getProjectName = getProjectName;\nexports.getProjectSection = getProjectSection;\nexports.getXCConfigurationListEntries = getXCConfigurationListEntries;\nexports.isBuildConfig = isBuildConfig;\nexports.isNotComment = isNotComment;\nexports.isNotTestHost = isNotTestHost;\nexports.resolvePathOrProject = resolvePathOrProject;\nexports.sanitizedName = sanitizedName;\nexports.unquote = unquote;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _slugify() {\n  var data = _interopRequireDefault(require(\"slugify\"));\n  _slugify = function _slugify() {\n    return data;\n  };\n  return data;\n}\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n  _xcode = function _xcode() {\n    return data;\n  };\n  return data;\n}\nfunction _pbxFile() {\n  var data = _interopRequireDefault(require(\"xcode/lib/pbxFile\"));\n  _pbxFile = function _pbxFile() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction Paths() {\n  var data = _interopRequireWildcard(require(\"../Paths\"));\n  Paths = function Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getProjectName(projectRoot) {\n  var sourceRoot = Paths().getSourceRoot(projectRoot);\n  return _path().default.basename(sourceRoot);\n}\nfunction resolvePathOrProject(projectRootOrProject) {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch (_unused) {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\nfunction sanitizedName(name) {\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects((0, _slugify().default)(name)) || 'app';\n}\nfunction sanitizedNameForProjects(name) {\n  return name.replace(/[\\W_]+/g, '').normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nfunction getHackyProjectName(projectRoot, config) {\n  try {\n    return getProjectName(projectRoot);\n  } catch (_unused2) {\n    var projectName = config.name;\n    (0, _assert().default)(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\nfunction createProjectFileForGroup(_ref) {\n  var filepath = _ref.filepath,\n    group = _ref.group;\n  var file = new (_pbxFile().default)(filepath);\n  var conflictingFile = group.children.find(function (child) {\n    return child.comment === file.basename;\n  });\n  if (conflictingFile) {\n    return null;\n  }\n  return file;\n}\nfunction addResourceFileToGroup(_ref2) {\n  var filepath = _ref2.filepath,\n    groupName = _ref2.groupName,\n    isBuildFile = _ref2.isBuildFile,\n    project = _ref2.project,\n    verbose = _ref2.verbose;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    addFileToProject: function addFileToProject(_ref3) {\n      var project = _ref3.project,\n        file = _ref3.file;\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    }\n  });\n}\nfunction addBuildSourceFileToGroup(_ref4) {\n  var filepath = _ref4.filepath,\n    groupName = _ref4.groupName,\n    project = _ref4.project,\n    verbose = _ref4.verbose,\n    targetUuid = _ref4.targetUuid;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    addFileToProject: function addFileToProject(_ref5) {\n      var project = _ref5.project,\n        file = _ref5.file;\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    }\n  });\n}\nfunction addFileToGroupAndLink(_ref6) {\n  var filepath = _ref6.filepath,\n    groupName = _ref6.groupName,\n    project = _ref6.project,\n    verbose = _ref6.verbose,\n    addFileToProject = _ref6.addFileToProject,\n    targetUuid = _ref6.targetUuid;\n  var group = pbxGroupByPathOrAssert(project, groupName);\n  var file = createProjectFileForGroup({\n    filepath: filepath,\n    group: group\n  });\n  if (!file) {\n    if (verbose) {\n      (0, _warnings().addWarningIOS)('ios-xcode-project', \"Skipped adding duplicate file \\\"\" + filepath + \"\\\" to PBXGroup named \\\"\" + groupName + \"\\\"\");\n    }\n    return project;\n  }\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget === null || applicationNativeTarget === void 0 ? void 0 : applicationNativeTarget.uuid;\n  }\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n  addFileToProject({\n    project: project,\n    file: file\n  });\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename\n  });\n  return project;\n}\nfunction getApplicationNativeTarget(_ref7) {\n  var project = _ref7.project,\n    projectName = _ref7.projectName;\n  var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  (0, _assert().default)(applicationNativeTarget, \"Couldn't locate application PBXNativeTarget in '.xcodeproj' file.\");\n  (0, _assert().default)(String(applicationNativeTarget.target.name) === projectName, \"Application native target name mismatch. Expected \" + projectName + \", but found \" + applicationNativeTarget.target.name + \".\");\n  return applicationNativeTarget;\n}\nfunction addFramework(_ref8) {\n  var project = _ref8.project,\n    projectName = _ref8.projectName,\n    framework = _ref8.framework;\n  var target = getApplicationNativeTarget({\n    project: project,\n    projectName: projectName\n  });\n  return project.addFramework(framework, {\n    target: target.uuid\n  });\n}\nfunction splitPath(path) {\n  return path.split('/');\n}\nvar findGroup = function findGroup(group, name) {\n  if (!group) {\n    return undefined;\n  }\n  return group.children.find(function (group) {\n    return group.comment === name;\n  });\n};\nfunction findGroupInsideGroup(project, group, name) {\n  var foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    var _project$getPBXGroupB;\n    return (_project$getPBXGroupB = project.getPBXGroupByKey(foundGroup.value)) !== null && _project$getPBXGroupB !== void 0 ? _project$getPBXGroupB : null;\n  }\n  return null;\n}\nfunction pbxGroupByPathOrAssert(project, path) {\n  var _project$getFirstProj = project.getFirstProject(),\n    firstProject = _project$getFirstProj.firstProject;\n  var group = project.getPBXGroupByKey(firstProject.mainGroup);\n  var components = splitPath(path);\n  for (var name of components) {\n    var nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n  if (!group) {\n    throw Error(\"Xcode PBXGroup with name \\\"\" + path + \"\\\" could not be found in the Xcode project.\");\n  }\n  return group;\n}\nfunction ensureGroupRecursively(project, filepath) {\n  var _topMostGroup;\n  var components = splitPath(filepath);\n  var hasChild = function hasChild(group, name) {\n    return group.children.find(function (_ref9) {\n      var comment = _ref9.comment;\n      return comment === name;\n    });\n  };\n  var _project$getFirstProj2 = project.getFirstProject(),\n    firstProject = _project$getFirstProj2.firstProject;\n  var topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n  for (var pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"')\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return (_topMostGroup = topMostGroup) !== null && _topMostGroup !== void 0 ? _topMostGroup : null;\n}\nfunction getPbxproj(projectRoot) {\n  var projectPath = Paths().getPBXProjectPath(projectRoot);\n  var project = _xcode().default.project(projectPath);\n  project.parseSync();\n  return project;\n}\nfunction getProductName(project) {\n  var productName = '$(TARGET_NAME)';\n  try {\n    productName = project.productName;\n  } catch (_unused3) {}\n  if (productName === '$(TARGET_NAME)') {\n    var _project$getFirstTarg, _project$getFirstTarg2;\n    var targetName = (_project$getFirstTarg = project.getFirstTarget()) === null || _project$getFirstTarg === void 0 ? void 0 : (_project$getFirstTarg2 = _project$getFirstTarg.firstTarget) === null || _project$getFirstTarg2 === void 0 ? void 0 : _project$getFirstTarg2.productName;\n    productName = targetName !== null && targetName !== void 0 ? targetName : productName;\n  }\n  return productName;\n}\nfunction getProjectSection(project) {\n  return project.pbxProjectSection();\n}\nfunction getXCConfigurationListEntries(project) {\n  var lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\nfunction getBuildConfigurationsForListId(project, configurationListId) {\n  var configurationListEntries = getXCConfigurationListEntries(project);\n  var _configurationListEnt = configurationListEntries.find(function (_ref10) {\n      var _ref11 = _slicedToArray(_ref10, 1),\n        key = _ref11[0];\n      return key === configurationListId;\n    }),\n    _configurationListEnt2 = _slicedToArray(_configurationListEnt, 2),\n    configurationList = _configurationListEnt2[1];\n  var buildConfigurations = configurationList.buildConfigurations.map(function (i) {\n    return i.value;\n  });\n  return Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment).filter(isBuildConfig).filter(function (_ref12) {\n    var _ref13 = _slicedToArray(_ref12, 1),\n      key = _ref13[0];\n    return buildConfigurations.includes(key);\n  });\n}\nfunction getBuildConfigurationForListIdAndName(project, _ref14) {\n  var configurationListId = _ref14.configurationListId,\n    buildConfiguration = _ref14.buildConfiguration;\n  var xcBuildConfigurationEntry = getBuildConfigurationsForListId(project, configurationListId).find(function (i) {\n    return i[1].name === buildConfiguration;\n  });\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\"Build configuration '\" + buildConfiguration + \"' does not exist in list with id '\" + configurationListId + \"'\");\n  }\n  return xcBuildConfigurationEntry;\n}\nfunction isBuildConfig(_ref15) {\n  var _ref16 = _slicedToArray(_ref15, 2),\n    sectionItem = _ref16[1];\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\nfunction isNotTestHost(_ref17) {\n  var _ref18 = _slicedToArray(_ref17, 2),\n    sectionItem = _ref18[1];\n  return !sectionItem.buildSettings.TEST_HOST;\n}\nfunction isNotComment(_ref19) {\n  var _ref20 = _slicedToArray(_ref19, 1),\n    key = _ref20[0];\n  return !key.endsWith(\"_comment\");\n}\nfunction unquote(value) {\n  var _value$match$, _value$match;\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return (_value$match$ = (_value$match = value.match(/^\"(.*)\"$/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : value;\n}","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","_path","_slugify","_xcode","_pbxFile","_warnings","Paths","_interopRequireWildcard","getProjectName","projectRoot","sourceRoot","getSourceRoot","default","basename","resolvePathOrProject","projectRootOrProject","getPbxproj","_unused","sanitizedName","name","sanitizedNameForProjects","replace","normalize","getHackyProjectName","config","_unused2","projectName","createProjectFileForGroup","_ref","filepath","group","file","conflictingFile","children","find","child","comment","addResourceFileToGroup","_ref2","groupName","isBuildFile","project","verbose","addFileToGroupAndLink","addFileToProject","_ref3","addToPbxFileReferenceSection","addToPbxBuildFileSection","addToPbxResourcesBuildPhase","addBuildSourceFileToGroup","_ref4","targetUuid","_ref5","addToPbxSourcesBuildPhase","_ref6","pbxGroupByPathOrAssert","addWarningIOS","target","applicationNativeTarget","getTarget","uuid","generateUuid","fileRef","push","value","getApplicationNativeTarget","_ref7","String","addFramework","_ref8","framework","splitPath","path","split","findGroup","undefined","findGroupInsideGroup","foundGroup","_project$getPBXGroupB","getPBXGroupByKey","_project$getFirstProj","getFirstProject","firstProject","mainGroup","components","nextGroup","Error","ensureGroupRecursively","_topMostGroup","hasChild","_ref9","_project$getFirstProj2","topMostGroup","pathComponent","pbxCreateGroup","pbxGroupByName","projectPath","getPBXProjectPath","parseSync","getProductName","productName","_unused3","_project$getFirstTarg","_project$getFirstTarg2","targetName","getFirstTarget","firstTarget","getProjectSection","pbxProjectSection","getXCConfigurationListEntries","lists","pbxXCConfigurationList","Object","entries","filter","isNotComment","getBuildConfigurationsForListId","configurationListId","configurationListEntries","_configurationListEnt","_ref10","_ref11","_slicedToArray","key","_configurationListEnt2","configurationList","buildConfigurations","map","i","pbxXCBuildConfigurationSection","isBuildConfig","_ref12","_ref13","includes","getBuildConfigurationForListIdAndName","_ref14","buildConfiguration","xcBuildConfigurationEntry","_ref15","_ref16","sectionItem","isa","isNotTestHost","_ref17","_ref18","buildSettings","TEST_HOST","_ref19","_ref20","endsWith","unquote","_value$match$","_value$match","match"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/ios/utils/Xcodeproj.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\nimport path from 'path';\nimport slugify from 'slugify';\nimport xcode, {\n  PBXFile,\n  PBXGroup,\n  PBXNativeTarget,\n  PBXProject,\n  UUID,\n  XCBuildConfiguration,\n  XCConfigurationList,\n  XcodeProject,\n} from 'xcode';\nimport pbxFile from 'xcode/lib/pbxFile';\n\nimport { addWarningIOS } from '../../utils/warnings';\nimport * as Paths from '../Paths';\n\nexport type ProjectSectionEntry = [string, PBXProject];\n\nexport type NativeTargetSection = Record<string, PBXNativeTarget>;\n\nexport type NativeTargetSectionEntry = [string, PBXNativeTarget];\n\nexport type ConfigurationLists = Record<string, XCConfigurationList>;\n\nexport type ConfigurationListEntry = [string, XCConfigurationList];\n\nexport type ConfigurationSectionEntry = [string, XCBuildConfiguration];\n\nexport function getProjectName(projectRoot: string) {\n  const sourceRoot = Paths.getSourceRoot(projectRoot);\n  return path.basename(sourceRoot);\n}\n\nexport function resolvePathOrProject(\n  projectRootOrProject: string | XcodeProject\n): XcodeProject | null {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nexport function sanitizedName(name: string) {\n  // Default to the name `app` when every safe character has been sanitized\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects(slugify(name)) || 'app';\n}\n\nfunction sanitizedNameForProjects(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getHackyProjectName(projectRoot: string, config: ExpoConfig): string {\n  // Attempt to get the current ios folder name (apply).\n  try {\n    return getProjectName(projectRoot);\n  } catch {\n    // If no iOS project exists then create a new one (eject).\n    const projectName = config.name;\n    assert(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\n\nfunction createProjectFileForGroup({ filepath, group }: { filepath: string; group: PBXGroup }) {\n  const file = new pbxFile(filepath);\n\n  const conflictingFile = group.children.find(child => child.comment === file.basename);\n  if (conflictingFile) {\n    // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n    // Not much we can do here since it might be a conflicting file.\n    return null;\n  }\n  return file;\n}\n\n/**\n * Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addResourceFileToGroup({\n  filepath,\n  groupName,\n  // Should add to `PBXBuildFile Section`\n  isBuildFile,\n  project,\n  verbose,\n}: {\n  filepath: string;\n  groupName: string;\n  isBuildFile?: boolean;\n  project: XcodeProject;\n  verbose?: boolean;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    },\n  });\n}\n\n/**\n * Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addBuildSourceFileToGroup({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    },\n  });\n}\n\n// TODO(brentvatne): I couldn't figure out how to do this with an existing\n// higher level function exposed by the xcode library, but we should find out how to do\n// that and replace this with it\nexport function addFileToGroupAndLink({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  addFileToProject,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n  addFileToProject: (props: { file: PBXFile; project: XcodeProject }) => void;\n}): XcodeProject {\n  const group = pbxGroupByPathOrAssert(project, groupName);\n\n  const file = createProjectFileForGroup({ filepath, group });\n\n  if (!file) {\n    if (verbose) {\n      // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n      // Not much we can do here since it might be a conflicting file.\n      addWarningIOS(\n        'ios-xcode-project',\n        `Skipped adding duplicate file \"${filepath}\" to PBXGroup named \"${groupName}\"`\n      );\n    }\n    return project;\n  }\n\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget?.uuid;\n  }\n\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n\n  addFileToProject({ project, file });\n\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename,\n  });\n  return project;\n}\n\nexport function getApplicationNativeTarget({\n  project,\n  projectName,\n}: {\n  project: XcodeProject;\n  projectName: string;\n}) {\n  const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  assert(\n    applicationNativeTarget,\n    `Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`\n  );\n  assert(\n    String(applicationNativeTarget.target.name) === projectName,\n    `Application native target name mismatch. Expected ${projectName}, but found ${applicationNativeTarget.target.name}.`\n  );\n  return applicationNativeTarget;\n}\n\n/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */\nexport function addFramework({\n  project,\n  projectName,\n  framework,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  framework: string;\n}) {\n  const target = getApplicationNativeTarget({ project, projectName });\n  return project.addFramework(framework, { target: target.uuid });\n}\n\nfunction splitPath(path: string): string[] {\n  // TODO: Should we account for other platforms that may not use `/`\n  return path.split('/');\n}\n\nconst findGroup = (\n  group: PBXGroup | undefined,\n  name: string\n):\n  | {\n      value: UUID;\n      comment?: string;\n    }\n  | undefined => {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find(group => group.comment === name);\n};\n\nfunction findGroupInsideGroup(\n  project: XcodeProject,\n  group: PBXGroup | undefined,\n  name: string\n): null | PBXGroup {\n  const foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    return project.getPBXGroupByKey(foundGroup.value) ?? null;\n  }\n  return null;\n}\n\nfunction pbxGroupByPathOrAssert(project: XcodeProject, path: string): PBXGroup {\n  const { firstProject } = project.getFirstProject();\n\n  let group = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  const components = splitPath(path);\n  for (const name of components) {\n    const nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n\n  if (!group) {\n    throw Error(`Xcode PBXGroup with name \"${path}\" could not be found in the Xcode project.`);\n  }\n\n  return group;\n}\n\nexport function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null {\n  const components = splitPath(filepath);\n  const hasChild = (group: PBXGroup, name: string) =>\n    group.children.find(({ comment }) => comment === name);\n  const { firstProject } = project.getFirstProject();\n\n  let topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (const pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"'),\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return topMostGroup ?? null;\n}\n\n/**\n * Get the pbxproj for the given path\n */\nexport function getPbxproj(projectRoot: string): XcodeProject {\n  const projectPath = Paths.getPBXProjectPath(projectRoot);\n  const project = xcode.project(projectPath);\n  project.parseSync();\n  return project;\n}\n\n/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */\nexport function getProductName(project: XcodeProject): string {\n  let productName = '$(TARGET_NAME)';\n  try {\n    // If the product name is numeric, this will fail (it's a getter).\n    // If the bundle identifier' final component is only numeric values, then the PRODUCT_NAME\n    // will be a numeric value, this results in a bug where the product name isn't useful,\n    // i.e. `com.bacon.001` -> `1` -- in this case, use the first target name.\n    productName = project.productName;\n  } catch {}\n\n  if (productName === '$(TARGET_NAME)') {\n    const targetName = project.getFirstTarget()?.firstTarget?.productName;\n    productName = targetName ?? productName;\n  }\n\n  return productName;\n}\n\nexport function getProjectSection(project: XcodeProject) {\n  return project.pbxProjectSection();\n}\n\nexport function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[] {\n  const lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nexport function getBuildConfigurationsForListId(\n  project: XcodeProject,\n  configurationListId: string\n): ConfigurationSectionEntry[] {\n  const configurationListEntries = getXCConfigurationListEntries(project);\n  const [, configurationList] = configurationListEntries.find(\n    ([key]) => key === configurationListId\n  ) as ConfigurationListEntry;\n\n  const buildConfigurations = configurationList.buildConfigurations.map(i => i.value);\n\n  return Object.entries(project.pbxXCBuildConfigurationSection())\n    .filter(isNotComment)\n    .filter(isBuildConfig)\n    .filter(([key]: ConfigurationSectionEntry) => buildConfigurations.includes(key));\n}\n\nexport function getBuildConfigurationForListIdAndName(\n  project: XcodeProject,\n  {\n    configurationListId,\n    buildConfiguration,\n  }: { configurationListId: string; buildConfiguration: string }\n): ConfigurationSectionEntry {\n  const xcBuildConfigurationEntry = getBuildConfigurationsForListId(\n    project,\n    configurationListId\n  ).find(i => i[1].name === buildConfiguration);\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\n      `Build configuration '${buildConfiguration}' does not exist in list with id '${configurationListId}'`\n    );\n  }\n  return xcBuildConfigurationEntry;\n}\n\nexport function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nexport function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nexport function isNotComment([key]:\n  | ConfigurationSectionEntry\n  | ProjectSectionEntry\n  | ConfigurationListEntry\n  | NativeTargetSectionEntry): boolean {\n  return !key.endsWith(`_comment`);\n}\n\n// Remove surrounding double quotes if they exist.\nexport function unquote(value: string): string {\n  // projects with numeric names will fail due to a bug in the xcode package.\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return value.match(/^\"(.*)\"$/)?.[1] ?? value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}