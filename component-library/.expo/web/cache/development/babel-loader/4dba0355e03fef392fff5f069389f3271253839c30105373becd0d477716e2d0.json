{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"providers\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIosModFileProviders = getIosModFileProviders;\nexports.withIosBaseMods = withIosBaseMods;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n  _plist = function _plist() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = require(\"fs\");\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n  _xcode = function _xcode() {\n    return data;\n  };\n  return data;\n}\nfunction _ios() {\n  var data = require(\"../ios\");\n  _ios = function _ios() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"../ios/utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _getInfoPlistPath() {\n  var data = require(\"../ios/utils/getInfoPlistPath\");\n  _getInfoPlistPath = function _getInfoPlistPath() {\n    return data;\n  };\n  return data;\n}\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n  _modules = function _modules() {\n    return data;\n  };\n  return data;\n}\nfunction _sortObject() {\n  var data = require(\"../utils/sortObject\");\n  _sortObject = function _sortObject() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _fs$promises = _fs().promises,\n  readFile = _fs$promises.readFile,\n  writeFile = _fs$promises.writeFile;\nfunction getEntitlementsPlistTemplate() {\n  return {};\n}\nfunction getInfoPlistTemplate() {\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true\n        }\n      }\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault'\n  };\n}\nvar defaultProviders = {\n  dangerous: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath() {\n      return '';\n    },\n    read: function () {\n      var _read = _asyncToGenerator(function* () {\n        return {};\n      });\n      function read() {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write = _asyncToGenerator(function* () {});\n      function write() {\n        return _write.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  appDelegate: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref) {\n      var projectRoot = _ref.modRequest.projectRoot;\n      return _ios().Paths.getAppDelegateFilePath(projectRoot);\n    },\n    read: function () {\n      var _read2 = _asyncToGenerator(function* (filePath) {\n        return _ios().Paths.getFileInfo(filePath);\n      });\n      function read(_x) {\n        return _read2.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write2 = _asyncToGenerator(function* (filePath, _ref2) {\n        var contents = _ref2.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x2, _x3) {\n        return _write2.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  expoPlist: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref3) {\n      var _ref3$modRequest = _ref3.modRequest,\n        platformProjectRoot = _ref3$modRequest.platformProjectRoot,\n        projectName = _ref3$modRequest.projectName;\n      var supportingDirectory = _path().default.join(platformProjectRoot, projectName, 'Supporting');\n      return _path().default.resolve(supportingDirectory, 'Expo.plist');\n    },\n    read: function () {\n      var _read3 = _asyncToGenerator(function* (filePath, _ref4) {\n        var introspect = _ref4.modRequest.introspect;\n        try {\n          return _plist().default.parse(yield readFile(filePath, 'utf8'));\n        } catch (error) {\n          if (introspect) {\n            return {};\n          }\n          throw error;\n        }\n      });\n      function read(_x4, _x5) {\n        return _read3.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write3 = _asyncToGenerator(function* (filePath, _ref5) {\n        var modResults = _ref5.modResults,\n          introspect = _ref5.modRequest.introspect;\n        if (introspect) {\n          return;\n        }\n        yield writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(modResults)));\n      });\n      function write(_x6, _x7) {\n        return _write3.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  xcodeproj: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref6) {\n      var projectRoot = _ref6.modRequest.projectRoot;\n      return _ios().Paths.getPBXProjectPath(projectRoot);\n    },\n    read: function () {\n      var _read4 = _asyncToGenerator(function* (filePath) {\n        var project = _xcode().default.project(filePath);\n        project.parseSync();\n        return project;\n      });\n      function read(_x8) {\n        return _read4.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write4 = _asyncToGenerator(function* (filePath, _ref7) {\n        var modResults = _ref7.modResults;\n        yield writeFile(filePath, modResults.writeSync());\n      });\n      function write(_x9, _x10) {\n        return _write4.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  infoPlist: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath = _asyncToGenerator(function* (config) {\n        var project = null;\n        try {\n          project = (0, _Xcodeproj().getPbxproj)(config.modRequest.projectRoot);\n        } catch (_unused) {}\n        if (project) {\n          var infoPlistBuildProperty = (0, _getInfoPlistPath().getInfoPlistPathFromPbxproj)(project);\n          if (infoPlistBuildProperty) {\n            var infoPlistPath = _path().default.join(config.modRequest.platformProjectRoot, infoPlistBuildProperty);\n            if ((0, _modules().fileExists)(infoPlistPath)) {\n              return infoPlistPath;\n            }\n            (0, _warnings().addWarningIOS)('mods.ios.infoPlist', \"Info.plist file linked to Xcode project does not exist: \" + infoPlistPath);\n          } else {\n            (0, _warnings().addWarningIOS)('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n          }\n        }\n        try {\n          return yield _ios().Paths.getInfoPlistPath(config.modRequest.projectRoot);\n        } catch (error) {\n          if (config.modRequest.introspect) {\n            return '';\n          }\n          throw error;\n        }\n      });\n      function getFilePath(_x11) {\n        return _getFilePath.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read5 = _asyncToGenerator(function* (filePath, config) {\n        if (!config.ios) config.ios = {};\n        if (!config.ios.infoPlist) config.ios.infoPlist = {};\n        var modResults;\n        try {\n          var contents = yield readFile(filePath, 'utf8');\n          (0, _assert().default)(contents, 'Info.plist is empty');\n          modResults = _plist().default.parse(contents);\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n          modResults = getInfoPlistTemplate();\n        }\n        config.ios.infoPlist = _objectSpread(_objectSpread({}, modResults || {}), config.ios.infoPlist);\n        return config.ios.infoPlist;\n      });\n      function read(_x12, _x13) {\n        return _read5.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write5 = _asyncToGenerator(function* (filePath, config) {\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.infoPlist = config.modResults;\n        if (config.modRequest.introspect) {\n          return;\n        }\n        yield writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(config.modResults)));\n      });\n      function write(_x14, _x15) {\n        return _write5.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  entitlements: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath2 = _asyncToGenerator(function* (config) {\n        try {\n          return yield _ios().Entitlements.getEntitlementsPath(config.modRequest.projectRoot);\n        } catch (error) {\n          if (config.modRequest.introspect) {\n            return '';\n          }\n          throw error;\n        }\n      });\n      function getFilePath(_x16) {\n        return _getFilePath2.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read6 = _asyncToGenerator(function* (filePath, config) {\n        var modResults;\n        try {\n          var contents = yield readFile(filePath, 'utf8');\n          (0, _assert().default)(contents, 'Entitlements plist is empty');\n          modResults = _plist().default.parse(contents);\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n          modResults = getEntitlementsPlistTemplate();\n        }\n        if (!config.ios) config.ios = {};\n        if (!config.ios.entitlements) config.ios.entitlements = {};\n        config.ios.entitlements = _objectSpread(_objectSpread({}, modResults || {}), config.ios.entitlements);\n        return config.ios.entitlements;\n      });\n      function read(_x17, _x18) {\n        return _read6.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write6 = _asyncToGenerator(function* (filePath, config) {\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.entitlements = config.modResults;\n        if (config.modRequest.introspect) {\n          return;\n        }\n        yield writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(config.modResults)));\n      });\n      function write(_x19, _x20) {\n        return _write6.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  podfileProperties: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref8) {\n      var platformProjectRoot = _ref8.modRequest.platformProjectRoot;\n      return _path().default.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    read: function () {\n      var _read7 = _asyncToGenerator(function* (filePath) {\n        var results = {};\n        try {\n          results = yield _jsonFile().default.readAsync(filePath);\n        } catch (e) {}\n        return results;\n      });\n      function read(_x21) {\n        return _read7.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write7 = _asyncToGenerator(function* (filePath, _ref9) {\n        var modResults = _ref9.modResults,\n          introspect = _ref9.modRequest.introspect;\n        if (introspect) {\n          return;\n        }\n        yield _jsonFile().default.writeAsync(filePath, modResults);\n      });\n      function write(_x22, _x23) {\n        return _write7.apply(this, arguments);\n      }\n      return write;\n    }()\n  })\n};\nfunction withIosBaseMods(config) {\n  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var providers = _ref10.providers,\n    props = _objectWithoutProperties(_ref10, _excluded);\n  return (0, _createBaseMod().withGeneratedBaseMods)(config, _objectSpread(_objectSpread({}, props), {}, {\n    platform: 'ios',\n    providers: providers !== null && providers !== void 0 ? providers : getIosModFileProviders()\n  }));\n}\nfunction getIosModFileProviders() {\n  return defaultProviders;\n}","map":{"version":3,"names":["_jsonFile","data","_interopRequireDefault","require","_plist","_assert","_fs","_path","_xcode","_ios","_Xcodeproj","_getInfoPlistPath","_modules","_sortObject","_warnings","_createBaseMod","_fs$promises","promises","readFile","writeFile","getEntitlementsPlistTemplate","getInfoPlistTemplate","CFBundleDevelopmentRegion","CFBundleExecutable","CFBundleIdentifier","CFBundleName","CFBundlePackageType","CFBundleInfoDictionaryVersion","CFBundleSignature","LSRequiresIPhoneOS","NSAppTransportSecurity","NSAllowsArbitraryLoads","NSExceptionDomains","localhost","NSExceptionAllowsInsecureHTTPLoads","UILaunchStoryboardName","UIRequiredDeviceCapabilities","UIViewControllerBasedStatusBarAppearance","UIStatusBarStyle","defaultProviders","dangerous","provider","getFilePath","read","_read","_asyncToGenerator","apply","arguments","write","_write","appDelegate","_ref","projectRoot","modRequest","Paths","getAppDelegateFilePath","_read2","filePath","getFileInfo","_x","_write2","_ref2","contents","modResults","_x2","_x3","expoPlist","isIntrospective","_ref3","_ref3$modRequest","platformProjectRoot","projectName","supportingDirectory","default","join","resolve","_read3","_ref4","introspect","parse","error","_x4","_x5","_write3","_ref5","build","sortObject","_x6","_x7","xcodeproj","_ref6","getPBXProjectPath","_read4","project","parseSync","_x8","_write4","_ref7","writeSync","_x9","_x10","infoPlist","_getFilePath","config","getPbxproj","_unused","infoPlistBuildProperty","getInfoPlistPathFromPbxproj","infoPlistPath","fileExists","addWarningIOS","getInfoPlistPath","_x11","_read5","ios","_objectSpread","_x12","_x13","_write5","_x14","_x15","entitlements","_getFilePath2","Entitlements","getEntitlementsPath","_x16","_read6","_x17","_x18","_write6","_x19","_x20","podfileProperties","_ref8","_read7","results","readAsync","e","_x21","_write7","_ref9","writeAsync","_x22","_x23","withIosBaseMods","_ref10","length","undefined","providers","props","_objectWithoutProperties","_excluded","withGeneratedBaseMods","platform","getIosModFileProviders"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/plugins/withIosBaseMods.ts"],"sourcesContent":["import JsonFile, { JSONObject, JSONValue } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport { promises } from 'fs';\nimport path from 'path';\nimport xcode, { XcodeProject } from 'xcode';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Entitlements, Paths } from '../ios';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { getPbxproj } from '../ios/utils/Xcodeproj';\nimport { getInfoPlistPathFromPbxproj } from '../ios/utils/getInfoPlistPath';\nimport { fileExists } from '../utils/modules';\nimport { sortObject } from '../utils/sortObject';\nimport { addWarningIOS } from '../utils/warnings';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype IosModName = keyof Required<ModConfig>['ios'];\n\nfunction getEntitlementsPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {};\n}\n\nfunction getInfoPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true,\n        },\n      },\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault',\n  };\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return {};\n    },\n    async write() {},\n  }),\n  // Append a rule to supply AppDelegate data to mods on `mods.ios.appDelegate`\n  appDelegate: provider<Paths.AppDelegateProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getAppDelegateFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath: string, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  expoPlist: provider<JSONObject>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot, projectName } }) {\n      const supportingDirectory = path.join(platformProjectRoot, projectName!, 'Supporting');\n      return path.resolve(supportingDirectory, 'Expo.plist');\n    },\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return plist.parse(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (introspect) {\n          return {};\n        }\n        throw error;\n      }\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await writeFile(filePath, plist.build(sortObject(modResults)));\n    },\n  }),\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  xcodeproj: provider<XcodeProject>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getPBXProjectPath(projectRoot);\n    },\n    async read(filePath) {\n      const project = xcode.project(filePath);\n      project.parseSync();\n      return project;\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, modResults.writeSync());\n    },\n  }),\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  infoPlist: provider<InfoPlist, ForwardedBaseModOptions>({\n    isIntrospective: true,\n    async getFilePath(config) {\n      let project: xcode.XcodeProject | null = null;\n      try {\n        project = getPbxproj(config.modRequest.projectRoot);\n      } catch {\n        // noop\n      }\n\n      // Only check / warn if a project actually exists, this'll provide\n      // more accurate warning messages for users in managed projects.\n      if (project) {\n        const infoPlistBuildProperty = getInfoPlistPathFromPbxproj(project);\n\n        if (infoPlistBuildProperty) {\n          //: [root]/myapp/ios/MyApp/Info.plist\n          const infoPlistPath = path.join(\n            //: myapp/ios\n            config.modRequest.platformProjectRoot,\n            //: MyApp/Info.plist\n            infoPlistBuildProperty\n          );\n          if (fileExists(infoPlistPath)) {\n            return infoPlistPath;\n          }\n          addWarningIOS(\n            'mods.ios.infoPlist',\n            `Info.plist file linked to Xcode project does not exist: ${infoPlistPath}`\n          );\n        } else {\n          addWarningIOS('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n        }\n      }\n      try {\n        // Fallback on glob...\n        return await Paths.getInfoPlistPath(config.modRequest.projectRoot);\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n    async read(filePath, config) {\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.infoPlist) config.ios.infoPlist = {};\n\n      let modResults: InfoPlist;\n      try {\n        const contents = await readFile(filePath, 'utf8');\n        assert(contents, 'Info.plist is empty');\n        modResults = plist.parse(contents) as InfoPlist;\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the infoPlist object from the Expo config.\n        modResults = getInfoPlistTemplate();\n      }\n\n      config.ios.infoPlist = {\n        ...(modResults || {}),\n        ...config.ios.infoPlist,\n      };\n\n      return config.ios.infoPlist!;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static infoPlist object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  entitlements: provider<JSONObject, ForwardedBaseModOptions>({\n    isIntrospective: true,\n\n    async getFilePath(config) {\n      try {\n        // Fallback on glob...\n        return await Entitlements.getEntitlementsPath(config.modRequest.projectRoot);\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n\n    async read(filePath, config) {\n      let modResults: JSONObject;\n      try {\n        const contents = await readFile(filePath, 'utf8');\n        assert(contents, 'Entitlements plist is empty');\n        modResults = plist.parse(contents);\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the template file.\n        modResults = getEntitlementsPlistTemplate();\n      }\n\n      // Apply all of the .entitlements values to the expo.ios.entitlements object\n      // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.entitlements) config.ios.entitlements = {};\n\n      config.ios.entitlements = {\n        ...(modResults || {}),\n        ...config.ios.entitlements,\n      };\n\n      return config.ios.entitlements!;\n    },\n\n    async write(filePath, config) {\n      // Update the contents of the static entitlements object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n\n  // Append a rule to supply Podfile.properties.json data to mods on `mods.ios.podfileProperties`\n  podfileProperties: provider<Record<string, JSONValue>>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    async read(filePath) {\n      let results: Record<string, JSONValue> = {};\n      try {\n        results = await JsonFile.readAsync(filePath);\n      } catch (e) {}\n      return results;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await JsonFile.writeAsync(filePath, modResults);\n    },\n  }),\n};\n\ntype IosDefaultProviders = typeof defaultProviders;\n\nexport function withIosBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<IosDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<IosModName>(config, {\n    ...props,\n    platform: 'ios',\n    providers: providers ?? getIosModFileProviders(),\n  });\n}\n\nexport function getIosModFileProviders() {\n  return defaultProviders;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}