{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidManifestAsync = getAndroidManifestAsync;\nexports.getAppBuildGradleAsync = getAppBuildGradleAsync;\nexports.getAppBuildGradleFilePath = getAppBuildGradleFilePath;\nexports.getFileInfo = getFileInfo;\nexports.getGradleFilePath = getGradleFilePath;\nexports.getMainActivityAsync = getMainActivityAsync;\nexports.getMainApplicationAsync = getMainApplicationAsync;\nexports.getProjectBuildGradleAsync = getProjectBuildGradleAsync;\nexports.getProjectBuildGradleFilePath = getProjectBuildGradleFilePath;\nexports.getProjectFilePath = getProjectFilePath;\nexports.getProjectPathOrThrowAsync = getProjectPathOrThrowAsync;\nexports.getResourceFolderAsync = getResourceFolderAsync;\nexports.getResourceXMLPathAsync = getResourceXMLPathAsync;\nexports.getSettingsGradleAsync = getSettingsGradleAsync;\nexports.getSettingsGradleFilePath = getSettingsGradleFilePath;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _glob() {\n  var data = require(\"glob\");\n  _glob = function _glob() {\n    return data;\n  };\n  return data;\n}\nfunction path() {\n  var data = _interopRequireWildcard(require(\"path\"));\n  path = function path() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n  _modules = function _modules() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getProjectFilePath(projectRoot, name) {\n  var filePath = (0, _glob().sync)(path().join(projectRoot, \"android/app/src/main/java/**/\" + name + \".@(java|kt)\"))[0];\n  (0, _assert().default)(filePath, \"Project file \\\"\" + name + \"\\\" does not exist in android project for root \\\"\" + projectRoot + \"\\\"\");\n  return filePath;\n}\nfunction getLanguage(filePath) {\n  var extension = path().extname(filePath);\n  switch (extension) {\n    case '.java':\n      return 'java';\n    case '.kts':\n    case '.kt':\n      return 'kt';\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n    default:\n      throw new (_errors().UnexpectedError)(\"Unexpected Android file extension: \" + extension);\n  }\n}\nfunction getFileInfo(filePath) {\n  return {\n    path: path().normalize(filePath),\n    contents: _fs().default.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath)\n  };\n}\nfunction getMainApplicationAsync(_x) {\n  return _getMainApplicationAsync.apply(this, arguments);\n}\nfunction _getMainApplicationAsync() {\n  _getMainApplicationAsync = _asyncToGenerator(function* (projectRoot) {\n    var filePath = getProjectFilePath(projectRoot, 'MainApplication');\n    return getFileInfo(filePath);\n  });\n  return _getMainApplicationAsync.apply(this, arguments);\n}\nfunction getMainActivityAsync(_x2) {\n  return _getMainActivityAsync.apply(this, arguments);\n}\nfunction _getMainActivityAsync() {\n  _getMainActivityAsync = _asyncToGenerator(function* (projectRoot) {\n    var filePath = getProjectFilePath(projectRoot, 'MainActivity');\n    return getFileInfo(filePath);\n  });\n  return _getMainActivityAsync.apply(this, arguments);\n}\nfunction getGradleFilePath(projectRoot, gradleName) {\n  var groovyPath = path().resolve(projectRoot, gradleName + \".gradle\");\n  var ktPath = path().resolve(projectRoot, gradleName + \".gradle.kts\");\n  var isGroovy = _fs().default.existsSync(groovyPath);\n  var isKotlin = !isGroovy && _fs().default.existsSync(ktPath);\n  if (!isGroovy && !isKotlin) {\n    throw new Error(\"Failed to find '\" + gradleName + \".gradle' file for project: \" + projectRoot + \".\");\n  }\n  var filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\nfunction getProjectBuildGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android'), 'build');\n}\nfunction getProjectBuildGradleAsync(_x3) {\n  return _getProjectBuildGradleAsync.apply(this, arguments);\n}\nfunction _getProjectBuildGradleAsync() {\n  _getProjectBuildGradleAsync = _asyncToGenerator(function* (projectRoot) {\n    return getFileInfo(getProjectBuildGradleFilePath(projectRoot));\n  });\n  return _getProjectBuildGradleAsync.apply(this, arguments);\n}\nfunction getSettingsGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android'), 'settings');\n}\nfunction getSettingsGradleAsync(_x4) {\n  return _getSettingsGradleAsync.apply(this, arguments);\n}\nfunction _getSettingsGradleAsync() {\n  _getSettingsGradleAsync = _asyncToGenerator(function* (projectRoot) {\n    return getFileInfo(getSettingsGradleFilePath(projectRoot));\n  });\n  return _getSettingsGradleAsync.apply(this, arguments);\n}\nfunction getAppBuildGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android', 'app'), 'build');\n}\nfunction getAppBuildGradleAsync(_x5) {\n  return _getAppBuildGradleAsync.apply(this, arguments);\n}\nfunction _getAppBuildGradleAsync() {\n  _getAppBuildGradleAsync = _asyncToGenerator(function* (projectRoot) {\n    return getFileInfo(getAppBuildGradleFilePath(projectRoot));\n  });\n  return _getAppBuildGradleAsync.apply(this, arguments);\n}\nfunction getProjectPathOrThrowAsync(_x6) {\n  return _getProjectPathOrThrowAsync.apply(this, arguments);\n}\nfunction _getProjectPathOrThrowAsync() {\n  _getProjectPathOrThrowAsync = _asyncToGenerator(function* (projectRoot) {\n    var projectPath = path().join(projectRoot, 'android');\n    if (yield (0, _modules().directoryExistsAsync)(projectPath)) {\n      return projectPath;\n    }\n    throw new Error(\"Android project folder is missing in project: \" + projectRoot);\n  });\n  return _getProjectPathOrThrowAsync.apply(this, arguments);\n}\nfunction getAndroidManifestAsync(_x7) {\n  return _getAndroidManifestAsync.apply(this, arguments);\n}\nfunction _getAndroidManifestAsync() {\n  _getAndroidManifestAsync = _asyncToGenerator(function* (projectRoot) {\n    var projectPath = yield getProjectPathOrThrowAsync(projectRoot);\n    var filePath = path().join(projectPath, 'app/src/main/AndroidManifest.xml');\n    return filePath;\n  });\n  return _getAndroidManifestAsync.apply(this, arguments);\n}\nfunction getResourceFolderAsync(_x8) {\n  return _getResourceFolderAsync.apply(this, arguments);\n}\nfunction _getResourceFolderAsync() {\n  _getResourceFolderAsync = _asyncToGenerator(function* (projectRoot) {\n    var projectPath = yield getProjectPathOrThrowAsync(projectRoot);\n    return path().join(projectPath, \"app/src/main/res\");\n  });\n  return _getResourceFolderAsync.apply(this, arguments);\n}\nfunction getResourceXMLPathAsync(_x9, _x10) {\n  return _getResourceXMLPathAsync.apply(this, arguments);\n}\nfunction _getResourceXMLPathAsync() {\n  _getResourceXMLPathAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var _ref$kind = _ref.kind,\n      kind = _ref$kind === void 0 ? 'values' : _ref$kind,\n      name = _ref.name;\n    var resourcePath = yield getResourceFolderAsync(projectRoot);\n    var filePath = path().join(resourcePath, kind + \"/\" + name + \".xml\");\n    return filePath;\n  });\n  return _getResourceXMLPathAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","_fs","_glob","path","_interopRequireWildcard","_errors","_modules","getProjectFilePath","projectRoot","name","filePath","sync","join","default","getLanguage","extension","extname","UnexpectedError","getFileInfo","normalize","contents","readFileSync","language","getMainApplicationAsync","_x","_getMainApplicationAsync","apply","arguments","_asyncToGenerator","getMainActivityAsync","_x2","_getMainActivityAsync","getGradleFilePath","gradleName","groovyPath","resolve","ktPath","isGroovy","existsSync","isKotlin","Error","getProjectBuildGradleFilePath","getProjectBuildGradleAsync","_x3","_getProjectBuildGradleAsync","getSettingsGradleFilePath","getSettingsGradleAsync","_x4","_getSettingsGradleAsync","getAppBuildGradleFilePath","getAppBuildGradleAsync","_x5","_getAppBuildGradleAsync","getProjectPathOrThrowAsync","_x6","_getProjectPathOrThrowAsync","projectPath","directoryExistsAsync","getAndroidManifestAsync","_x7","_getAndroidManifestAsync","getResourceFolderAsync","_x8","_getResourceFolderAsync","getResourceXMLPathAsync","_x9","_x10","_getResourceXMLPathAsync","_ref","_ref$kind","kind","resourcePath"],"sources":["/Users/henriqueeidt/Documents/Projects/poc-web-mobile-components/component-library/node_modules/@expo/config-plugins/src/android/Paths.ts"],"sourcesContent":["import assert from 'assert';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport { UnexpectedError } from '../utils/errors';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { ResourceKind } from './Resources';\n\nexport interface ProjectFile<L extends string = string> {\n  path: string;\n  language: L;\n  contents: string;\n}\n\nexport type ApplicationProjectFile = ProjectFile<'java' | 'kt'>;\nexport type GradleProjectFile = ProjectFile<'groovy' | 'kt'>;\n\nexport function getProjectFilePath(projectRoot: string, name: string): string {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/main/java/**/${name}.@(java|kt)`)\n  )[0];\n  assert(\n    filePath,\n    `Project file \"${name}\" does not exist in android project for root \"${projectRoot}\"`\n  );\n\n  return filePath;\n}\n\nfunction getLanguage(filePath: string): 'java' | 'groovy' | 'kt' {\n  const extension = path.extname(filePath);\n  switch (extension) {\n    case '.java':\n      return 'java';\n    case '.kts':\n    case '.kt':\n      return 'kt';\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n    default:\n      throw new UnexpectedError(`Unexpected Android file extension: ${extension}`);\n  }\n}\n\nexport function getFileInfo(filePath: string) {\n  return {\n    path: path.normalize(filePath),\n    contents: fs.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath) as any,\n  };\n}\n\nexport async function getMainApplicationAsync(\n  projectRoot: string\n): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainApplication');\n  return getFileInfo(filePath);\n}\n\nexport async function getMainActivityAsync(projectRoot: string): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainActivity');\n  return getFileInfo(filePath);\n}\n\nexport function getGradleFilePath(projectRoot: string, gradleName: string): string {\n  const groovyPath = path.resolve(projectRoot, `${gradleName}.gradle`);\n  const ktPath = path.resolve(projectRoot, `${gradleName}.gradle.kts`);\n\n  const isGroovy = fs.existsSync(groovyPath);\n  const isKotlin = !isGroovy && fs.existsSync(ktPath);\n\n  if (!isGroovy && !isKotlin) {\n    throw new Error(`Failed to find '${gradleName}.gradle' file for project: ${projectRoot}.`);\n  }\n  const filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\n\nexport function getProjectBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'build');\n}\n\nexport async function getProjectBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getProjectBuildGradleFilePath(projectRoot));\n}\n\nexport function getSettingsGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'settings');\n}\n\nexport async function getSettingsGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getSettingsGradleFilePath(projectRoot));\n}\n\nexport function getAppBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android', 'app'), 'build');\n}\n\nexport async function getAppBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getAppBuildGradleFilePath(projectRoot));\n}\n\nexport async function getProjectPathOrThrowAsync(projectRoot: string): Promise<string> {\n  const projectPath = path.join(projectRoot, 'android');\n  if (await directoryExistsAsync(projectPath)) {\n    return projectPath;\n  }\n  throw new Error(`Android project folder is missing in project: ${projectRoot}`);\n}\n\nexport async function getAndroidManifestAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  const filePath = path.join(projectPath, 'app/src/main/AndroidManifest.xml');\n  return filePath;\n}\n\nexport async function getResourceFolderAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  return path.join(projectPath, `app/src/main/res`);\n}\n\nexport async function getResourceXMLPathAsync(\n  projectRoot: string,\n  { kind = 'values', name }: { kind?: ResourceKind; name: 'colors' | 'strings' | 'styles' | string }\n): Promise<string> {\n  const resourcePath = await getResourceFolderAsync(projectRoot);\n\n  const filePath = path.join(resourcePath, `${kind}/${name}.xml`);\n  return filePath;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}